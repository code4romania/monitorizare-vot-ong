{
    "pipes": [],
    "interfaces": [
        {
            "name": "AnswerExtraConstructorData",
            "id": "interface-AnswerExtraConstructorData-4ba4e42846f42cb878cd4b79a0199919",
            "file": "src/app/models/answer.extra.model.ts",
            "type": "interface",
            "sourceCode": "import {isString, isDate} from 'lodash';\r\n\r\nexport interface AnswerExtraConstructorData {\r\n    lastModified: string;\r\n    urbanArea: boolean;\r\n    observerArrivalTime: string;\r\n    observerLeaveTime: string;\r\n    isPollingStationPresidentFemale: boolean;\r\n}\r\nexport class AnswerExtra {\r\n    lastModified: Date;\r\n    urbanArea = false;\r\n    observerArrivalTime: Date;\r\n    observerLeaveTime: Date;\r\n    isPollingStationPresidentFemale = false;\r\n\r\n    constructor(formInfo?: AnswerExtraConstructorData) {\r\n        if (!formInfo) {\r\n            return;\r\n        }\r\n        checkForPropValue(formInfo.lastModified, val => this.lastModified = val);\r\n        checkForPropValue(formInfo.observerArrivalTime, val => this.observerArrivalTime = val);\r\n        checkForPropValue(formInfo.observerLeaveTime, val => this.observerLeaveTime = val);\r\n        this.urbanArea = formInfo.urbanArea;\r\n        this.isPollingStationPresidentFemale = formInfo.isPollingStationPresidentFemale;\r\n\r\n        function checkForPropValue(value, setPropertyFn: (val: Date) => void) {\r\n            if (!value) {\r\n                return;\r\n            }\r\n            if (isString(value)) {\r\n                value = new Date(value);\r\n            }\r\n\r\n            if (isDate(value)) {\r\n                setPropertyFn(value);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "isPollingStationPresidentFemale",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastModified",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "observerArrivalTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "observerLeaveTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "urbanArea",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AnswersPackFilter",
            "id": "interface-AnswersPackFilter-3a8c1382c97a1adeb92aaafdeea9c5b3",
            "file": "src/app/services/answers.service.ts",
            "type": "interface",
            "sourceCode": "import { environment } from '../../environments/environment';\r\nimport { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiService, QueryParamBuilder } from '../core/apiService/api.service';\r\n\r\n@Injectable()\r\nexport class AnswersService {\r\n\tprivate baseUrl: string;\r\n\r\n\tconstructor(private http: ApiService) {\r\n\t\tthis.baseUrl = environment.apiUrl;\r\n\t}\r\n\r\n\tdownloadAnswers(filter: AnswersPackFilter) {\r\n\t\tlet paramBuilder = QueryParamBuilder\r\n      .Instance('/api/v1/export/all');\r\n\r\n  for (const key in filter) {\r\n\t\t    const value = filter[key];\r\n\t\t    paramBuilder = paramBuilder.withParam(key, value);\r\n\t\t}\r\n\t\tconst urlWithParams = paramBuilder.build();\r\n\r\n\t\tconst url: string = Location.joinWithSlash(this.baseUrl, urlWithParams);\r\n\t\treturn this.http.get<Blob>(url, {responseType: 'blob' as 'json'});\r\n\t}\r\n}\r\n\r\nexport interface AnswersPackFilter {\r\n\tidNgo?: number;\r\n\tidObserver?: number;\r\n\tpollingStationNumber?: number;\r\n\tcounty?: string;\r\n\tfrom?: string;\r\n\tto?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "county",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "from",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "idNgo",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "idObserver",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pollingStationNumber",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "to",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ApiListResponse",
            "id": "interface-ApiListResponse-d34b9bb986f4382635887bfeb5614b7d",
            "file": "src/app/models/api-list-response.model.ts",
            "type": "interface",
            "sourceCode": "export interface ApiListResponse<T> {\r\n  data: T[];\r\n  totalPages: number;\r\n  totalItems: number;\r\n  page: number;\r\n  pageSize: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "totalItems",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalPages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CountyPollingStationInfo",
            "id": "interface-CountyPollingStationInfo-96ed028de300eacdc45b2c9c47d48b7c",
            "file": "src/app/services/notifications.service.ts",
            "type": "interface",
            "sourceCode": "import {take} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiService, QueryParamBuilder } from '../core/apiService/api.service';\r\nimport { Observable } from 'rxjs';\r\nimport {GlobalNotificationModel, NotificationModel} from '../models/notification.model';\r\nimport { environment } from '../../environments/environment';\r\nimport { Location } from '@angular/common';\r\nimport {Observer} from '../models/observer.model';\r\n\r\n@Injectable()\r\nexport class NotificationsService {\r\n  private baseUrl: string;\r\n\r\n\r\n  constructor(private http: ApiService) {\r\n    this.baseUrl = environment.apiUrl;\r\n  }\r\n\r\n  public pushNotification(notification: NotificationModel): Observable<any> {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/notification/send');\r\n    return this.http.post(url, notification).pipe(take(1));\r\n  }\r\n\r\n  public pushNotificationGlobally(notification: GlobalNotificationModel): Observable<any> {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/notification/send/all');\r\n    return this.http.post(url, notification).pipe(take(1));\r\n  }\r\n\r\n  public getCounties(): Observable<CountyPollingStationInfo[]> {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/polling-station');\r\n    return this.http.get<CountyPollingStationInfo[]>(url).pipe(take(1));\r\n  }\r\n\r\n  public getActiveObserversInCounties(counties: string[], fromPollingStationNumber: number, toPollingStationNumber: number): Observable<Observer[]> {\r\n    const urlWithParams = QueryParamBuilder\r\n      .Instance('/api/v1/observer/active')\r\n      .withParam('countyCodes', counties)\r\n      .withParam('fromPollingStationNumber', fromPollingStationNumber)\r\n      .withParam('toPollingStationNumber', toPollingStationNumber)\r\n      .withParam('currentlyCheckedIn', true)\r\n      .build();\r\n\r\n    const url: string = Location.joinWithSlash(this.baseUrl, urlWithParams);\r\n    return this.http.get<Observer[]>(url).pipe(take(1));\r\n  }\r\n}\r\n\r\nexport interface CountyPollingStationInfo {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  limit: number;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "limit",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormDetails",
            "id": "interface-FormDetails-a0ae70ecb9f9c3cdaff83f1a29002c9e",
            "file": "src/app/models/form.info.model.ts",
            "type": "interface",
            "sourceCode": "export interface FormInfo {\r\n    formVersions: FormDetails[];\r\n}\r\n\r\nexport interface FormDetails {\r\n    id: number;\r\n    code: string;\r\n    description: string;\r\n    currentVersion: number;\r\n    diaspora: boolean;\r\n    draft: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "currentVersion",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "diaspora",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "draft",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormInfo",
            "id": "interface-FormInfo-a0ae70ecb9f9c3cdaff83f1a29002c9e",
            "file": "src/app/models/form.info.model.ts",
            "type": "interface",
            "sourceCode": "export interface FormInfo {\r\n    formVersions: FormDetails[];\r\n}\r\n\r\nexport interface FormDetails {\r\n    id: number;\r\n    code: string;\r\n    description: string;\r\n    currentVersion: number;\r\n    diaspora: boolean;\r\n    draft: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "formVersions",
                    "type": "FormDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GlobalNotificationModel",
            "id": "interface-GlobalNotificationModel-2a3de12675803f1ad763777d40da407c",
            "file": "src/app/models/notification.model.ts",
            "type": "interface",
            "sourceCode": "export interface NotificationModel extends GlobalNotificationModel {\r\n    recipients: string[];\r\n  }\r\n\r\nexport interface GlobalNotificationModel {\r\n  channel: string;\r\n  from: string;\r\n  title: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "channel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "from",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HttpOptions",
            "id": "interface-HttpOptions-631c2fd907cc0ba5cba6de434ee5ec4e",
            "file": "src/app/core/apiService/api.service.ts",
            "type": "interface",
            "sourceCode": "import {throwError as observableThrowError, Observable} from 'rxjs';\r\n\r\nimport {catchError} from 'rxjs/operators';\r\nimport {Router} from '@angular/router';\r\nimport {TokenService} from '../token/token.service';\r\nimport {Injectable} from '@angular/core';\r\nimport * as _ from 'lodash';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\n\r\nexport interface HttpOptions {\r\n  body?: any;\r\n  headers?: HttpHeaders;\r\n  observe?: 'body';\r\n  params?: HttpParams;\r\n  responseType?: 'json';\r\n  reportProgress?: boolean;\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport const HttpMethod = {\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  DELETE: 'DELETE',\r\n  PATCH: 'PATCH',\r\n  HEAD: 'HEAD',\r\n  OPTIONS: 'OPTIONS',\r\n};\r\n\r\nexport class QueryParamBuilder {\r\n  private params: string[] = [];\r\n  private constructor(private methodUrl: string) {\r\n  }\r\n\r\n  public static Instance(methodUrl: string): QueryParamBuilder {\r\n    return new QueryParamBuilder(methodUrl);\r\n  }\r\n\r\n  public withParam(paramName: string, value: number | boolean | string | string[]): QueryParamBuilder {\r\n    if (value instanceof Array) {\r\n      value.forEach(x => {\r\n        this.params.push(`${paramName}=${x}`);\r\n      });\r\n\r\n    } else {\r\n      this.params.push(`${paramName}=${value}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public build(): string {\r\n    const joinedParams: string = this.params.join('&');\r\n    return `${this.methodUrl}?${joinedParams}`;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n\r\n  constructor(private httpClient: HttpClient, private tokenService: TokenService, private router: Router) {\r\n  }\r\n\r\n  private request<T>(url: string, method: string, options?: HttpOptions): Observable<T> {\r\n    options.headers = options.headers.append('Authorization', `Bearer ${this.tokenService.token}`);\r\n\r\n    return this.httpClient.request<T>(method, url, options).pipe(catchError((err: any) => {\r\n      if (err.status === 401) {\r\n        this.tokenService.token = undefined;\r\n        this.router.navigateByUrl('/login');\r\n      }\r\n      return observableThrowError(err);\r\n    }));\r\n  }\r\n\r\n  private normalizeRequest<T>(url: string, method: string, options?: HttpOptions, body?: any): Observable<T> {\r\n    const requestOptions = options || {};\r\n    requestOptions.headers = requestOptions.headers || new HttpHeaders();\r\n    requestOptions.responseType = requestOptions.responseType || 'json';\r\n    if (body) {\r\n      requestOptions.body = body;\r\n    }\r\n    return this.request(url, method, requestOptions);\r\n  }\r\n\r\n  get<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    if (options && options.body && !options.params) {\r\n      let params = new HttpParams();\r\n      _.each(options.body, (value, key) => (\r\n        params = params.append(key, value)\r\n      ));\r\n      options.params = params;\r\n    }\r\n    return this.normalizeRequest(url, HttpMethod.GET, options);\r\n  }\r\n\r\n  post<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.POST, options, body);\r\n  }\r\n\r\n  untypedPost(url: string, body: any): Observable<string> {\r\n    return this.httpClient.post(url, body, {\r\n      responseType: 'text'\r\n    }).pipe(catchError((err: any) => {\r\n      if (err.status === 401) {\r\n        this.tokenService.token = undefined;\r\n        this.router.navigateByUrl('/login');\r\n      }\r\n      return observableThrowError(err);\r\n    }));\r\n  }\r\n\r\n  put<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.PUT, options, body);\r\n  }\r\n\r\n  delete<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.DELETE, options);\r\n  }\r\n\r\n  patch<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.PATCH, options);\r\n  }\r\n\r\n  head<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.HEAD, options);\r\n  }\r\n\r\n  options<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.OPTIONS, options);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "headers",
                    "type": "HttpHeaders",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "observe",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "params",
                    "type": "HttpParams",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "reportProgress",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "responseType",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "withCredentials",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NotificationModel",
            "id": "interface-NotificationModel-2a3de12675803f1ad763777d40da407c",
            "file": "src/app/models/notification.model.ts",
            "type": "interface",
            "sourceCode": "export interface NotificationModel extends GlobalNotificationModel {\r\n    recipients: string[];\r\n  }\r\n\r\nexport interface GlobalNotificationModel {\r\n  channel: string;\r\n  from: string;\r\n  title: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "recipients",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "GlobalNotificationModel"
        },
        {
            "name": "ObserversStateConfig",
            "id": "interface-ObserversStateConfig-abc463ff9249cf6cf499d05f218e41d0",
            "file": "src/app/store/observers/observers.config.ts",
            "type": "interface",
            "sourceCode": "export interface ObserversStateConfig {\r\n    key: string;\r\n    method: string;\r\n    header: string;\r\n    subHeader: string;\r\n}\r\nexport let observersConfig = [{\r\n    key: 'observers-list',\r\n    method: '',\r\n    header: 'Observatori',\r\n    subHeader: '',\r\n}];\r\n",
            "properties": [
                {
                    "name": "header",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "method",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "subHeader",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PaginationData",
            "id": "interface-PaginationData-309186feb730911e3dc5aa6c98a3968d",
            "file": "src/app/shared/pagination.interface.ts",
            "type": "interface",
            "sourceCode": "export interface PaginationData{\r\n    pageSize: number;\r\n    page: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "QuestionType",
            "id": "interface-QuestionType-abe020ef1f888fb3a22ded6d7198d268",
            "file": "src/app/models/form.question.model.ts",
            "type": "interface",
            "sourceCode": "import { BaseAnswer } from './base.answer.model';\r\nimport {BaseQuestion} from './base.question.model';\r\n\r\nexport class FormQuestion extends BaseQuestion {\r\n    id: number;\r\n    formCode: string;\r\n    code: string;\r\n    idSection: number;\r\n    questionType: number;\r\n    text: string;\r\n    hint: string;\r\n    optionsToQuestions: BaseAnswer[];\r\n}\r\n\r\nexport const QUESTION_TYPES = [\r\n  {\r\n    id: 0,\r\n    name: 'MULTIPLE_CHOICE'\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'SINGLE_CHOICE'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'SINGLE_CHOICE_TEXT'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'MULTIPLE_CHOICE_TEXT'\r\n  }\r\n];\r\n\r\nexport interface QuestionType {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StatisticsStateConfig",
            "id": "interface-StatisticsStateConfig-7f6c92b06bf77499ecb35c3e049f369f",
            "file": "src/app/store/statistics/statistics.config.ts",
            "type": "interface",
            "sourceCode": "export interface StatisticsStateConfig {\r\n    key: string;\r\n    method: string;\r\n    header: string;\r\n    subHeader: string;\r\n}\r\nexport let statisticsConfig = [{\r\n    key: 'numar-observatori',\r\n    method: 'observerNumber',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cei mai multi observatori',\r\n}, {\r\n    //   key: 'sesizari',\r\n    //   method: \"sesizari\",\r\n    //   header: \"Topul sectiilor\",\r\n    //   subHeader: \"cu cele mai multe sesizari\"\r\n    // }, {\r\n    key: 'sesizari-judete',\r\n    method: 'countiesIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai sesizari'\r\n}, {\r\n    key: 'sesizari-sectii',\r\n    method: 'pollingStationIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari'\r\n}, {\r\n    key: 'sesizari-deschidere-judete',\r\n    method: 'countiesOpeningIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai multe sesizari la deschidere'\r\n}, {\r\n    key: 'sesizari-deschidere-sectii',\r\n    method: 'pollingStationOpeningIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari la deschidere'\r\n}, {\r\n    key: 'sesizari-numarare-judete',\r\n    method: 'countiesByCountingIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai multe sesizari la numararea voturilor'\r\n}, {\r\n    key: 'sesizari-numarare-sectii',\r\n    method: 'pollingStationsByCountingIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari la numararea voturilor'\r\n}];\r\n",
            "properties": [
                {
                    "name": "header",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "method",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "subHeader",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AnswerEffects",
            "id": "injectable-AnswerEffects-a6a1b5f5f1b0aaf9c47307810aa38ff7",
            "file": "src/app/store/answer/answer.effects.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadDetails",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_DETAILS),\r\n      switchMap((action: LoadAnswerDetailsAction) => {\r\n        const completedAnswears: string = Location.joinWithSlash(this.baseUrl, '/api/v1/answers/filledIn');\r\n\r\n        return this.http.get<CompletedQuestion[]>(completedAnswears, {\r\n          body: {\r\n            idPollingStation: action.payload.sectionId,\r\n            idObserver: action.payload.observerId\r\n          }\r\n        });\r\n    }\r\n    ),\r\n    map((answers: CompletedQuestion[]) => new LoadAnswerDetailsDoneAction(answers)),\r\n    catchError(() => observableOf(new LoadAnswerDetailsErrorAction())), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadExtra",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_EXTRA),\r\n      map((a: LoadAnswerExtraAction) => a.payload),\r\n      switchMap(p => {\r\n        const formAnswears: string = Location.joinWithSlash(this.baseUrl, '/api/v1/answers/pollingStationInfo');\r\n\r\n        return this.http.get<AnswerExtraConstructorData>(formAnswears, {\r\n          body: {\r\n            ObserverId: p.observerId,\r\n            PollingStationNumber: p.sectionId\r\n          }\r\n        });\r\n      }\r\n      ),\r\n      map(json => json ? new AnswerExtra(json) : undefined),\r\n      map(extra => new LoadAnswerExtraDoneAction(extra)),\r\n      catchError(() => observableOf(new LoadAnswerExtraErrorAction())), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadExtraFromAnswer",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_DETAILS),\r\n      map((a: LoadAnswerDetailsAction) => new LoadAnswerExtraAction(a.payload.observerId, a.payload.sectionId)))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadNotes",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_DETAILS),\r\n      map((a: LoadAnswerDetailsAction) => new LoadNotesAction(a.payload.sectionId, a.payload.observerId)))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadThreads",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_PREVIEW),\r\n      filter((a: LoadAnswerPreviewAction) => shouldLoadPage(a.payload.page, a.payload.pageSize, this.state.threads.length)),\r\n      switchMap((action: LoadAnswerPreviewAction) => {\r\n      const answearsUrl: string = Location.joinWithSlash(this.baseUrl, '/api/v1/answers');\r\n\r\n      return this.http.get<{\r\n        data: AnswerThread[],\r\n        totalItems: number,\r\n        totalPages: number\r\n      }>(answearsUrl, {\r\n        params: this.buildLoadAnswerPreviewFilterParams(action.payload)\r\n      });\r\n    }),\r\n    map(json => new LoadAnswerPreviewDoneAction(json.data, json.totalItems, json.totalPages)),\r\n    catchError(() => observableOf(new LoadAnswerPreviewErorrAction())), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "state",
                    "type": "AnswerState",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methods": [
                {
                    "name": "buildLoadAnswerPreviewFilterParams",
                    "args": [
                        {
                            "name": "payload",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldLoad",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "pageSize",
                            "type": "number"
                        },
                        {
                            "name": "arrayLen",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arrayLen",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {of as observableOf,  Observable } from 'rxjs';\r\n\r\nimport {catchError, map, switchMap, filter} from 'rxjs/operators';\r\nimport { AnswerExtra, AnswerExtraConstructorData } from '../../models/answer.extra.model';\r\nimport { LoadNotesAction } from '../note/note.actions';\r\nimport { shouldLoadPage } from '../../shared/pagination.service';\r\nimport { AnswerState } from './answer.reducer';\r\nimport { AppState } from '../store.module';\r\nimport { Store } from '@ngrx/store';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport {\r\n  AnswerActionTypes,\r\n  LoadAnswerDetailsAction,\r\n  LoadAnswerDetailsDoneAction,\r\n  LoadAnswerDetailsErrorAction,\r\n  LoadAnswerExtraAction,\r\n  LoadAnswerExtraDoneAction,\r\n  LoadAnswerExtraErrorAction,\r\n  LoadAnswerPreviewAction,\r\n  LoadAnswerPreviewDoneAction,\r\n  LoadAnswerPreviewErorrAction\r\n} from './answer.actions';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport {isNil} from 'lodash';\r\nimport { Injectable } from '@angular/core';\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Location } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class AnswerEffects {\r\n  private baseUrl: string;\r\n  state: AnswerState;\r\n  constructor(private http: ApiService, private actions: Actions, store: Store<AppState>) {\r\n    this.baseUrl = environment.apiUrl;\r\n    store.select(s => s.answer).subscribe(s => this.state = s);\r\n  }\r\n\r\n  @Effect()\r\n  loadThreads = this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_PREVIEW),\r\n      filter((a: LoadAnswerPreviewAction) => shouldLoadPage(a.payload.page, a.payload.pageSize, this.state.threads.length)),\r\n      switchMap((action: LoadAnswerPreviewAction) => {\r\n      const answearsUrl: string = Location.joinWithSlash(this.baseUrl, '/api/v1/answers');\r\n\r\n      return this.http.get<{\r\n        data: AnswerThread[],\r\n        totalItems: number,\r\n        totalPages: number\r\n      }>(answearsUrl, {\r\n        params: this.buildLoadAnswerPreviewFilterParams(action.payload)\r\n      });\r\n    }),\r\n    map(json => new LoadAnswerPreviewDoneAction(json.data, json.totalItems, json.totalPages)),\r\n    catchError(() => observableOf(new LoadAnswerPreviewErorrAction())), );\r\n\r\n\r\n  shouldLoad(page: number, pageSize: number, arrayLen) {\r\n    if (page === undefined || pageSize === undefined) {\r\n      return true;\r\n    }\r\n\r\n    return page * pageSize > arrayLen;\r\n  }\r\n\r\n  private buildLoadAnswerPreviewFilterParams(payload: { page: number;\r\n                                                        pageSize: number;\r\n                                                        urgent: boolean;\r\n                                                        refresh: boolean;\r\n                                                        answerFilters?: AnswerFilters; }): HttpParams {\r\n    let params = new HttpParams();\r\n\r\n    if (payload && payload.answerFilters) {\r\n      params = isNil(payload.page) ? params : params.append('page', payload.page.toString());\r\n      params = isNil(payload.pageSize) ? params : params.append('pageSize', payload.pageSize.toString());\r\n      params = isNil(payload.answerFilters.county) ? params : params.append('county', payload.answerFilters.county);\r\n      params = isNil(payload.answerFilters.pollingStationNumber) ? params : params.append('pollingStationNumber',\r\n        payload.answerFilters.pollingStationNumber);\r\n      params = isNil(payload.urgent) ? params : params.append('urgent', payload.urgent.toString());\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  @Effect()\r\n  loadDetails = this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_DETAILS),\r\n      switchMap((action: LoadAnswerDetailsAction) => {\r\n        const completedAnswears: string = Location.joinWithSlash(this.baseUrl, '/api/v1/answers/filledIn');\r\n\r\n        return this.http.get<CompletedQuestion[]>(completedAnswears, {\r\n          body: {\r\n            idPollingStation: action.payload.sectionId,\r\n            idObserver: action.payload.observerId\r\n          }\r\n        });\r\n    }\r\n    ),\r\n    map((answers: CompletedQuestion[]) => new LoadAnswerDetailsDoneAction(answers)),\r\n    catchError(() => observableOf(new LoadAnswerDetailsErrorAction())), );\r\n\r\n  @Effect()\r\n  loadNotes = this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_DETAILS),\r\n      map((a: LoadAnswerDetailsAction) => new LoadNotesAction(a.payload.sectionId, a.payload.observerId)));\r\n\r\n  @Effect()\r\n  loadExtraFromAnswer = this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_DETAILS),\r\n      map((a: LoadAnswerDetailsAction) => new LoadAnswerExtraAction(a.payload.observerId, a.payload.sectionId)));\r\n\r\n  @Effect()\r\n  loadExtra = this.actions\r\n    .pipe(ofType(AnswerActionTypes.LOAD_EXTRA),\r\n      map((a: LoadAnswerExtraAction) => a.payload),\r\n      switchMap(p => {\r\n        const formAnswears: string = Location.joinWithSlash(this.baseUrl, '/api/v1/answers/pollingStationInfo');\r\n\r\n        return this.http.get<AnswerExtraConstructorData>(formAnswears, {\r\n          body: {\r\n            ObserverId: p.observerId,\r\n            PollingStationNumber: p.sectionId\r\n          }\r\n        });\r\n      }\r\n      ),\r\n      map(json => json ? new AnswerExtra(json) : undefined),\r\n      map(extra => new LoadAnswerExtraDoneAction(extra)),\r\n      catchError(() => observableOf(new LoadAnswerExtraErrorAction())), );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AnswersService",
            "id": "injectable-AnswersService-3a8c1382c97a1adeb92aaafdeea9c5b3",
            "file": "src/app/services/answers.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "downloadAnswers",
                    "args": [
                        {
                            "name": "filter",
                            "type": "AnswersPackFilter"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "AnswersPackFilter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { environment } from '../../environments/environment';\r\nimport { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiService, QueryParamBuilder } from '../core/apiService/api.service';\r\n\r\n@Injectable()\r\nexport class AnswersService {\r\n\tprivate baseUrl: string;\r\n\r\n\tconstructor(private http: ApiService) {\r\n\t\tthis.baseUrl = environment.apiUrl;\r\n\t}\r\n\r\n\tdownloadAnswers(filter: AnswersPackFilter) {\r\n\t\tlet paramBuilder = QueryParamBuilder\r\n      .Instance('/api/v1/export/all');\r\n\r\n  for (const key in filter) {\r\n\t\t    const value = filter[key];\r\n\t\t    paramBuilder = paramBuilder.withParam(key, value);\r\n\t\t}\r\n\t\tconst urlWithParams = paramBuilder.build();\r\n\r\n\t\tconst url: string = Location.joinWithSlash(this.baseUrl, urlWithParams);\r\n\t\treturn this.http.get<Blob>(url, {responseType: 'blob' as 'json'});\r\n\t}\r\n}\r\n\r\nexport interface AnswersPackFilter {\r\n\tidNgo?: number;\r\n\tidObserver?: number;\r\n\tpollingStationNumber?: number;\r\n\tcounty?: string;\r\n\tfrom?: string;\r\n\tto?: string;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApiService",
            "id": "injectable-ApiService-631c2fd907cc0ba5cba6de434ee5ec4e",
            "file": "src/app/core/apiService/api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "head",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "normalizeRequest",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "method",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 76,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "options",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "request",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "method",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 64,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HttpOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "untypedPost",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {throwError as observableThrowError, Observable} from 'rxjs';\r\n\r\nimport {catchError} from 'rxjs/operators';\r\nimport {Router} from '@angular/router';\r\nimport {TokenService} from '../token/token.service';\r\nimport {Injectable} from '@angular/core';\r\nimport * as _ from 'lodash';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\n\r\nexport interface HttpOptions {\r\n  body?: any;\r\n  headers?: HttpHeaders;\r\n  observe?: 'body';\r\n  params?: HttpParams;\r\n  responseType?: 'json';\r\n  reportProgress?: boolean;\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport const HttpMethod = {\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  DELETE: 'DELETE',\r\n  PATCH: 'PATCH',\r\n  HEAD: 'HEAD',\r\n  OPTIONS: 'OPTIONS',\r\n};\r\n\r\nexport class QueryParamBuilder {\r\n  private params: string[] = [];\r\n  private constructor(private methodUrl: string) {\r\n  }\r\n\r\n  public static Instance(methodUrl: string): QueryParamBuilder {\r\n    return new QueryParamBuilder(methodUrl);\r\n  }\r\n\r\n  public withParam(paramName: string, value: number | boolean | string | string[]): QueryParamBuilder {\r\n    if (value instanceof Array) {\r\n      value.forEach(x => {\r\n        this.params.push(`${paramName}=${x}`);\r\n      });\r\n\r\n    } else {\r\n      this.params.push(`${paramName}=${value}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public build(): string {\r\n    const joinedParams: string = this.params.join('&');\r\n    return `${this.methodUrl}?${joinedParams}`;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n\r\n  constructor(private httpClient: HttpClient, private tokenService: TokenService, private router: Router) {\r\n  }\r\n\r\n  private request<T>(url: string, method: string, options?: HttpOptions): Observable<T> {\r\n    options.headers = options.headers.append('Authorization', `Bearer ${this.tokenService.token}`);\r\n\r\n    return this.httpClient.request<T>(method, url, options).pipe(catchError((err: any) => {\r\n      if (err.status === 401) {\r\n        this.tokenService.token = undefined;\r\n        this.router.navigateByUrl('/login');\r\n      }\r\n      return observableThrowError(err);\r\n    }));\r\n  }\r\n\r\n  private normalizeRequest<T>(url: string, method: string, options?: HttpOptions, body?: any): Observable<T> {\r\n    const requestOptions = options || {};\r\n    requestOptions.headers = requestOptions.headers || new HttpHeaders();\r\n    requestOptions.responseType = requestOptions.responseType || 'json';\r\n    if (body) {\r\n      requestOptions.body = body;\r\n    }\r\n    return this.request(url, method, requestOptions);\r\n  }\r\n\r\n  get<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    if (options && options.body && !options.params) {\r\n      let params = new HttpParams();\r\n      _.each(options.body, (value, key) => (\r\n        params = params.append(key, value)\r\n      ));\r\n      options.params = params;\r\n    }\r\n    return this.normalizeRequest(url, HttpMethod.GET, options);\r\n  }\r\n\r\n  post<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.POST, options, body);\r\n  }\r\n\r\n  untypedPost(url: string, body: any): Observable<string> {\r\n    return this.httpClient.post(url, body, {\r\n      responseType: 'text'\r\n    }).pipe(catchError((err: any) => {\r\n      if (err.status === 401) {\r\n        this.tokenService.token = undefined;\r\n        this.router.navigateByUrl('/login');\r\n      }\r\n      return observableThrowError(err);\r\n    }));\r\n  }\r\n\r\n  put<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.PUT, options, body);\r\n  }\r\n\r\n  delete<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.DELETE, options);\r\n  }\r\n\r\n  patch<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.PATCH, options);\r\n  }\r\n\r\n  head<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.HEAD, options);\r\n  }\r\n\r\n  options<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.OPTIONS, options);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FormEffects",
            "id": "injectable-FormEffects-3505253588f604cc1477f747e59abde2",
            "file": "src/app/store/form/form.effects.ts",
            "properties": [
                {
                    "name": "formDelete",
                    "defaultValue": "this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.DELETE),\r\n        take(1),\r\n        switchMap((a: FormDeleteAction) =>\r\n          this.formsService.deleteForm(a.formId).pipe(\r\n            map(_ => new FormLoadAction()),\r\n          )),\r\n        catchError(() => observableOf(new FormErrorAction()))\r\n      )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "formUpload",
                    "defaultValue": "this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.UPLOAD),\r\n        switchMap((a: FormUploadAction) =>\r\n          this.formsService.saveForm(a.form).pipe(\r\n            map(_ => new FormUploadCompleteAction())\r\n          )),\r\n        catchError(() => observableOf(new FormErrorAction()))\r\n      )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "formUploadPublish",
                    "defaultValue": "this.actions\r\n    .pipe(\r\n      ofType(FormActionTypes.UPLOAD_PUBLISH),\r\n      switchMap((a: FormUploadAction) =>\r\n        this.formsService.saveAndPublishForm(a.form).pipe(\r\n          map(_ => new FormUploadCompleteAction())\r\n        )),\r\n      catchError(() => observableOf(new FormErrorAction()))\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "formUploadSuccess",
                    "defaultValue": "this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.UPLOAD_COMPLETE),\r\n        take(1),\r\n        tap(_ => this.router.navigate(['formulare']))\r\n      )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "fullyLoadFormAction",
                    "defaultValue": "this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.LOAD_ONE_FORM_FULLY),\r\n        map((a: FullyLoadFormAction) => a.formId),\r\n        switchMap(formId =>\r\n          this.formsService.getForm(formId)\r\n            .pipe(\r\n              map((sections: FormSection[]) => {\r\n                const form = new Form();\r\n                form.id = formId;\r\n                form.formSections = sections;\r\n\r\n                return new FullyLoadFormCompleteAction(form);\r\n              })\r\n            )\r\n        ),\r\n        catchError(() => observableOf(new FormErrorAction()))\r\n      )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadFormAction",
                    "defaultValue": "this.actions\r\n        .pipe(ofType(FormActionTypes.LOAD_ALL_FORMS_META)).pipe(\r\n        switchMap(_ => this.formsService.loadForms()),\r\n        map(formInfo => new FormLoadCompletedAction(formInfo.formVersions)),\r\n        catchError(() => observableOf(new FormErrorAction())), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {of as observableOf} from 'rxjs';\r\n\r\nimport {catchError, map, switchMap, take, tap} from 'rxjs/operators';\r\nimport {\r\n  FormActionTypes,\r\n  FormClearAll,\r\n  FormDeleteAction,\r\n  FormErrorAction,\r\n  FormLoadAction,\r\n  FormLoadCompletedAction,\r\n  FormUploadAction,\r\n  FormUploadCompleteAction,\r\n  FullyLoadFormAction,\r\n  FullyLoadFormCompleteAction\r\n} from './form.actions';\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\nimport {Injectable} from '@angular/core';\r\nimport {FormSection} from '../../models/form.section.model';\r\nimport {FormsService} from '../../services/forms.service';\r\nimport {Router} from '@angular/router';\r\nimport {Form} from '../../models/form.model';\r\n\r\n@Injectable()\r\nexport class FormEffects {\r\n\r\n    constructor(private formsService: FormsService,\r\n                private actions: Actions,\r\n                private router: Router) {}\r\n\r\n    @Effect()\r\n    loadFormAction = this.actions\r\n        .pipe(ofType(FormActionTypes.LOAD_ALL_FORMS_META)).pipe(\r\n        switchMap(_ => this.formsService.loadForms()),\r\n        map(formInfo => new FormLoadCompletedAction(formInfo.formVersions)),\r\n        catchError(() => observableOf(new FormErrorAction())), );\r\n\r\n    @Effect()\r\n    fullyLoadFormAction = this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.LOAD_ONE_FORM_FULLY),\r\n        map((a: FullyLoadFormAction) => a.formId),\r\n        switchMap(formId =>\r\n          this.formsService.getForm(formId)\r\n            .pipe(\r\n              map((sections: FormSection[]) => {\r\n                const form = new Form();\r\n                form.id = formId;\r\n                form.formSections = sections;\r\n\r\n                return new FullyLoadFormCompleteAction(form);\r\n              })\r\n            )\r\n        ),\r\n        catchError(() => observableOf(new FormErrorAction()))\r\n      );\r\n\r\n    @Effect()\r\n    formUpload = this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.UPLOAD),\r\n        switchMap((a: FormUploadAction) =>\r\n          this.formsService.saveForm(a.form).pipe(\r\n            map(_ => new FormUploadCompleteAction())\r\n          )),\r\n        catchError(() => observableOf(new FormErrorAction()))\r\n      );\r\n\r\n  @Effect()\r\n  formUploadPublish = this.actions\r\n    .pipe(\r\n      ofType(FormActionTypes.UPLOAD_PUBLISH),\r\n      switchMap((a: FormUploadAction) =>\r\n        this.formsService.saveAndPublishForm(a.form).pipe(\r\n          map(_ => new FormUploadCompleteAction())\r\n        )),\r\n      catchError(() => observableOf(new FormErrorAction()))\r\n    );\r\n\r\n    @Effect()\r\n    formUploadSuccess = this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.UPLOAD_COMPLETE),\r\n        take(1),\r\n        tap(_ => this.router.navigate(['formulare']))\r\n      );\r\n\r\n    @Effect()\r\n    formDelete = this.actions\r\n      .pipe(\r\n        ofType(FormActionTypes.DELETE),\r\n        take(1),\r\n        switchMap((a: FormDeleteAction) =>\r\n          this.formsService.deleteForm(a.formId).pipe(\r\n            map(_ => new FormLoadAction()),\r\n          )),\r\n        catchError(() => observableOf(new FormErrorAction()))\r\n      );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formsService",
                        "type": "FormsService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "formsService",
                        "type": "FormsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FormsService",
            "id": "injectable-FormsService-9af824c47547195a5c7c1b9d6da13596",
            "file": "src/app/services/forms.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteForm",
                    "args": [
                        {
                            "name": "formId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "formId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getForm",
                    "args": [
                        {
                            "name": "formId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "formId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadForms",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveAndPublishForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "Form"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "Form",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "Form"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "Form",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchForms",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "pageNo",
                            "type": "number",
                            "optional": true
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNo",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "Form"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "Form",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {ApiService} from '../core/apiService/api.service';\r\nimport {Injectable} from '@angular/core';\r\nimport {FormDetails, FormInfo} from '../models/form.info.model';\r\nimport {Location} from '@angular/common';\r\nimport {Form} from '../models/form.model';\r\nimport {FormSection} from '../models/form.section.model';\r\nimport {environment} from '../../environments/environment';\r\nimport {cloneDeep} from 'lodash';\r\nimport {HttpParams} from '@angular/common/http';\r\n\r\n\r\n@Injectable()\r\nexport class FormsService {\r\n  private baseUrl: string;\r\n\r\n  constructor(private http: ApiService) {\r\n    this.baseUrl = Location.joinWithSlash(environment.apiUrl, '/api/v1/form');\r\n  }\r\n\r\n  public loadForms() {\r\n    return this.http.get<FormInfo>(this.baseUrl).pipe();\r\n  }\r\n\r\n  public searchForms(name: string, pageNo?: number, pageSize?: number) {\r\n    // TODO: enable search forms after BE is implemented\r\n    // let url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/form/search?Description=${name}`);\r\n    //\r\n    // if (pageNo > 0 && pageSize > 0) {\r\n    //   url = Location.joinWithSlash(this.baseUrl, `/api/v1/form/search?Description=${name}&Page=${pageNo}&PageSize=${pageSize}`);\r\n    // }\r\n    return this.http.get<FormInfo>(this.baseUrl).pipe();\r\n  }\r\n\r\n  public getForm(formId: number) {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, `/${formId}`);\r\n    return this.http.get<FormSection[]>(url);\r\n  }\r\n\r\n  public saveForm(form: Form) {\r\n    const formClone = cloneDeep(form);\r\n    formClone.draft = true;\r\n\r\n    return this.uploadForm(formClone);\r\n  }\r\n\r\n  public saveAndPublishForm(form: Form) {\r\n    const formClone = cloneDeep(form);\r\n    formClone.draft = false;\r\n\r\n    return this.uploadForm(formClone);\r\n  }\r\n\r\n  private uploadForm(form: Form) {\r\n    if (!form.currentVersion) {\r\n      form.currentVersion = 1;\r\n    }\r\n\r\n    return this.http.post(this.baseUrl, form);\r\n  }\r\n\r\n  public deleteForm(formId: number) {\r\n    const params = new HttpParams({fromObject: {formId: String(formId)}});\r\n    return this.http.delete(this.baseUrl, {params});\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NoteEffects",
            "id": "injectable-NoteEffects-b4ac58ba294672eae6afeb207d28204c",
            "file": "src/app/store/note/note.effects.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "notesStream",
                    "defaultValue": "this.actions\r\n        .pipe(ofType(NoteActionTypes.LOAD),\r\n          switchMap((a: LoadNotesAction) => {\r\n              const notesUrl: string = Location.joinWithSlash(this.baseUrl, '/api/v2/note');\r\n\r\n              return this.http.get<Note[]>(notesUrl, { body: a.payload });\r\n          }),\r\n          map(notes => new LoadNotesDoneAction(notes)), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {map, switchMap} from 'rxjs/operators';\r\nimport { Note } from '../../models/note.model';\r\nimport { LoadNotesAction, LoadNotesDoneAction, NoteActionTypes } from './note.actions';\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Location } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class NoteEffects {\r\n    private baseUrl: string;\r\n\r\n    constructor(private http: ApiService, private actions: Actions) {\r\n        this.baseUrl = environment.apiUrl;\r\n    }\r\n\r\n    @Effect()\r\n    notesStream = this.actions\r\n        .pipe(ofType(NoteActionTypes.LOAD),\r\n          switchMap((a: LoadNotesAction) => {\r\n              const notesUrl: string = Location.joinWithSlash(this.baseUrl, '/api/v2/note');\r\n\r\n              return this.http.get<Note[]>(notesUrl, { body: a.payload });\r\n          }),\r\n          map(notes => new LoadNotesDoneAction(notes)), );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationsService",
            "id": "injectable-NotificationsService-96ed028de300eacdc45b2c9c47d48b7c",
            "file": "src/app/services/notifications.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveObserversInCounties",
                    "args": [
                        {
                            "name": "counties",
                            "type": "string[]"
                        },
                        {
                            "name": "fromPollingStationNumber",
                            "type": "number"
                        },
                        {
                            "name": "toPollingStationNumber",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Observer[]>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "counties",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromPollingStationNumber",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toPollingStationNumber",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCounties",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CountyPollingStationInfo[]>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pushNotification",
                    "args": [
                        {
                            "name": "notification",
                            "type": "NotificationModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "NotificationModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pushNotificationGlobally",
                    "args": [
                        {
                            "name": "notification",
                            "type": "GlobalNotificationModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "GlobalNotificationModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {take} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiService, QueryParamBuilder } from '../core/apiService/api.service';\r\nimport { Observable } from 'rxjs';\r\nimport {GlobalNotificationModel, NotificationModel} from '../models/notification.model';\r\nimport { environment } from '../../environments/environment';\r\nimport { Location } from '@angular/common';\r\nimport {Observer} from '../models/observer.model';\r\n\r\n@Injectable()\r\nexport class NotificationsService {\r\n  private baseUrl: string;\r\n\r\n\r\n  constructor(private http: ApiService) {\r\n    this.baseUrl = environment.apiUrl;\r\n  }\r\n\r\n  public pushNotification(notification: NotificationModel): Observable<any> {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/notification/send');\r\n    return this.http.post(url, notification).pipe(take(1));\r\n  }\r\n\r\n  public pushNotificationGlobally(notification: GlobalNotificationModel): Observable<any> {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/notification/send/all');\r\n    return this.http.post(url, notification).pipe(take(1));\r\n  }\r\n\r\n  public getCounties(): Observable<CountyPollingStationInfo[]> {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/polling-station');\r\n    return this.http.get<CountyPollingStationInfo[]>(url).pipe(take(1));\r\n  }\r\n\r\n  public getActiveObserversInCounties(counties: string[], fromPollingStationNumber: number, toPollingStationNumber: number): Observable<Observer[]> {\r\n    const urlWithParams = QueryParamBuilder\r\n      .Instance('/api/v1/observer/active')\r\n      .withParam('countyCodes', counties)\r\n      .withParam('fromPollingStationNumber', fromPollingStationNumber)\r\n      .withParam('toPollingStationNumber', toPollingStationNumber)\r\n      .withParam('currentlyCheckedIn', true)\r\n      .build();\r\n\r\n    const url: string = Location.joinWithSlash(this.baseUrl, urlWithParams);\r\n    return this.http.get<Observer[]>(url).pipe(take(1));\r\n  }\r\n}\r\n\r\nexport interface CountyPollingStationInfo {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  limit: number;\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ObserversCountEffects",
            "id": "injectable-ObserversCountEffects-4901a6a8cbb0d404a0533f14cf6f94dd",
            "file": "src/app/store/observers/observers.effects.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadStats",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(ObserversActions.LOADOBSERVERSTOTALCOUNT),\r\n      switchMap((obs) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer/count`);\r\n\r\n          return this.http.get<number>(url).pipe(map(res => res));\r\n        }\r\n      ),\r\n      map((value: any) => {\r\n        return new LoadObserversCountCompleteAction(value);\r\n      }\r\n      ),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "state",
                    "type": "ObserversCountState",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {of as observableOf,  Observable } from 'rxjs';\r\n\r\nimport {mapTo, switchMap, catchError, mergeMap, groupBy, filter, map} from 'rxjs/operators';\r\nimport { ObserversState, ObserversCountState } from './observers.state';\r\nimport {select, Store} from '@ngrx/store';\r\nimport { AppState } from '../store.module';\r\nimport { shouldLoadPage } from '../../shared/pagination.service';\r\nimport { observersConfig } from './observers.config';\r\nimport {\r\n  DeleteObserverAction,\r\n  LoadObserversAction,\r\n  LoadObserversCompleteAction,\r\n  LoadObserversErrorAction,\r\n  ObserversActions,\r\n  LoadObserversCountAction,\r\n  LoadObserversCountCompleteAction\r\n} from './observers.actions';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observer } from '../../models/observer.model';\r\nimport { Location } from '@angular/common';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class ObserversEffects {\r\n  state: ObserversState;\r\n  private baseUrl: string;\r\n\r\n  constructor(private http: ApiService, private actions: Actions, private store: Store<AppState>) {\r\n    store.pipe(select(s => s.observers)).subscribe(s => this.state = s);\r\n    this.baseUrl = environment.apiUrl;\r\n  }\r\n\r\n\r\n  @Effect()\r\n  loadStats = this.actions\r\n    .pipe(ofType(ObserversActions.LOAD),\r\n      map(a => a as LoadObserversAction),\r\n      filter((a: LoadObserversAction) => shouldLoadPage(a.payload.page, a.payload.pageSize, this.state[a.payload.key].values.length)),\r\n      groupBy(a => a.payload.key),\r\n      mergeMap((obs) =>\r\n        obs.pipe(switchMap((a) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl,\r\n            `/api/v1/observer${observersConfig.find(value => value.key === a.payload.key).method}?Name=${a.payload.searchParamName}&Number=${a.payload.searchParamPhone}&Page=${a.payload.page}&PageSize=${a.payload.pageSize}`);\r\n\r\n          return this.http.get<{\r\n            data: Observer[],\r\n            totalPages: number,\r\n            totalItems: number\r\n          }>(url).pipe(map(res => {\r\n            return {\r\n              key: a.payload.key,\r\n              json: res\r\n            };\r\n          }));\r\n        }\r\n        ))\r\n      ),\r\n      map((value: any) => {\r\n        return new LoadObserversCompleteAction(value.key, value.json.data, value.json.totalPages, value.json.totalItems);\r\n      }\r\n      ),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), );\r\n\r\n\r\n  @Effect()\r\n  deleteObserver = this.actions\r\n    .pipe(ofType(ObserversActions.DELETE),\r\n      map(a => a as DeleteObserverAction),\r\n      groupBy(a => a.payload.key),\r\n      mergeMap((obs) =>\r\n        obs.pipe(switchMap((a) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer?id=${a.payload.id}`);\r\n\r\n          return this.http.get<{\r\n            data: Observer[],\r\n            totalPages: number,\r\n            totalItems: number\r\n          }>(url).pipe(map(res => {\r\n            return {\r\n              key: a.payload.key,\r\n              json: res\r\n            };\r\n          }));\r\n        }\r\n        ))\r\n      ),\r\n      mapTo(new LoadObserversAction('observers', 1, 1000)),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), );\r\n}\r\n\r\n@Injectable()\r\nexport class ObserversCountEffects {\r\n  state: ObserversCountState;\r\n  private baseUrl: string;\r\n\r\n  constructor(private http: ApiService, private actions: Actions, private store: Store<AppState>) {\r\n    store.pipe(select(s => s.observersCount)).subscribe(s => this.state = s);\r\n    this.baseUrl = environment.apiUrl;\r\n  }\r\n\r\n\r\n  @Effect()\r\n  loadStats = this.actions\r\n    .pipe(ofType(ObserversActions.LOADOBSERVERSTOTALCOUNT),\r\n      switchMap((obs) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer/count`);\r\n\r\n          return this.http.get<number>(url).pipe(map(res => res));\r\n        }\r\n      ),\r\n      map((value: any) => {\r\n        return new LoadObserversCountCompleteAction(value);\r\n      }\r\n      ),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ObserversEffects",
            "id": "injectable-ObserversEffects-4901a6a8cbb0d404a0533f14cf6f94dd",
            "file": "src/app/store/observers/observers.effects.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deleteObserver",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(ObserversActions.DELETE),\r\n      map(a => a as DeleteObserverAction),\r\n      groupBy(a => a.payload.key),\r\n      mergeMap((obs) =>\r\n        obs.pipe(switchMap((a) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer?id=${a.payload.id}`);\r\n\r\n          return this.http.get<{\r\n            data: Observer[],\r\n            totalPages: number,\r\n            totalItems: number\r\n          }>(url).pipe(map(res => {\r\n            return {\r\n              key: a.payload.key,\r\n              json: res\r\n            };\r\n          }));\r\n        }\r\n        ))\r\n      ),\r\n      mapTo(new LoadObserversAction('observers', 1, 1000)),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadStats",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(ObserversActions.LOAD),\r\n      map(a => a as LoadObserversAction),\r\n      filter((a: LoadObserversAction) => shouldLoadPage(a.payload.page, a.payload.pageSize, this.state[a.payload.key].values.length)),\r\n      groupBy(a => a.payload.key),\r\n      mergeMap((obs) =>\r\n        obs.pipe(switchMap((a) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl,\r\n            `/api/v1/observer${observersConfig.find(value => value.key === a.payload.key).method}?Name=${a.payload.searchParamName}&Number=${a.payload.searchParamPhone}&Page=${a.payload.page}&PageSize=${a.payload.pageSize}`);\r\n\r\n          return this.http.get<{\r\n            data: Observer[],\r\n            totalPages: number,\r\n            totalItems: number\r\n          }>(url).pipe(map(res => {\r\n            return {\r\n              key: a.payload.key,\r\n              json: res\r\n            };\r\n          }));\r\n        }\r\n        ))\r\n      ),\r\n      map((value: any) => {\r\n        return new LoadObserversCompleteAction(value.key, value.json.data, value.json.totalPages, value.json.totalItems);\r\n      }\r\n      ),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "state",
                    "type": "ObserversState",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {of as observableOf,  Observable } from 'rxjs';\r\n\r\nimport {mapTo, switchMap, catchError, mergeMap, groupBy, filter, map} from 'rxjs/operators';\r\nimport { ObserversState, ObserversCountState } from './observers.state';\r\nimport {select, Store} from '@ngrx/store';\r\nimport { AppState } from '../store.module';\r\nimport { shouldLoadPage } from '../../shared/pagination.service';\r\nimport { observersConfig } from './observers.config';\r\nimport {\r\n  DeleteObserverAction,\r\n  LoadObserversAction,\r\n  LoadObserversCompleteAction,\r\n  LoadObserversErrorAction,\r\n  ObserversActions,\r\n  LoadObserversCountAction,\r\n  LoadObserversCountCompleteAction\r\n} from './observers.actions';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observer } from '../../models/observer.model';\r\nimport { Location } from '@angular/common';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class ObserversEffects {\r\n  state: ObserversState;\r\n  private baseUrl: string;\r\n\r\n  constructor(private http: ApiService, private actions: Actions, private store: Store<AppState>) {\r\n    store.pipe(select(s => s.observers)).subscribe(s => this.state = s);\r\n    this.baseUrl = environment.apiUrl;\r\n  }\r\n\r\n\r\n  @Effect()\r\n  loadStats = this.actions\r\n    .pipe(ofType(ObserversActions.LOAD),\r\n      map(a => a as LoadObserversAction),\r\n      filter((a: LoadObserversAction) => shouldLoadPage(a.payload.page, a.payload.pageSize, this.state[a.payload.key].values.length)),\r\n      groupBy(a => a.payload.key),\r\n      mergeMap((obs) =>\r\n        obs.pipe(switchMap((a) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl,\r\n            `/api/v1/observer${observersConfig.find(value => value.key === a.payload.key).method}?Name=${a.payload.searchParamName}&Number=${a.payload.searchParamPhone}&Page=${a.payload.page}&PageSize=${a.payload.pageSize}`);\r\n\r\n          return this.http.get<{\r\n            data: Observer[],\r\n            totalPages: number,\r\n            totalItems: number\r\n          }>(url).pipe(map(res => {\r\n            return {\r\n              key: a.payload.key,\r\n              json: res\r\n            };\r\n          }));\r\n        }\r\n        ))\r\n      ),\r\n      map((value: any) => {\r\n        return new LoadObserversCompleteAction(value.key, value.json.data, value.json.totalPages, value.json.totalItems);\r\n      }\r\n      ),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), );\r\n\r\n\r\n  @Effect()\r\n  deleteObserver = this.actions\r\n    .pipe(ofType(ObserversActions.DELETE),\r\n      map(a => a as DeleteObserverAction),\r\n      groupBy(a => a.payload.key),\r\n      mergeMap((obs) =>\r\n        obs.pipe(switchMap((a) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer?id=${a.payload.id}`);\r\n\r\n          return this.http.get<{\r\n            data: Observer[],\r\n            totalPages: number,\r\n            totalItems: number\r\n          }>(url).pipe(map(res => {\r\n            return {\r\n              key: a.payload.key,\r\n              json: res\r\n            };\r\n          }));\r\n        }\r\n        ))\r\n      ),\r\n      mapTo(new LoadObserversAction('observers', 1, 1000)),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), );\r\n}\r\n\r\n@Injectable()\r\nexport class ObserversCountEffects {\r\n  state: ObserversCountState;\r\n  private baseUrl: string;\r\n\r\n  constructor(private http: ApiService, private actions: Actions, private store: Store<AppState>) {\r\n    store.pipe(select(s => s.observersCount)).subscribe(s => this.state = s);\r\n    this.baseUrl = environment.apiUrl;\r\n  }\r\n\r\n\r\n  @Effect()\r\n  loadStats = this.actions\r\n    .pipe(ofType(ObserversActions.LOADOBSERVERSTOTALCOUNT),\r\n      switchMap((obs) => {\r\n          const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer/count`);\r\n\r\n          return this.http.get<number>(url).pipe(map(res => res));\r\n        }\r\n      ),\r\n      map((value: any) => {\r\n        return new LoadObserversCountCompleteAction(value);\r\n      }\r\n      ),\r\n      catchError((err) => observableOf(new LoadObserversErrorAction(err))), );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ObserversService",
            "id": "injectable-ObserversService-c77965603d26fa30f74054507a11c05c",
            "file": "src/app/services/observers.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNewObserver",
                    "args": [
                        {
                            "name": "observer",
                            "type": "Observer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "observer",
                            "type": "Observer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteObserver",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObserver",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPasswordObserver",
                    "args": [
                        {
                            "name": "phone",
                            "type": "string"
                        },
                        {
                            "name": "pin",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "phone",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pin",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveChanges",
                    "args": [
                        {
                            "name": "observer",
                            "type": "Observer"
                        },
                        {
                            "name": "info",
                            "type": "Observer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "observer",
                            "type": "Observer",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "info",
                            "type": "Observer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadCsv",
                    "args": [
                        {
                            "name": "formData",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiService } from '../core/apiService/api.service';\r\nimport { Observer } from '../models/observer.model';\r\nimport { environment } from '../../environments/environment';\r\nimport { Location } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class ObserversService {\r\n  private baseUrl: string;\r\n\r\n  constructor(private http: ApiService) {\r\n    this.baseUrl = environment.apiUrl;\r\n  }\r\n\r\n  addNewObserver(observer: Observer) {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer?Phone=${observer.phone}&Pin=${observer.pin}&Name=${observer.name}&SendSMS=${observer.sendSMS}`);\r\n    return this.http.post(url, observer);\r\n  }\r\n\r\n  saveChanges(observer: Observer, info: Observer, ) {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/observer');\r\n    return this.http.put(url, { ...observer, idObserver: info.id });\r\n  }\r\n\r\n  deleteObserver(id: string) {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer?id=${id}`);\r\n    return this.http.delete(url);\r\n  }\r\n\r\n  resetPasswordObserver(phone: string, pin: string) {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, '/api/v1/observer/reset');\r\n    return this.http.post(url, { action: 'reset-password', phoneNumber: phone, pin });\r\n  }\r\n\r\n  getObserver(id: string) {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer?Number=${id}`);\r\n    return this.http.get(url);\r\n  }\r\n\r\n  uploadCsv(formData: any) {\r\n    const url: string = Location.joinWithSlash(this.baseUrl, `/api/v1/observer/import`);\r\n    return this.http.post<any>(url, formData);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatisticsEffects",
            "id": "injectable-StatisticsEffects-828eda6d431ca5847f24872a402dff7e",
            "file": "src/app/store/statistics/statistics.effects.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadStats",
                    "defaultValue": "this.actions\r\n        .pipe(ofType(StatisticsActions.LOAD),\r\n          map(a => a as LoadStatisticAction),\r\n          filter((a: LoadStatisticAction) => shouldLoadPage(a.payload.page, a.payload.pageSize, this.state[a.payload.key].values.length)),\r\n          groupBy(a => a.payload.key),\r\n          mergeMap((obs) =>\r\n              obs.pipe(switchMap((a) => {\r\n                  const statisticsUrl: string = Location.joinWithSlash(this.baseUrl,\r\n                    `/api/v1/statistics/${statisticsConfig.find(value => value.key === a.payload.key).method}`);\r\n\r\n                  return this.http.get<{\r\n                      data: LabelValueModel[],\r\n                      totalPages: number,\r\n                      totalItems: number\r\n                  }>(statisticsUrl, {\r\n                      body: {\r\n                          page: a.payload.page,\r\n                          pageSize: a.payload.pageSize\r\n                      }\r\n                  }).pipe(map(res => {\r\n                      return {\r\n                          key: a.payload.key,\r\n                          json: res\r\n                      };\r\n                  }));\r\n              }))\r\n          ),\r\n          map(value => new LoadStatisticsCompleteAction(value.key, value.json.data, value.json.totalPages, value.json.totalItems)), )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "state",
                    "type": "StatisticsState",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {switchMap, mergeMap, groupBy, filter, map} from 'rxjs/operators';\r\nimport { StatisticsState } from './statistics.state';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../store.module';\r\nimport { shouldLoadPage } from '../../shared/pagination.service';\r\nimport { statisticsConfig } from './statistics.config';\r\nimport { LoadStatisticAction, LoadStatisticsCompleteAction, StatisticsActions } from './statistics.actions';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport { LabelValueModel } from '../../models/labelValue.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Location } from '@angular/common';\r\n@Injectable()\r\nexport class StatisticsEffects {\r\n    private baseUrl: string;\r\n\r\n    state: StatisticsState;\r\n    constructor(private http: ApiService, private actions: Actions, private store: Store<AppState>) {\r\n        this.baseUrl = environment.apiUrl;\r\n\r\n        store.select(s => s.statistics).subscribe(s => this.state = s);\r\n    }\r\n\r\n\r\n    @Effect()\r\n    loadStats = this.actions\r\n        .pipe(ofType(StatisticsActions.LOAD),\r\n          map(a => a as LoadStatisticAction),\r\n          filter((a: LoadStatisticAction) => shouldLoadPage(a.payload.page, a.payload.pageSize, this.state[a.payload.key].values.length)),\r\n          groupBy(a => a.payload.key),\r\n          mergeMap((obs) =>\r\n              obs.pipe(switchMap((a) => {\r\n                  const statisticsUrl: string = Location.joinWithSlash(this.baseUrl,\r\n                    `/api/v1/statistics/${statisticsConfig.find(value => value.key === a.payload.key).method}`);\r\n\r\n                  return this.http.get<{\r\n                      data: LabelValueModel[],\r\n                      totalPages: number,\r\n                      totalItems: number\r\n                  }>(statisticsUrl, {\r\n                      body: {\r\n                          page: a.payload.page,\r\n                          pageSize: a.payload.pageSize\r\n                      }\r\n                  }).pipe(map(res => {\r\n                      return {\r\n                          key: a.payload.key,\r\n                          json: res\r\n                      };\r\n                  }));\r\n              }))\r\n          ),\r\n          map(value => new LoadStatisticsCompleteAction(value.key, value.json.data, value.json.totalPages, value.json.totalItems)), );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TokenService",
            "id": "injectable-TokenService-1ab2c6ea96ecdb6aeb463a985249b347",
            "file": "src/app/core/token/token.service.ts",
            "properties": [
                {
                    "name": "_isRefreshing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_token",
                    "defaultValue": "undefined",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "observers",
                    "defaultValue": "[]",
                    "type": "Observer<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "tokenKey",
                    "defaultValue": "'token-id'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tokenStream",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "setTokenStream",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "description": "",
            "sourceCode": "import {Observable, Observer} from 'rxjs';\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TokenService {\r\n  public tokenKey = 'token-id';\r\n  private _token: string = undefined;\r\n\r\n  private _isRefreshing: boolean;\r\n\r\n  tokenStream: Observable<string>;\r\n  observers: Observer<string>[] = [];\r\n\r\n\r\n  public get isRefreshing() {\r\n    return this._isRefreshing;\r\n  }\r\n\r\n  constructor() {\r\n    this._token = localStorage.getItem(this.tokenKey);\r\n    this.setTokenStream();\r\n  }\r\n\r\n  setTokenStream() {\r\n    this.tokenStream = Observable.create((obs: Observer<string>) => {\r\n      obs.next(this._token);\r\n      this.observers.push(obs);\r\n      return () => {\r\n        this.observers = this.observers.filter(stateObserver => stateObserver === obs);\r\n      };\r\n    });\r\n  }\r\n\r\n  public get token() {\r\n    return this._token;\r\n  }\r\n  public set token(value) {\r\n    this._token = value;\r\n    if (value !== undefined){\r\n      localStorage.setItem(this.tokenKey, value);\r\n    } else {\r\n      localStorage.removeItem(this.tokenKey);\r\n    }\r\n    this.observers.forEach(obs => obs.next(value));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "accessors": {
                "isRefreshing": {
                    "name": "isRefreshing",
                    "getSignature": {
                        "name": "isRefreshing",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                },
                "token": {
                    "name": "token",
                    "setSignature": {
                        "name": "token",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "token",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AnswerActionTypes",
            "id": "class-AnswerActionTypes-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "properties": [
                {
                    "name": "LOAD_DETAILS",
                    "defaultValue": "actionType('[Answer] Load details')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_DETAILS_DONE",
                    "defaultValue": "actionType('[Answer] Load details done')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_DETAILS_ERROR",
                    "defaultValue": "actionType('[Answer] Load details error')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_EXTRA",
                    "defaultValue": "actionType('answer/load extra')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_EXTRA_DONE",
                    "defaultValue": "actionType('answer/load extra done')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_EXTRA_ERROR",
                    "defaultValue": "actionType('answer/load extra error')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_PREVIEW",
                    "defaultValue": "actionType('[Answer] Load preview')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_PREVIEW_DONE",
                    "defaultValue": "actionType('[Answer] Load preview done')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_PREVIEW_ERROR",
                    "defaultValue": "actionType('[Answer] Load preview error')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AnswerExtra",
            "id": "class-AnswerExtra-4ba4e42846f42cb878cd4b79a0199919",
            "file": "src/app/models/answer.extra.model.ts",
            "type": "class",
            "sourceCode": "import {isString, isDate} from 'lodash';\r\n\r\nexport interface AnswerExtraConstructorData {\r\n    lastModified: string;\r\n    urbanArea: boolean;\r\n    observerArrivalTime: string;\r\n    observerLeaveTime: string;\r\n    isPollingStationPresidentFemale: boolean;\r\n}\r\nexport class AnswerExtra {\r\n    lastModified: Date;\r\n    urbanArea = false;\r\n    observerArrivalTime: Date;\r\n    observerLeaveTime: Date;\r\n    isPollingStationPresidentFemale = false;\r\n\r\n    constructor(formInfo?: AnswerExtraConstructorData) {\r\n        if (!formInfo) {\r\n            return;\r\n        }\r\n        checkForPropValue(formInfo.lastModified, val => this.lastModified = val);\r\n        checkForPropValue(formInfo.observerArrivalTime, val => this.observerArrivalTime = val);\r\n        checkForPropValue(formInfo.observerLeaveTime, val => this.observerLeaveTime = val);\r\n        this.urbanArea = formInfo.urbanArea;\r\n        this.isPollingStationPresidentFemale = formInfo.isPollingStationPresidentFemale;\r\n\r\n        function checkForPropValue(value, setPropertyFn: (val: Date) => void) {\r\n            if (!value) {\r\n                return;\r\n            }\r\n            if (isString(value)) {\r\n                value = new Date(value);\r\n            }\r\n\r\n            if (isDate(value)) {\r\n                setPropertyFn(value);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formInfo",
                        "type": "AnswerExtraConstructorData",
                        "optional": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "formInfo",
                        "type": "AnswerExtraConstructorData",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isPollingStationPresidentFemale",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "lastModified",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "observerArrivalTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "observerLeaveTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "urbanArea",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AnswerFilters",
            "id": "class-AnswerFilters-5b398e4322241b9a7cb15452b3b0d6d6",
            "file": "src/app/models/answer.filters.model.ts",
            "type": "class",
            "sourceCode": "export class AnswerFilters {\r\n    observerId: number = null;\r\n    pollingStationNumber: string = null;\r\n    county: string = null;\r\n}\r\n",
            "properties": [
                {
                    "name": "county",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "observerId",
                    "defaultValue": "null",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pollingStationNumber",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AnswerState",
            "id": "class-AnswerState-60d8aa489fc241fb10e6442cdde55552",
            "file": "src/app/store/answer/answer.reducer.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { Note } from '../../models/note.model';\r\nimport { shouldLoadPage } from '../../shared/pagination.service';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { AnswerActions, AnswerActionTypes } from './answer.actions';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nexport class AnswerState {\r\n    threads: AnswerThread[] = [];\r\n    urgent: boolean = undefined;\r\n    page = 1;\r\n    pageSize = 10;\r\n    totalItems: number = undefined;\r\n    totalPages: number = undefined;\r\n    threadsLoading = false;\r\n    threadsError = false;\r\n\r\n    selectedAnswer: CompletedQuestion[];\r\n    selectedLoading = false;\r\n    selectedError = false;\r\n    observerId: number;\r\n    sectionId: number;\r\n\r\n    notes: Note[];\r\n    notesLoading: boolean;\r\n    notesError: boolean;\r\n\r\n    answerExtra: AnswerExtra;\r\n    answerExtraLoading = false;\r\n    answerExtraError = false;\r\n\r\n    answerFilters: AnswerFilters = { observerId: null, pollingStationNumber: null, county: null };\r\n}\r\nexport let initialAnswerState: AnswerState = new AnswerState();\r\n\r\nexport function answerReducer(state = initialAnswerState, action: AnswerActions) {\r\n    switch (action.type) {\r\n        case AnswerActionTypes.LOAD_PREVIEW:\r\n            const newList = action.payload.refresh || (action.payload.urgent !== state.urgent),\r\n                shouldLoadList = shouldLoadPage(action.payload.page, action.payload.pageSize, state.threads.length);\r\n            const shouldUpdateFilters = Object.keys(action.payload.answerFilters).length > 0 ? true : false;\r\n\r\n            let newState = Object.assign({}, state, {\r\n                page: action.payload.page,\r\n                answerFilters: shouldUpdateFilters ? action.payload.answerFilters : state.answerFilters,\r\n                pageSize: action.payload.pageSize,\r\n                threads: newList ? [] : state.threads,\r\n                threadsLoading: shouldLoadList || newList,\r\n                threadsError: false,\r\n                urgent: action.payload.urgent\r\n            });\r\n            // if we're loading a new list, deselect any selected answer\r\n            if (newList) {\r\n                newState = Object.assign({}, newState, {\r\n                    selectedAnswer: undefined,\r\n                    selectedLoading: false,\r\n                    selectedError: false,\r\n                    observerId: undefined,\r\n                    sectionId: undefined,\r\n                    answerExtra: undefined,\r\n                    answerExtraLoading: false,\r\n                    answerExtraError: false\r\n                });\r\n            }\r\n            return newState;\r\n\r\n        case AnswerActionTypes.LOAD_PREVIEW_ERROR:\r\n            return Object.assign({}, state, {\r\n                threadsLoading: false,\r\n                threadsError: true,\r\n\r\n            });\r\n        case AnswerActionTypes.LOAD_PREVIEW_DONE:\r\n            return Object.assign({}, state, {\r\n                threads: state.threads.concat(action.payload.threads),\r\n                totalItems: action.payload.totalItems,\r\n                totalPages: action.payload.totalPages,\r\n                threadsLoading: false,\r\n                threadsError: false\r\n            });\r\n        case AnswerActionTypes.LOAD_DETAILS:\r\n            return Object.assign({}, state, action.payload, {\r\n                selectedLoading: true,\r\n                selectedError: false\r\n            });\r\n        case AnswerActionTypes.LOAD_DETAILS_ERROR:\r\n            return Object.assign({}, state, {\r\n                selectedLoading: false,\r\n                selectedError: true\r\n            });\r\n        case AnswerActionTypes.LOAD_DETAILS_DONE:\r\n            return Object.assign({}, state, {\r\n                selectedAnswer: action.payload,\r\n                selectedLoading: false,\r\n                selectedError: false\r\n            });\r\n        case AnswerActionTypes.LOAD_EXTRA:\r\n            return Object.assign({}, state, {\r\n                answerExtraLoading: false,\r\n                answerExtraError: false\r\n            });\r\n        case AnswerActionTypes.LOAD_EXTRA_DONE:\r\n            return Object.assign({}, state, {\r\n                answerExtra: action.payload,\r\n                answerExtraLoading: false,\r\n                selectedError: false\r\n            });\r\n        case AnswerActionTypes.LOAD_EXTRA_ERROR:\r\n            return Object.assign({}, state, {\r\n                answerExtraLoading: false,\r\n                selectedError: true\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "answerExtra",
                    "type": "AnswerExtra",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "answerExtraError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "answerExtraLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "answerFilters",
                    "defaultValue": "{ observerId: null, pollingStationNumber: null, county: null }",
                    "type": "AnswerFilters",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "notes",
                    "type": "Note[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "notesError",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "notesLoading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "observerId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "sectionId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedAnswer",
                    "type": "CompletedQuestion[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "threads",
                    "defaultValue": "[]",
                    "type": "AnswerThread[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "threadsError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "threadsLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "totalItems",
                    "defaultValue": "undefined",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalPages",
                    "defaultValue": "undefined",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "urgent",
                    "defaultValue": "undefined",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AnswerThread",
            "id": "class-AnswerThread-f1e180f7b0ca21399c55f9096eadd466",
            "file": "src/app/models/answer.thread.model.ts",
            "type": "class",
            "sourceCode": "export class AnswerThread {\r\n    public pollingStationName: String;\r\n    public observerName: String;\r\n    public idPollingStation: number;\r\n    public idObserver: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "idObserver",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "idPollingStation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "observerName",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollingStationName",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppState",
            "id": "class-AppState-9b99ef5960228c61e47da3b7cfae9c6f",
            "file": "src/app/store/store.module.ts",
            "type": "class",
            "sourceCode": "import {take} from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { TokenService } from '../core/token/token.service';\r\nimport { NoteEffects } from './note/note.effects';\r\nimport { noteReducer, NoteState } from './note/note.reducer';\r\nimport { StatisticsState } from './statistics/statistics.state';\r\nimport { StatisticsEffects } from './statistics/statistics.effects';\r\nimport { statisticsReducer } from './statistics/statistics.reducer';\r\nimport { AnswerEffects } from './answer/answer.effects';\r\nimport { answerReducer, AnswerState } from './answer/answer.reducer';\r\nimport { FormClearAll, FormLoadAction } from './form/form.actions';\r\nimport { FormEffects } from './form/form.effects';\r\nimport { formReducer, FormState } from './form/form.reducer';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport {select, Store, StoreModule} from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { ObserversState, ObserversCountState } from './observers/observers.state';\r\nimport {ObserversEffects, ObserversCountEffects} from './observers/observers.effects';\r\nimport {observersReducer, observersCountReducer} from './observers/observers.reducer';\r\n\r\nexport class AppState {\r\n    form: FormState;\r\n    answer: AnswerState;\r\n    statistics: StatisticsState;\r\n    observers: ObserversState;\r\n    observersCount: ObserversCountState;\r\n    note: NoteState;\r\n}\r\n\r\nconst moduleImports = [\r\n    StoreModule.forRoot({ form: formReducer, answer: answerReducer,\r\n                                  statistics: statisticsReducer, observers: observersReducer,\r\n                                  note: noteReducer , observersCount: observersCountReducer}),\r\n    EffectsModule.forRoot([\r\n      FormEffects,\r\n      AnswerEffects,\r\n      StatisticsEffects,\r\n      ObserversEffects,\r\n      ObserversCountEffects,\r\n      NoteEffects\r\n    ]),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25, // Retains last 25 states\r\n      logOnly: environment.production, // Restrict extension to log-only mode\r\n    }),\r\n];\r\nif (!environment.production) {\r\n    moduleImports.push(StoreDevtoolsModule.instrument({\r\n      maxAge: 50,\r\n      logOnly: false\r\n    }));\r\n}\r\n\r\n@NgModule({\r\n    imports: moduleImports\r\n})\r\nexport class AppStoreModule {\r\n    constructor(store: Store<AppState>, tokenService: TokenService) {\r\n        tokenService.tokenStream.subscribe((token) => {\r\n            const clearForms = !token;\r\n            store.pipe(select(s => s.form), take(1)).subscribe(s => {\r\n                if (clearForms || s.items.length > 0) {\r\n                    store.dispatch(new FormClearAll());\r\n                }\r\n                if (!clearForms) {\r\n                    store.dispatch(new FormLoadAction());\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "answer",
                    "type": "AnswerState",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "form",
                    "type": "FormState",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "note",
                    "type": "NoteState",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "observers",
                    "type": "ObserversState",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "observersCount",
                    "type": "ObserversCountState",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "statistics",
                    "type": "StatisticsState",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseAnswer",
            "id": "class-BaseAnswer-a9a322ea0b8b1189bfd96ce7138a2857",
            "file": "src/app/models/base.answer.model.ts",
            "type": "class",
            "sourceCode": "export class BaseAnswer {\r\n    idOption: number;\r\n    text: string;\r\n    isFreeText: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "idOption",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isFreeText",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseQuestion",
            "id": "class-BaseQuestion-b662056915cbd4c7709b83ea16380616",
            "file": "src/app/models/base.question.model.ts",
            "type": "class",
            "sourceCode": "export class BaseQuestion {\r\n    id: number;\r\n    formCode: string;\r\n    code: string;\r\n    text: string;\r\n    idQuestionType: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "formCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "idQuestionType",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CompletedAnswer",
            "id": "class-CompletedAnswer-05aff70ecb7f36b093b724058f0984d6",
            "file": "src/app/models/completed.answer.model.ts",
            "type": "class",
            "sourceCode": "import { BaseAnswer } from './base.answer.model';\r\nexport class CompletedAnswer extends BaseAnswer {\r\n    value: string = undefined;\r\n    flagged = false;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "flagged",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "defaultValue": "undefined",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "idOption",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAnswer"
                    }
                },
                {
                    "name": "isFreeText",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAnswer"
                    }
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAnswer"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseAnswer",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CompletedQuestion",
            "id": "class-CompletedQuestion-17e7e73477f4e14573308b41b2c9b771",
            "file": "src/app/models/completed.question.model.ts",
            "type": "class",
            "sourceCode": "import { CompletedAnswer } from './completed.answer.model';\r\nimport { BaseQuestion } from './base.question.model';\r\nexport class CompletedQuestion extends BaseQuestion {\r\n    answers: CompletedAnswer[];\r\n}\r\n",
            "properties": [
                {
                    "name": "answers",
                    "type": "CompletedAnswer[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "formCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "idQuestionType",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseQuestion",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteObserverAction",
            "id": "class-DeleteObserverAction-07781fb4bd4facebc70bff9b13e3662f",
            "file": "src/app/store/observers/observers.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nimport { Observer } from '../../models/observer.model';\r\n\r\nexport class ObserversActions {\r\n  static LOAD = actionType('[Observers] Load');\r\n  static LOADOBSERVERSTOTALCOUNT = actionType('[Observers] Load Total Count');\r\n  static LOADEDOBSERVERSTOTALCOUNT = actionType('[Observers] Loaded Total Count');\r\n  static LOADED = actionType('[Observers] Loaded');\r\n  static ERROR = actionType('[Observers] Load Error');\r\n  static DELETE = actionType('[Observers] Delete observer');\r\n}\r\n\r\nexport class LoadObserversCountAction implements Action {\r\n  readonly type = ObserversActions.LOADOBSERVERSTOTALCOUNT;\r\n}\r\n\r\nexport class LoadObserversAction implements Action {\r\n  readonly type = ObserversActions.LOAD;\r\n\r\n  payload: {\r\n    key: string,\r\n    page: number,\r\n    pageSize: number,\r\n    refresh: boolean,\r\n    searchParamName?: string\r\n    searchParamPhone?: string\r\n  };\r\n\r\n  constructor(key: string, page: number, pageSize: number, refresh = false, searchParamName: string = '', searchParamPhone: string = '') {\r\n    this.payload = {\r\n      key,\r\n      page,\r\n      pageSize,\r\n      refresh,\r\n      searchParamName,\r\n      searchParamPhone\r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport class LoadObserversErrorAction implements Action {\r\n  readonly type = ObserversActions.ERROR;\r\n  payload: {\r\n    key: string\r\n  };\r\n\r\n  constructor(key: string) {\r\n    this.payload = {\r\n      key\r\n    };\r\n  }\r\n}\r\n\r\nexport class DeleteObserverAction implements Action {\r\n  readonly type = ObserversActions.DELETE;\r\n  payload: {\r\n    key: string,\r\n    id: string\r\n  };\r\n\r\n  constructor(key: string, id: string) {\r\n    this.payload = {\r\n      key,\r\n      id\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADED;\r\n  payload: {\r\n    key: string\r\n    totalItems: number\r\n    totalPages: number\r\n\r\n    items: Observer[]\r\n  };\r\n\r\n  constructor(key: string, items: Observer[], totalPages: number, totalItems: number) {\r\n    this.payload = {\r\n      key,\r\n      items,\r\n      totalPages,\r\n      totalItems\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCountCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADEDOBSERVERSTOTALCOUNT;\r\n  payload: {\r\n    count: number;\r\n  };\r\n\r\n  constructor(count: number) {\r\n    this.payload = { count };\r\n  }\r\n\r\n}\r\n\r\nexport type ObserversActionTypes = LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "type",
                    "defaultValue": "ObserversActions.DELETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Form",
            "id": "class-Form-152fff50d495be71bd0db98b7fd93726",
            "file": "src/app/models/form.model.ts",
            "type": "class",
            "sourceCode": "import { FormSection } from './form.section.model';\r\nimport {FormDetails} from './form.info.model';\r\n\r\nexport class Form implements FormDetails {\r\n    id: number;\r\n    formSections: FormSection[];\r\n    description: string;\r\n    code: string;\r\n    diaspora: boolean;\r\n    draft: boolean;\r\n    currentVersion: number;\r\n\r\n    public static fromMetaData(formDetails: FormDetails) {\r\n      const result = new Form();\r\n      result.inheritMetaData(formDetails);\r\n      return result;\r\n    }\r\n\r\n    public inheritMetaData(formDetails: FormDetails) {\r\n      this.id = formDetails.id;\r\n      this.description = formDetails.description;\r\n      this.code = formDetails.code;\r\n      this.diaspora = formDetails.diaspora;\r\n      this.currentVersion = formDetails.currentVersion;\r\n      this.draft = formDetails.draft;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "currentVersion",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "diaspora",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "draft",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "formSections",
                    "type": "FormSection[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "fromMetaData",
                    "args": [
                        {
                            "name": "formDetails",
                            "type": "FormDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "Form",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "formDetails",
                            "type": "FormDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "inheritMetaData",
                    "args": [
                        {
                            "name": "formDetails",
                            "type": "FormDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "formDetails",
                            "type": "FormDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "FormDetails"
            ]
        },
        {
            "name": "FormActionTypes",
            "id": "class-FormActionTypes-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "properties": [
                {
                    "name": "CLEAR",
                    "defaultValue": "actionType('form/clear all')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "DELETE",
                    "defaultValue": "actionType('[Form] DELETE')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "ERROR",
                    "defaultValue": "actionType('form/error')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_ALL_FORMS_META",
                    "defaultValue": "actionType('[Form] LOAD_ALL_FORMS_META')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_ALL_FORMS_META_COMPLETE",
                    "defaultValue": "actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_ONE_FORM_FULLY",
                    "defaultValue": "actionType('[Form] LOAD_ONE_FORM_FULLY')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_ONE_FORM_FULLY_COMPLETE",
                    "defaultValue": "actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "UPLOAD",
                    "defaultValue": "actionType('[Form] UPLOAD')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "UPLOAD_COMPLETE",
                    "defaultValue": "actionType('[Form] UPLOAD_COMPLETE')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "UPLOAD_PUBLISH",
                    "defaultValue": "actionType('[Form] UPLOAD PUBLISH')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormClearAll",
            "id": "class-FormClearAll-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.CLEAR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FormDeleteAction",
            "id": "class-FormDeleteAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formId",
                        "type": "number"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "formId",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.DELETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FormErrorAction",
            "id": "class-FormErrorAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FormLoadAction",
            "id": "class-FormLoadAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.LOAD_ALL_FORMS_META",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FormLoadCompletedAction",
            "id": "class-FormLoadCompletedAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "forms",
                        "type": "FormDetails[]"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "forms",
                        "type": "FormDetails[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "FormDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FormQuestion",
            "id": "class-FormQuestion-abe020ef1f888fb3a22ded6d7198d268",
            "file": "src/app/models/form.question.model.ts",
            "type": "class",
            "sourceCode": "import { BaseAnswer } from './base.answer.model';\r\nimport {BaseQuestion} from './base.question.model';\r\n\r\nexport class FormQuestion extends BaseQuestion {\r\n    id: number;\r\n    formCode: string;\r\n    code: string;\r\n    idSection: number;\r\n    questionType: number;\r\n    text: string;\r\n    hint: string;\r\n    optionsToQuestions: BaseAnswer[];\r\n}\r\n\r\nexport const QUESTION_TYPES = [\r\n  {\r\n    id: 0,\r\n    name: 'MULTIPLE_CHOICE'\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'SINGLE_CHOICE'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'SINGLE_CHOICE_TEXT'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'MULTIPLE_CHOICE_TEXT'\r\n  }\r\n];\r\n\r\nexport interface QuestionType {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "formCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hint",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "idSection",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "optionsToQuestions",
                    "type": "BaseAnswer[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "questionType",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "formCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "idQuestionType",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "inheritance": {
                        "file": "BaseQuestion"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseQuestion",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormSection",
            "id": "class-FormSection-5258c9fdbbd17249b4d76bfc01daa1d1",
            "file": "src/app/models/form.section.model.ts",
            "type": "class",
            "sourceCode": "import { FormQuestion } from './form.question.model';\r\n\r\nexport class FormSection {\r\n    uniqueId: string;\r\n    id: number;\r\n    code: string;\r\n    description: string;\r\n    questions: FormQuestion[];\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "questions",
                    "type": "FormQuestion[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "uniqueId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormState",
            "id": "class-FormState-1b1041834d79b468a93442637a6b66d0",
            "file": "src/app/store/form/form.reducer.ts",
            "type": "class",
            "sourceCode": "import {FormActions, FormActionTypes} from './form.actions';\r\nimport {Form} from '../../models/form.model';\r\nimport {FormDetails} from '../../models/form.info.model';\r\nimport {cloneDeep} from 'lodash';\r\n\r\nexport class FormState {\r\n    items: FormDetails[];\r\n    fullyLoaded: {\r\n      [key: number]: Form;\r\n    };\r\n}\r\nconst formsInitialState: FormState = {\r\n    items: [],\r\n    fullyLoaded: {}\r\n};\r\nexport function formReducer(state = formsInitialState, $action: FormActions) {\r\n    switch ($action.type) {\r\n        case FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE:\r\n            return {\r\n                ...state,\r\n                items: $action.payload\r\n            };\r\n        case FormActionTypes.CLEAR:\r\n            return {\r\n                fullyLoaded: [],\r\n                items: []\r\n            };\r\n      case FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE:\r\n            const fullyLoaded = state.fullyLoaded;\r\n            const loadedForm = $action.payload;\r\n            const formDetails = state.items.find(f => f.id === loadedForm.id);\r\n\r\n            const mutableLoadedForm: Form = cloneDeep(loadedForm);\r\n            mutableLoadedForm.inheritMetaData(formDetails);\r\n\r\n            const allFullyLoadedForms = {...fullyLoaded};\r\n            allFullyLoadedForms[mutableLoadedForm.id] = mutableLoadedForm;\r\n            return {\r\n              ...state,\r\n              fullyLoaded: allFullyLoadedForms\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "fullyLoaded",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "items",
                    "type": "FormDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormUploadAction",
            "id": "class-FormUploadAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "form",
                        "type": "Form"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "form",
                        "type": "Form",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "form",
                    "type": "Form",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.UPLOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FormUploadCompleteAction",
            "id": "class-FormUploadCompleteAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.UPLOAD_COMPLETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FormUploadPublishAction",
            "id": "class-FormUploadPublishAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "form",
                        "type": "Form"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "form",
                        "type": "Form",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "form",
                    "type": "Form",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.UPLOAD_PUBLISH",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FullyLoadFormAction",
            "id": "class-FullyLoadFormAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formId",
                        "type": "number"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "formId",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.LOAD_ONE_FORM_FULLY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FullyLoadFormCompleteAction",
            "id": "class-FullyLoadFormCompleteAction-40d1190f05172a30fc843e3a59199a4e",
            "file": "src/app/store/form/form.actions.ts",
            "type": "class",
            "sourceCode": "import {actionType} from '../util';\r\nimport {Form} from '../../models/form.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormDetails} from '../../models/form.info.model';\r\n\r\nexport class FormActionTypes {\r\n    static readonly LOAD_ALL_FORMS_META = actionType('[Form] LOAD_ALL_FORMS_META');\r\n    static readonly LOAD_ONE_FORM_FULLY = actionType('[Form] LOAD_ONE_FORM_FULLY');\r\n    static readonly LOAD_ONE_FORM_FULLY_COMPLETE = actionType('[Form] LOAD_ONE_FORM_FULLY_COMPLETE');\r\n    static readonly LOAD_ALL_FORMS_META_COMPLETE = actionType('[Form] LOAD_ALL_FORMS_META_COMPLETE');\r\n    static readonly ERROR = actionType('form/error');\r\n    static readonly CLEAR = actionType('form/clear all');\r\n    static readonly UPLOAD = actionType('[Form] UPLOAD');\r\n    static readonly UPLOAD_PUBLISH = actionType('[Form] UPLOAD PUBLISH');\r\n    static readonly UPLOAD_COMPLETE = actionType('[Form] UPLOAD_COMPLETE');\r\n    static readonly DELETE = actionType('[Form] DELETE');\r\n}\r\nexport class FormLoadAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META;\r\n\r\n    constructor() {\r\n    }\r\n}\r\nexport class FormErrorAction implements Action {\r\n    readonly type = FormActionTypes.ERROR;\r\n}\r\nexport class FormLoadCompletedAction implements Action {\r\n    readonly type = FormActionTypes.LOAD_ALL_FORMS_META_COMPLETE;\r\n    payload: FormDetails[];\r\n\r\n    constructor(forms: FormDetails[]) {\r\n        this.payload = forms;\r\n    }\r\n}\r\nexport class FormClearAll implements Action {\r\n    readonly type = FormActionTypes.CLEAR;\r\n}\r\n\r\nexport class FormUploadAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadPublishAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_PUBLISH;\r\n\r\n  constructor(public form: Form) {}\r\n}\r\n\r\nexport class FormUploadCompleteAction implements Action {\r\n  readonly type = FormActionTypes.UPLOAD_COMPLETE;\r\n}\r\n\r\nexport class FormDeleteAction implements Action {\r\n  readonly type = FormActionTypes.DELETE;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY;\r\n\r\n  constructor(public formId: number) {}\r\n}\r\n\r\nexport class FullyLoadFormCompleteAction implements Action {\r\n  readonly type = FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE;\r\n\r\n  constructor(public payload: Form) {}\r\n}\r\n\r\nexport type FormActions =\r\n  FormLoadAction |\r\n  FormLoadCompletedAction |\r\n  FormClearAll |\r\n  FullyLoadFormAction |\r\n  FullyLoadFormCompleteAction |\r\n  FormUploadAction ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Form"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Form",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Form",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "FormActionTypes.LOAD_ONE_FORM_FULLY_COMPLETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LabelValueModel",
            "id": "class-LabelValueModel-210c811677023db42d68c4e939e9456f",
            "file": "src/app/models/labelValue.model.ts",
            "type": "class",
            "sourceCode": "export class LabelValueModel {\r\n    label: string;\r\n    value: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadAnswerDetailsAction",
            "id": "class-LoadAnswerDetailsAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "observerId",
                        "type": "number"
                    },
                    {
                        "name": "sectionId",
                        "type": "number"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "observerId",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sectionId",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_DETAILS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerDetailsDoneAction",
            "id": "class-LoadAnswerDetailsDoneAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "CompletedQuestion[]"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "CompletedQuestion[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "CompletedQuestion[]",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_DETAILS_DONE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerDetailsErrorAction",
            "id": "class-LoadAnswerDetailsErrorAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_DETAILS_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerExtraAction",
            "id": "class-LoadAnswerExtraAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "observerId",
                        "type": "number"
                    },
                    {
                        "name": "sectionId",
                        "type": "number"
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "observerId",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sectionId",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_EXTRA",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerExtraDoneAction",
            "id": "class-LoadAnswerExtraDoneAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "AnswerExtra"
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "AnswerExtra",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "AnswerExtra",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_EXTRA_DONE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerExtraErrorAction",
            "id": "class-LoadAnswerExtraErrorAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_EXTRA_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerPreviewAction",
            "id": "class-LoadAnswerPreviewAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "urgent",
                        "type": "boolean"
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "defaultValue": "1"
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "defaultValue": "10"
                    },
                    {
                        "name": "refresh",
                        "type": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "answerFilters",
                        "type": "",
                        "defaultValue": "{} as AnswerFilters"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "urgent",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "defaultValue": "1",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "defaultValue": "10",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "refresh",
                        "type": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "answerFilters",
                        "type": "",
                        "defaultValue": "{} as AnswerFilters",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_PREVIEW",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerPreviewDoneAction",
            "id": "class-LoadAnswerPreviewDoneAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "threads",
                        "type": "AnswerThread[]"
                    },
                    {
                        "name": "totalItems",
                        "type": "number"
                    },
                    {
                        "name": "totalPages",
                        "type": "number"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "threads",
                        "type": "AnswerThread[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalItems",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalPages",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_PREVIEW_DONE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAnswerPreviewErorrAction",
            "id": "class-LoadAnswerPreviewErorrAction-44feb68d9daa2277a3497d4c48490c18",
            "file": "src/app/store/answer/answer.actions.ts",
            "type": "class",
            "sourceCode": "import { AnswerExtra } from '../../models/answer.extra.model';\r\nimport { AnswerThread } from '../../models/answer.thread.model';\r\nimport { AnswerFilters } from '../../models/answer.filters.model';\r\nimport { CompletedQuestion } from '../../models/completed.question.model';\r\nimport { actionType } from '../util';\r\nimport { Action } from '@ngrx/store';\r\n\r\n\r\nexport class AnswerActionTypes {\r\n    static readonly LOAD_PREVIEW = actionType('[Answer] Load preview');\r\n    static readonly LOAD_PREVIEW_ERROR = actionType('[Answer] Load preview error');\r\n    static readonly LOAD_PREVIEW_DONE = actionType('[Answer] Load preview done');\r\n    static readonly LOAD_DETAILS = actionType('[Answer] Load details');\r\n    static readonly LOAD_DETAILS_DONE = actionType('[Answer] Load details done');\r\n    static readonly LOAD_DETAILS_ERROR = actionType('[Answer] Load details error');\r\n    static readonly LOAD_EXTRA = actionType('answer/load extra');\r\n    static readonly LOAD_EXTRA_DONE = actionType('answer/load extra done');\r\n    static readonly LOAD_EXTRA_ERROR = actionType('answer/load extra error');\r\n}\r\nexport class LoadAnswerPreviewAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW;\r\n\r\n    payload: {\r\n        page: number,\r\n        pageSize: number,\r\n        urgent: boolean,\r\n        refresh: boolean,\r\n        answerFilters?: AnswerFilters\r\n    };\r\n    constructor(urgent: boolean, page = 1, pageSize = 10, refresh = false, answerFilters = {} as AnswerFilters) {\r\n        this.payload = {\r\n            urgent,\r\n            page,\r\n            pageSize,\r\n            refresh,\r\n            answerFilters,\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerPreviewErorrAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_ERROR;\r\n}\r\nexport class LoadAnswerPreviewDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_PREVIEW_DONE;\r\n    payload: {\r\n        threads: AnswerThread[]\r\n        totalItems: number\r\n        totalPages: number\r\n    };\r\n\r\n    constructor(threads: AnswerThread[], totalItems: number, totalPages: number) {\r\n        this.payload = {\r\n            threads,\r\n            totalItems,\r\n            totalPages\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerDetailsErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_ERROR;\r\n}\r\nexport class LoadAnswerDetailsDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_DETAILS_DONE;\r\n\r\n    payload: CompletedQuestion[];\r\n\r\n    constructor(payload: CompletedQuestion[]) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nexport class LoadAnswerExtraAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA;\r\n\r\n    payload: {\r\n        observerId: number\r\n        sectionId: number\r\n    };\r\n    constructor(observerId: number, sectionId: number) {\r\n        this.payload = {\r\n            observerId,\r\n            sectionId\r\n        };\r\n    }\r\n}\r\nexport class LoadAnswerExtraDoneAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_DONE;\r\n    constructor(public payload: AnswerExtra) { }\r\n}\r\nexport class LoadAnswerExtraErrorAction implements Action {\r\n    readonly type = AnswerActionTypes.LOAD_EXTRA_ERROR;\r\n}\r\nexport type AnswerActions =\r\n    LoadAnswerPreviewAction |\r\n    LoadAnswerPreviewErorrAction |\r\n    LoadAnswerPreviewDoneAction |\r\n    LoadAnswerDetailsAction |\r\n    LoadAnswerDetailsErrorAction |\r\n    LoadAnswerDetailsDoneAction |\r\n    LoadAnswerExtraAction |\r\n    LoadAnswerExtraDoneAction |\r\n    LoadAnswerExtraErrorAction;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AnswerActionTypes.LOAD_PREVIEW_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadNotesAction",
            "id": "class-LoadNotesAction-cac94d8dc8653ad5c4b2791c6f5fc6bc",
            "file": "src/app/store/note/note.actions.ts",
            "type": "class",
            "sourceCode": "import { Note } from '../../models/note.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nexport class NoteActionTypes {\r\n    static readonly LOAD = actionType('[Note] Load');\r\n    static readonly LOAD_DONE = actionType('[Note] Load done');\r\n}\r\nexport class LoadNotesAction implements Action {\r\n    readonly type = NoteActionTypes.LOAD;\r\n\r\n    payload: {\r\n        idPollingStation: number\r\n        idObserver: number\r\n    };\r\n    constructor(idPollingStation: number, idObserver: number) {\r\n        this.payload = {\r\n            idPollingStation,\r\n            idObserver\r\n        };\r\n    }\r\n}\r\nexport class LoadNotesDoneAction implements Action {\r\n    readonly type = NoteActionTypes.LOAD_DONE;\r\n    payload: Note[];\r\n    constructor(note: Note[]) {\r\n        this.payload = note;\r\n    }\r\n}\r\nexport type NoteActions = LoadNotesAction | LoadNotesDoneAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "idPollingStation",
                        "type": "number"
                    },
                    {
                        "name": "idObserver",
                        "type": "number"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "idPollingStation",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idObserver",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "defaultValue": "NoteActionTypes.LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadNotesDoneAction",
            "id": "class-LoadNotesDoneAction-cac94d8dc8653ad5c4b2791c6f5fc6bc",
            "file": "src/app/store/note/note.actions.ts",
            "type": "class",
            "sourceCode": "import { Note } from '../../models/note.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nexport class NoteActionTypes {\r\n    static readonly LOAD = actionType('[Note] Load');\r\n    static readonly LOAD_DONE = actionType('[Note] Load done');\r\n}\r\nexport class LoadNotesAction implements Action {\r\n    readonly type = NoteActionTypes.LOAD;\r\n\r\n    payload: {\r\n        idPollingStation: number\r\n        idObserver: number\r\n    };\r\n    constructor(idPollingStation: number, idObserver: number) {\r\n        this.payload = {\r\n            idPollingStation,\r\n            idObserver\r\n        };\r\n    }\r\n}\r\nexport class LoadNotesDoneAction implements Action {\r\n    readonly type = NoteActionTypes.LOAD_DONE;\r\n    payload: Note[];\r\n    constructor(note: Note[]) {\r\n        this.payload = note;\r\n    }\r\n}\r\nexport type NoteActions = LoadNotesAction | LoadNotesDoneAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "note",
                        "type": "Note[]"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "note",
                        "type": "Note[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Note[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "type",
                    "defaultValue": "NoteActionTypes.LOAD_DONE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadObserversAction",
            "id": "class-LoadObserversAction-07781fb4bd4facebc70bff9b13e3662f",
            "file": "src/app/store/observers/observers.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nimport { Observer } from '../../models/observer.model';\r\n\r\nexport class ObserversActions {\r\n  static LOAD = actionType('[Observers] Load');\r\n  static LOADOBSERVERSTOTALCOUNT = actionType('[Observers] Load Total Count');\r\n  static LOADEDOBSERVERSTOTALCOUNT = actionType('[Observers] Loaded Total Count');\r\n  static LOADED = actionType('[Observers] Loaded');\r\n  static ERROR = actionType('[Observers] Load Error');\r\n  static DELETE = actionType('[Observers] Delete observer');\r\n}\r\n\r\nexport class LoadObserversCountAction implements Action {\r\n  readonly type = ObserversActions.LOADOBSERVERSTOTALCOUNT;\r\n}\r\n\r\nexport class LoadObserversAction implements Action {\r\n  readonly type = ObserversActions.LOAD;\r\n\r\n  payload: {\r\n    key: string,\r\n    page: number,\r\n    pageSize: number,\r\n    refresh: boolean,\r\n    searchParamName?: string\r\n    searchParamPhone?: string\r\n  };\r\n\r\n  constructor(key: string, page: number, pageSize: number, refresh = false, searchParamName: string = '', searchParamPhone: string = '') {\r\n    this.payload = {\r\n      key,\r\n      page,\r\n      pageSize,\r\n      refresh,\r\n      searchParamName,\r\n      searchParamPhone\r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport class LoadObserversErrorAction implements Action {\r\n  readonly type = ObserversActions.ERROR;\r\n  payload: {\r\n    key: string\r\n  };\r\n\r\n  constructor(key: string) {\r\n    this.payload = {\r\n      key\r\n    };\r\n  }\r\n}\r\n\r\nexport class DeleteObserverAction implements Action {\r\n  readonly type = ObserversActions.DELETE;\r\n  payload: {\r\n    key: string,\r\n    id: string\r\n  };\r\n\r\n  constructor(key: string, id: string) {\r\n    this.payload = {\r\n      key,\r\n      id\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADED;\r\n  payload: {\r\n    key: string\r\n    totalItems: number\r\n    totalPages: number\r\n\r\n    items: Observer[]\r\n  };\r\n\r\n  constructor(key: string, items: Observer[], totalPages: number, totalItems: number) {\r\n    this.payload = {\r\n      key,\r\n      items,\r\n      totalPages,\r\n      totalItems\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCountCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADEDOBSERVERSTOTALCOUNT;\r\n  payload: {\r\n    count: number;\r\n  };\r\n\r\n  constructor(count: number) {\r\n    this.payload = { count };\r\n  }\r\n\r\n}\r\n\r\nexport type ObserversActionTypes = LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "type": "number"
                    },
                    {
                        "name": "pageSize",
                        "type": "number"
                    },
                    {
                        "name": "refresh",
                        "type": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "searchParamName",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "searchParamPhone",
                        "type": "string",
                        "defaultValue": "''"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "refresh",
                        "type": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchParamName",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchParamPhone",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "defaultValue": "ObserversActions.LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadObserversCompleteAction",
            "id": "class-LoadObserversCompleteAction-07781fb4bd4facebc70bff9b13e3662f",
            "file": "src/app/store/observers/observers.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nimport { Observer } from '../../models/observer.model';\r\n\r\nexport class ObserversActions {\r\n  static LOAD = actionType('[Observers] Load');\r\n  static LOADOBSERVERSTOTALCOUNT = actionType('[Observers] Load Total Count');\r\n  static LOADEDOBSERVERSTOTALCOUNT = actionType('[Observers] Loaded Total Count');\r\n  static LOADED = actionType('[Observers] Loaded');\r\n  static ERROR = actionType('[Observers] Load Error');\r\n  static DELETE = actionType('[Observers] Delete observer');\r\n}\r\n\r\nexport class LoadObserversCountAction implements Action {\r\n  readonly type = ObserversActions.LOADOBSERVERSTOTALCOUNT;\r\n}\r\n\r\nexport class LoadObserversAction implements Action {\r\n  readonly type = ObserversActions.LOAD;\r\n\r\n  payload: {\r\n    key: string,\r\n    page: number,\r\n    pageSize: number,\r\n    refresh: boolean,\r\n    searchParamName?: string\r\n    searchParamPhone?: string\r\n  };\r\n\r\n  constructor(key: string, page: number, pageSize: number, refresh = false, searchParamName: string = '', searchParamPhone: string = '') {\r\n    this.payload = {\r\n      key,\r\n      page,\r\n      pageSize,\r\n      refresh,\r\n      searchParamName,\r\n      searchParamPhone\r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport class LoadObserversErrorAction implements Action {\r\n  readonly type = ObserversActions.ERROR;\r\n  payload: {\r\n    key: string\r\n  };\r\n\r\n  constructor(key: string) {\r\n    this.payload = {\r\n      key\r\n    };\r\n  }\r\n}\r\n\r\nexport class DeleteObserverAction implements Action {\r\n  readonly type = ObserversActions.DELETE;\r\n  payload: {\r\n    key: string,\r\n    id: string\r\n  };\r\n\r\n  constructor(key: string, id: string) {\r\n    this.payload = {\r\n      key,\r\n      id\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADED;\r\n  payload: {\r\n    key: string\r\n    totalItems: number\r\n    totalPages: number\r\n\r\n    items: Observer[]\r\n  };\r\n\r\n  constructor(key: string, items: Observer[], totalPages: number, totalItems: number) {\r\n    this.payload = {\r\n      key,\r\n      items,\r\n      totalPages,\r\n      totalItems\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCountCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADEDOBSERVERSTOTALCOUNT;\r\n  payload: {\r\n    count: number;\r\n  };\r\n\r\n  constructor(count: number) {\r\n    this.payload = { count };\r\n  }\r\n\r\n}\r\n\r\nexport type ObserversActionTypes = LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "items",
                        "type": "Observer[]"
                    },
                    {
                        "name": "totalPages",
                        "type": "number"
                    },
                    {
                        "name": "totalItems",
                        "type": "number"
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "items",
                        "type": "Observer[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalPages",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalItems",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "type",
                    "defaultValue": "ObserversActions.LOADED",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadObserversCountAction",
            "id": "class-LoadObserversCountAction-07781fb4bd4facebc70bff9b13e3662f",
            "file": "src/app/store/observers/observers.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nimport { Observer } from '../../models/observer.model';\r\n\r\nexport class ObserversActions {\r\n  static LOAD = actionType('[Observers] Load');\r\n  static LOADOBSERVERSTOTALCOUNT = actionType('[Observers] Load Total Count');\r\n  static LOADEDOBSERVERSTOTALCOUNT = actionType('[Observers] Loaded Total Count');\r\n  static LOADED = actionType('[Observers] Loaded');\r\n  static ERROR = actionType('[Observers] Load Error');\r\n  static DELETE = actionType('[Observers] Delete observer');\r\n}\r\n\r\nexport class LoadObserversCountAction implements Action {\r\n  readonly type = ObserversActions.LOADOBSERVERSTOTALCOUNT;\r\n}\r\n\r\nexport class LoadObserversAction implements Action {\r\n  readonly type = ObserversActions.LOAD;\r\n\r\n  payload: {\r\n    key: string,\r\n    page: number,\r\n    pageSize: number,\r\n    refresh: boolean,\r\n    searchParamName?: string\r\n    searchParamPhone?: string\r\n  };\r\n\r\n  constructor(key: string, page: number, pageSize: number, refresh = false, searchParamName: string = '', searchParamPhone: string = '') {\r\n    this.payload = {\r\n      key,\r\n      page,\r\n      pageSize,\r\n      refresh,\r\n      searchParamName,\r\n      searchParamPhone\r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport class LoadObserversErrorAction implements Action {\r\n  readonly type = ObserversActions.ERROR;\r\n  payload: {\r\n    key: string\r\n  };\r\n\r\n  constructor(key: string) {\r\n    this.payload = {\r\n      key\r\n    };\r\n  }\r\n}\r\n\r\nexport class DeleteObserverAction implements Action {\r\n  readonly type = ObserversActions.DELETE;\r\n  payload: {\r\n    key: string,\r\n    id: string\r\n  };\r\n\r\n  constructor(key: string, id: string) {\r\n    this.payload = {\r\n      key,\r\n      id\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADED;\r\n  payload: {\r\n    key: string\r\n    totalItems: number\r\n    totalPages: number\r\n\r\n    items: Observer[]\r\n  };\r\n\r\n  constructor(key: string, items: Observer[], totalPages: number, totalItems: number) {\r\n    this.payload = {\r\n      key,\r\n      items,\r\n      totalPages,\r\n      totalItems\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCountCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADEDOBSERVERSTOTALCOUNT;\r\n  payload: {\r\n    count: number;\r\n  };\r\n\r\n  constructor(count: number) {\r\n    this.payload = { count };\r\n  }\r\n\r\n}\r\n\r\nexport type ObserversActionTypes = LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ObserversActions.LOADOBSERVERSTOTALCOUNT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadObserversCountCompleteAction",
            "id": "class-LoadObserversCountCompleteAction-07781fb4bd4facebc70bff9b13e3662f",
            "file": "src/app/store/observers/observers.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nimport { Observer } from '../../models/observer.model';\r\n\r\nexport class ObserversActions {\r\n  static LOAD = actionType('[Observers] Load');\r\n  static LOADOBSERVERSTOTALCOUNT = actionType('[Observers] Load Total Count');\r\n  static LOADEDOBSERVERSTOTALCOUNT = actionType('[Observers] Loaded Total Count');\r\n  static LOADED = actionType('[Observers] Loaded');\r\n  static ERROR = actionType('[Observers] Load Error');\r\n  static DELETE = actionType('[Observers] Delete observer');\r\n}\r\n\r\nexport class LoadObserversCountAction implements Action {\r\n  readonly type = ObserversActions.LOADOBSERVERSTOTALCOUNT;\r\n}\r\n\r\nexport class LoadObserversAction implements Action {\r\n  readonly type = ObserversActions.LOAD;\r\n\r\n  payload: {\r\n    key: string,\r\n    page: number,\r\n    pageSize: number,\r\n    refresh: boolean,\r\n    searchParamName?: string\r\n    searchParamPhone?: string\r\n  };\r\n\r\n  constructor(key: string, page: number, pageSize: number, refresh = false, searchParamName: string = '', searchParamPhone: string = '') {\r\n    this.payload = {\r\n      key,\r\n      page,\r\n      pageSize,\r\n      refresh,\r\n      searchParamName,\r\n      searchParamPhone\r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport class LoadObserversErrorAction implements Action {\r\n  readonly type = ObserversActions.ERROR;\r\n  payload: {\r\n    key: string\r\n  };\r\n\r\n  constructor(key: string) {\r\n    this.payload = {\r\n      key\r\n    };\r\n  }\r\n}\r\n\r\nexport class DeleteObserverAction implements Action {\r\n  readonly type = ObserversActions.DELETE;\r\n  payload: {\r\n    key: string,\r\n    id: string\r\n  };\r\n\r\n  constructor(key: string, id: string) {\r\n    this.payload = {\r\n      key,\r\n      id\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADED;\r\n  payload: {\r\n    key: string\r\n    totalItems: number\r\n    totalPages: number\r\n\r\n    items: Observer[]\r\n  };\r\n\r\n  constructor(key: string, items: Observer[], totalPages: number, totalItems: number) {\r\n    this.payload = {\r\n      key,\r\n      items,\r\n      totalPages,\r\n      totalItems\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCountCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADEDOBSERVERSTOTALCOUNT;\r\n  payload: {\r\n    count: number;\r\n  };\r\n\r\n  constructor(count: number) {\r\n    this.payload = { count };\r\n  }\r\n\r\n}\r\n\r\nexport type ObserversActionTypes = LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "count",
                        "type": "number"
                    }
                ],
                "line": 96,
                "jsdoctags": [
                    {
                        "name": "count",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "type",
                    "defaultValue": "ObserversActions.LOADEDOBSERVERSTOTALCOUNT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadObserversErrorAction",
            "id": "class-LoadObserversErrorAction-07781fb4bd4facebc70bff9b13e3662f",
            "file": "src/app/store/observers/observers.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nimport { Observer } from '../../models/observer.model';\r\n\r\nexport class ObserversActions {\r\n  static LOAD = actionType('[Observers] Load');\r\n  static LOADOBSERVERSTOTALCOUNT = actionType('[Observers] Load Total Count');\r\n  static LOADEDOBSERVERSTOTALCOUNT = actionType('[Observers] Loaded Total Count');\r\n  static LOADED = actionType('[Observers] Loaded');\r\n  static ERROR = actionType('[Observers] Load Error');\r\n  static DELETE = actionType('[Observers] Delete observer');\r\n}\r\n\r\nexport class LoadObserversCountAction implements Action {\r\n  readonly type = ObserversActions.LOADOBSERVERSTOTALCOUNT;\r\n}\r\n\r\nexport class LoadObserversAction implements Action {\r\n  readonly type = ObserversActions.LOAD;\r\n\r\n  payload: {\r\n    key: string,\r\n    page: number,\r\n    pageSize: number,\r\n    refresh: boolean,\r\n    searchParamName?: string\r\n    searchParamPhone?: string\r\n  };\r\n\r\n  constructor(key: string, page: number, pageSize: number, refresh = false, searchParamName: string = '', searchParamPhone: string = '') {\r\n    this.payload = {\r\n      key,\r\n      page,\r\n      pageSize,\r\n      refresh,\r\n      searchParamName,\r\n      searchParamPhone\r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport class LoadObserversErrorAction implements Action {\r\n  readonly type = ObserversActions.ERROR;\r\n  payload: {\r\n    key: string\r\n  };\r\n\r\n  constructor(key: string) {\r\n    this.payload = {\r\n      key\r\n    };\r\n  }\r\n}\r\n\r\nexport class DeleteObserverAction implements Action {\r\n  readonly type = ObserversActions.DELETE;\r\n  payload: {\r\n    key: string,\r\n    id: string\r\n  };\r\n\r\n  constructor(key: string, id: string) {\r\n    this.payload = {\r\n      key,\r\n      id\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADED;\r\n  payload: {\r\n    key: string\r\n    totalItems: number\r\n    totalPages: number\r\n\r\n    items: Observer[]\r\n  };\r\n\r\n  constructor(key: string, items: Observer[], totalPages: number, totalItems: number) {\r\n    this.payload = {\r\n      key,\r\n      items,\r\n      totalPages,\r\n      totalItems\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCountCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADEDOBSERVERSTOTALCOUNT;\r\n  payload: {\r\n    count: number;\r\n  };\r\n\r\n  constructor(count: number) {\r\n    this.payload = { count };\r\n  }\r\n\r\n}\r\n\r\nexport type ObserversActionTypes = LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "type",
                    "defaultValue": "ObserversActions.ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadStatisticAction",
            "id": "class-LoadStatisticAction-09e59a0e2f4d0247149ee03b9d0c551c",
            "file": "src/app/store/statistics/statistics.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nexport class  StatisticsActions {\r\n    static  LOAD =  actionType('[Stat] Load');\r\n    static  LOADED =  actionType('[Stat] Loaded');\r\n    static  ERROR =  actionType('[Stat] LoadedError');\r\n}\r\n\r\nexport class LoadStatisticAction implements Action {\r\n    readonly type = StatisticsActions.LOAD;\r\n\r\n    payload: {\r\n        key: string,\r\n        page: number,\r\n        pageSize: number\r\n        refresh: boolean\r\n    };\r\n\r\n    constructor(key: string, page: number, pageSize: number, refresh = false) {\r\n        this.payload = {\r\n            key,\r\n            page,\r\n            pageSize,\r\n            refresh\r\n        };\r\n\r\n    }\r\n}\r\nexport class LoadStatisticsErrorAction implements Action {\r\n    readonly type = StatisticsActions.ERROR;\r\n    payload: {\r\n        key: string\r\n    };\r\n    constructor(key: string){\r\n        this.payload = {\r\n            key\r\n        };\r\n    }\r\n}\r\nexport class LoadStatisticsCompleteAction implements Action {\r\n    readonly type = StatisticsActions.LOADED;\r\n    payload: {\r\n        key: string\r\n        totalItems: number\r\n        totalPages: number\r\n\r\n        items: LabelValueModel[]\r\n    };\r\n\r\n    constructor(key: string, items: LabelValueModel[], totalPages: number, totalItems: number) {\r\n        this.payload = {\r\n            key,\r\n            items,\r\n            totalPages,\r\n            totalItems\r\n        };\r\n    }\r\n}\r\nexport type StatisticsActionTypes = LoadStatisticAction | LoadStatisticsCompleteAction | LoadStatisticsErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "type": "number"
                    },
                    {
                        "name": "pageSize",
                        "type": "number"
                    },
                    {
                        "name": "refresh",
                        "type": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "refresh",
                        "type": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "type",
                    "defaultValue": "StatisticsActions.LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadStatisticsCompleteAction",
            "id": "class-LoadStatisticsCompleteAction-09e59a0e2f4d0247149ee03b9d0c551c",
            "file": "src/app/store/statistics/statistics.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nexport class  StatisticsActions {\r\n    static  LOAD =  actionType('[Stat] Load');\r\n    static  LOADED =  actionType('[Stat] Loaded');\r\n    static  ERROR =  actionType('[Stat] LoadedError');\r\n}\r\n\r\nexport class LoadStatisticAction implements Action {\r\n    readonly type = StatisticsActions.LOAD;\r\n\r\n    payload: {\r\n        key: string,\r\n        page: number,\r\n        pageSize: number\r\n        refresh: boolean\r\n    };\r\n\r\n    constructor(key: string, page: number, pageSize: number, refresh = false) {\r\n        this.payload = {\r\n            key,\r\n            page,\r\n            pageSize,\r\n            refresh\r\n        };\r\n\r\n    }\r\n}\r\nexport class LoadStatisticsErrorAction implements Action {\r\n    readonly type = StatisticsActions.ERROR;\r\n    payload: {\r\n        key: string\r\n    };\r\n    constructor(key: string){\r\n        this.payload = {\r\n            key\r\n        };\r\n    }\r\n}\r\nexport class LoadStatisticsCompleteAction implements Action {\r\n    readonly type = StatisticsActions.LOADED;\r\n    payload: {\r\n        key: string\r\n        totalItems: number\r\n        totalPages: number\r\n\r\n        items: LabelValueModel[]\r\n    };\r\n\r\n    constructor(key: string, items: LabelValueModel[], totalPages: number, totalItems: number) {\r\n        this.payload = {\r\n            key,\r\n            items,\r\n            totalPages,\r\n            totalItems\r\n        };\r\n    }\r\n}\r\nexport type StatisticsActionTypes = LoadStatisticAction | LoadStatisticsCompleteAction | LoadStatisticsErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "items",
                        "type": "LabelValueModel[]"
                    },
                    {
                        "name": "totalPages",
                        "type": "number"
                    },
                    {
                        "name": "totalItems",
                        "type": "number"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "items",
                        "type": "LabelValueModel[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalPages",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalItems",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "type",
                    "defaultValue": "StatisticsActions.LOADED",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadStatisticsErrorAction",
            "id": "class-LoadStatisticsErrorAction-09e59a0e2f4d0247149ee03b9d0c551c",
            "file": "src/app/store/statistics/statistics.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nexport class  StatisticsActions {\r\n    static  LOAD =  actionType('[Stat] Load');\r\n    static  LOADED =  actionType('[Stat] Loaded');\r\n    static  ERROR =  actionType('[Stat] LoadedError');\r\n}\r\n\r\nexport class LoadStatisticAction implements Action {\r\n    readonly type = StatisticsActions.LOAD;\r\n\r\n    payload: {\r\n        key: string,\r\n        page: number,\r\n        pageSize: number\r\n        refresh: boolean\r\n    };\r\n\r\n    constructor(key: string, page: number, pageSize: number, refresh = false) {\r\n        this.payload = {\r\n            key,\r\n            page,\r\n            pageSize,\r\n            refresh\r\n        };\r\n\r\n    }\r\n}\r\nexport class LoadStatisticsErrorAction implements Action {\r\n    readonly type = StatisticsActions.ERROR;\r\n    payload: {\r\n        key: string\r\n    };\r\n    constructor(key: string){\r\n        this.payload = {\r\n            key\r\n        };\r\n    }\r\n}\r\nexport class LoadStatisticsCompleteAction implements Action {\r\n    readonly type = StatisticsActions.LOADED;\r\n    payload: {\r\n        key: string\r\n        totalItems: number\r\n        totalPages: number\r\n\r\n        items: LabelValueModel[]\r\n    };\r\n\r\n    constructor(key: string, items: LabelValueModel[], totalPages: number, totalItems: number) {\r\n        this.payload = {\r\n            key,\r\n            items,\r\n            totalPages,\r\n            totalItems\r\n        };\r\n    }\r\n}\r\nexport type StatisticsActionTypes = LoadStatisticAction | LoadStatisticsCompleteAction | LoadStatisticsErrorAction;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "type",
                    "defaultValue": "StatisticsActions.ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Note",
            "id": "class-Note-75420c801b5d32a7ce3c541b5690bab4",
            "file": "src/app/models/note.model.ts",
            "type": "class",
            "sourceCode": "export class Note {\r\n    countyCode: string;\r\n    pollingStattionNumber: number;\r\n    attachmentPath: string;\r\n    text: string;\r\n    formCode: string;\r\n    formId: number;\r\n    questionId: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "attachmentPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "countyCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "formCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "formId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pollingStattionNumber",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "questionId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NoteActionTypes",
            "id": "class-NoteActionTypes-cac94d8dc8653ad5c4b2791c6f5fc6bc",
            "file": "src/app/store/note/note.actions.ts",
            "type": "class",
            "sourceCode": "import { Note } from '../../models/note.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nexport class NoteActionTypes {\r\n    static readonly LOAD = actionType('[Note] Load');\r\n    static readonly LOAD_DONE = actionType('[Note] Load done');\r\n}\r\nexport class LoadNotesAction implements Action {\r\n    readonly type = NoteActionTypes.LOAD;\r\n\r\n    payload: {\r\n        idPollingStation: number\r\n        idObserver: number\r\n    };\r\n    constructor(idPollingStation: number, idObserver: number) {\r\n        this.payload = {\r\n            idPollingStation,\r\n            idObserver\r\n        };\r\n    }\r\n}\r\nexport class LoadNotesDoneAction implements Action {\r\n    readonly type = NoteActionTypes.LOAD_DONE;\r\n    payload: Note[];\r\n    constructor(note: Note[]) {\r\n        this.payload = note;\r\n    }\r\n}\r\nexport type NoteActions = LoadNotesAction | LoadNotesDoneAction;\r\n",
            "properties": [
                {
                    "name": "LOAD",
                    "defaultValue": "actionType('[Note] Load')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "LOAD_DONE",
                    "defaultValue": "actionType('[Note] Load done')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NoteState",
            "id": "class-NoteState-fc0865872346830efa4072be2c8be14e",
            "file": "src/app/store/note/note.reducer.ts",
            "type": "class",
            "sourceCode": "import { NoteActions, NoteActionTypes } from './note.actions';\r\nimport { Note } from '../../models/note.model';\r\nexport class NoteState {\r\n    notes: Note[] = [];\r\n    loading = false;\r\n    error = false;\r\n    idObserver: number = undefined;\r\n    idPollingStation: number = undefined;\r\n}\r\nexport let noteInitialState = new NoteState();\r\n\r\nexport function noteReducer(state = noteInitialState, action: NoteActions) {\r\n    switch (action.type) {\r\n        case NoteActionTypes.LOAD:\r\n            return {\r\n                notes: [],\r\n                loading: true,\r\n                error: false,\r\n                idObserver: action.payload.idObserver,\r\n                idPollingStation: action.payload.idPollingStation\r\n            };\r\n        case NoteActionTypes.LOAD_DONE:\r\n            return Object.assign({}, state, {\r\n                notes: action.payload,\r\n                loading: false,\r\n                error: false\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "idObserver",
                    "defaultValue": "undefined",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "idPollingStation",
                    "defaultValue": "undefined",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "notes",
                    "defaultValue": "[]",
                    "type": "Note[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Observer",
            "id": "class-Observer-47158beed7618a7799d87de37db6e18e",
            "file": "src/app/models/observer.model.ts",
            "type": "class",
            "sourceCode": "export class Observer {\r\n  id: string;\r\n  name: string;\r\n  ngo: string;\r\n  phone: string;\r\n  pin = '';\r\n  sendSMS = false;\r\n  isSelected: boolean;\r\n  deviceRegisterDate: string;\r\n  lastSeen: string;\r\n  numberOfNotes: number;\r\n  numberOfPollingStations: number;\r\n\r\n\r\n  constructor(observerResponse: any) {\r\n    this.id = observerResponse.id ? observerResponse.id : '';\r\n    this.name = observerResponse.name ? observerResponse.name : '';\r\n    this.ngo = observerResponse.ngo ? observerResponse.ngo : '';\r\n    this.phone = observerResponse.phone ? observerResponse.phone : '';\r\n    this.sendSMS = observerResponse.sendSMS ? observerResponse.sendSMS : false;\r\n    this.isSelected = observerResponse.isSelected ? observerResponse.isSelected : false;\r\n    this.deviceRegisterDate = observerResponse.deviceRegisterDate ? observerResponse.deviceRegisterDate : null;\r\n    this.numberOfNotes = observerResponse.numberOfNotes ? observerResponse.numberOfNotes : 0;\r\n    this.numberOfPollingStations = observerResponse.numberOfPollingStations ? observerResponse.numberOfPollingStations : 0;\r\n  }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "observerResponse",
                        "type": "any"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "observerResponse",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "deviceRegisterDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastSeen",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "ngo",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "numberOfNotes",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "numberOfPollingStations",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pin",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sendSMS",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObserverProfileForm",
            "id": "class-ObserverProfileForm-db271c7919ef5c0bbf163b8376d666a4",
            "file": "src/app/components/observers/observer-profile/observer-profile.form.ts",
            "type": "class",
            "sourceCode": "import {FormGroup, FormControl, Validators} from '@angular/forms';\r\nimport {Observer} from '../../../models/observer.model';\r\n\r\nexport class ObserverProfileForm extends FormGroup {\r\n  constructor() {\r\n    super({\r\n      name: new FormControl('', Validators.required),\r\n      phone: new FormControl('', [Validators.required]),\r\n      password: new FormControl(''),\r\n      sendSMS: new FormControl(false)\r\n    });\r\n  }\r\n\r\n  isFieldValid(fieldName: ObserverProfileField): boolean {\r\n    const field = this.get(fieldName);\r\n    return field.valid && field.dirty;\r\n  }\r\n}\r\n\r\nexport type ObserverProfileField = keyof Observer;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 4
            },
            "properties": [],
            "methods": [
                {
                    "name": "isFieldValid",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "ObserverProfileField"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "ObserverProfileField",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObserverProfileUploadForm",
            "id": "class-ObserverProfileUploadForm-d5bfb129db90b494257294030c36bc06",
            "file": "src/app/components/observers/observer-profile/observers-profile-upload.form.ts",
            "type": "class",
            "sourceCode": "import {FormGroup} from '@angular/forms';\r\n\r\nexport class ObserverProfileUploadForm extends FormGroup {\r\n  constructor() {\r\n    super({\r\n      csv: null\r\n    });\r\n  }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 3
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObserversActions",
            "id": "class-ObserversActions-07781fb4bd4facebc70bff9b13e3662f",
            "file": "src/app/store/observers/observers.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nimport { Observer } from '../../models/observer.model';\r\n\r\nexport class ObserversActions {\r\n  static LOAD = actionType('[Observers] Load');\r\n  static LOADOBSERVERSTOTALCOUNT = actionType('[Observers] Load Total Count');\r\n  static LOADEDOBSERVERSTOTALCOUNT = actionType('[Observers] Loaded Total Count');\r\n  static LOADED = actionType('[Observers] Loaded');\r\n  static ERROR = actionType('[Observers] Load Error');\r\n  static DELETE = actionType('[Observers] Delete observer');\r\n}\r\n\r\nexport class LoadObserversCountAction implements Action {\r\n  readonly type = ObserversActions.LOADOBSERVERSTOTALCOUNT;\r\n}\r\n\r\nexport class LoadObserversAction implements Action {\r\n  readonly type = ObserversActions.LOAD;\r\n\r\n  payload: {\r\n    key: string,\r\n    page: number,\r\n    pageSize: number,\r\n    refresh: boolean,\r\n    searchParamName?: string\r\n    searchParamPhone?: string\r\n  };\r\n\r\n  constructor(key: string, page: number, pageSize: number, refresh = false, searchParamName: string = '', searchParamPhone: string = '') {\r\n    this.payload = {\r\n      key,\r\n      page,\r\n      pageSize,\r\n      refresh,\r\n      searchParamName,\r\n      searchParamPhone\r\n    };\r\n\r\n  }\r\n}\r\n\r\nexport class LoadObserversErrorAction implements Action {\r\n  readonly type = ObserversActions.ERROR;\r\n  payload: {\r\n    key: string\r\n  };\r\n\r\n  constructor(key: string) {\r\n    this.payload = {\r\n      key\r\n    };\r\n  }\r\n}\r\n\r\nexport class DeleteObserverAction implements Action {\r\n  readonly type = ObserversActions.DELETE;\r\n  payload: {\r\n    key: string,\r\n    id: string\r\n  };\r\n\r\n  constructor(key: string, id: string) {\r\n    this.payload = {\r\n      key,\r\n      id\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADED;\r\n  payload: {\r\n    key: string\r\n    totalItems: number\r\n    totalPages: number\r\n\r\n    items: Observer[]\r\n  };\r\n\r\n  constructor(key: string, items: Observer[], totalPages: number, totalItems: number) {\r\n    this.payload = {\r\n      key,\r\n      items,\r\n      totalPages,\r\n      totalItems\r\n    };\r\n  }\r\n}\r\n\r\nexport class LoadObserversCountCompleteAction implements Action {\r\n  readonly type = ObserversActions.LOADEDOBSERVERSTOTALCOUNT;\r\n  payload: {\r\n    count: number;\r\n  };\r\n\r\n  constructor(count: number) {\r\n    this.payload = { count };\r\n  }\r\n\r\n}\r\n\r\nexport type ObserversActionTypes = LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction;\r\n",
            "properties": [
                {
                    "name": "DELETE",
                    "defaultValue": "actionType('[Observers] Delete observer')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "ERROR",
                    "defaultValue": "actionType('[Observers] Load Error')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LOAD",
                    "defaultValue": "actionType('[Observers] Load')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LOADED",
                    "defaultValue": "actionType('[Observers] Loaded')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LOADEDOBSERVERSTOTALCOUNT",
                    "defaultValue": "actionType('[Observers] Loaded Total Count')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LOADOBSERVERSTOTALCOUNT",
                    "defaultValue": "actionType('[Observers] Load Total Count')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObserversCountState",
            "id": "class-ObserversCountState-a6bf65aed62591f03ab9ebc84bcba4f3",
            "file": "src/app/store/observers/observers.state.ts",
            "type": "class",
            "sourceCode": "import {observersConfig, ObserversStateConfig} from './observers.config';\r\n\r\nimport {LabelValueModel} from '../../models/labelValue.model';\r\nimport * as _ from 'lodash';\r\nimport {Observer} from '../../models/observer.model';\r\n\r\nexport class ObserversStateItem {\r\n  key: string;\r\n  method: string;\r\n\r\n  header: string;\r\n  subHeader: string;\r\n\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  totalItems: number;\r\n\r\n  loading = false;\r\n  error = false;\r\n  values = [] as Observer[];\r\n\r\n  constructor(config?: ObserversStateConfig) {\r\n    if (config) {\r\n      this.key = config.key;\r\n      this.method = config.method;\r\n      this.header = config.header;\r\n      this.subHeader = config.subHeader;\r\n    }\r\n  }\r\n}\r\n\r\nexport class ObserversState {\r\n  [key: string]: ObserversStateItem\r\n}\r\n\r\nexport class ObserversCountState{\r\n  count: number;\r\n}\r\nexport let observersInitialState: ObserversState = _.keyBy<ObserversStateItem>(observersConfig.map<ObserversStateItem>((config) => new ObserversStateItem(config)), value => value.key);\r\nexport let observersCountInitialState: ObserversCountState = { count: 0 };\r\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObserversFilterForm",
            "id": "class-ObserversFilterForm-67f673eb25d6de1c53a5ce5e7ceacd12",
            "file": "src/app/components/observers/observers-filter.form.ts",
            "type": "class",
            "sourceCode": "import { FormGroup, FormControl } from '@angular/forms';\r\n\r\nexport class ObserversFilterForm extends FormGroup {\r\n    constructor() {\r\n        super({\r\n            name: new FormControl(''),\r\n            phone: new FormControl('')\r\n        });\r\n    }\r\n\r\n    isEmpty(){\r\n      return !Object.keys(this.controls).some(e => this.get(e).value.length);\r\n    }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 3
            },
            "properties": [],
            "methods": [
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObserversState",
            "id": "class-ObserversState-a6bf65aed62591f03ab9ebc84bcba4f3",
            "file": "src/app/store/observers/observers.state.ts",
            "type": "class",
            "sourceCode": "import {observersConfig, ObserversStateConfig} from './observers.config';\r\n\r\nimport {LabelValueModel} from '../../models/labelValue.model';\r\nimport * as _ from 'lodash';\r\nimport {Observer} from '../../models/observer.model';\r\n\r\nexport class ObserversStateItem {\r\n  key: string;\r\n  method: string;\r\n\r\n  header: string;\r\n  subHeader: string;\r\n\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  totalItems: number;\r\n\r\n  loading = false;\r\n  error = false;\r\n  values = [] as Observer[];\r\n\r\n  constructor(config?: ObserversStateConfig) {\r\n    if (config) {\r\n      this.key = config.key;\r\n      this.method = config.method;\r\n      this.header = config.header;\r\n      this.subHeader = config.subHeader;\r\n    }\r\n  }\r\n}\r\n\r\nexport class ObserversState {\r\n  [key: string]: ObserversStateItem\r\n}\r\n\r\nexport class ObserversCountState{\r\n  count: number;\r\n}\r\nexport let observersInitialState: ObserversState = _.keyBy<ObserversStateItem>(observersConfig.map<ObserversStateItem>((config) => new ObserversStateItem(config)), value => value.key);\r\nexport let observersCountInitialState: ObserversCountState = { count: 0 };\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-a6bf65aed62591f03ab9ebc84bcba4f3",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "ObserversStateItem",
                    "line": 33
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObserversStateItem",
            "id": "class-ObserversStateItem-a6bf65aed62591f03ab9ebc84bcba4f3",
            "file": "src/app/store/observers/observers.state.ts",
            "type": "class",
            "sourceCode": "import {observersConfig, ObserversStateConfig} from './observers.config';\r\n\r\nimport {LabelValueModel} from '../../models/labelValue.model';\r\nimport * as _ from 'lodash';\r\nimport {Observer} from '../../models/observer.model';\r\n\r\nexport class ObserversStateItem {\r\n  key: string;\r\n  method: string;\r\n\r\n  header: string;\r\n  subHeader: string;\r\n\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  totalItems: number;\r\n\r\n  loading = false;\r\n  error = false;\r\n  values = [] as Observer[];\r\n\r\n  constructor(config?: ObserversStateConfig) {\r\n    if (config) {\r\n      this.key = config.key;\r\n      this.method = config.method;\r\n      this.header = config.header;\r\n      this.subHeader = config.subHeader;\r\n    }\r\n  }\r\n}\r\n\r\nexport class ObserversState {\r\n  [key: string]: ObserversStateItem\r\n}\r\n\r\nexport class ObserversCountState{\r\n  count: number;\r\n}\r\nexport let observersInitialState: ObserversState = _.keyBy<ObserversStateItem>(observersConfig.map<ObserversStateItem>((config) => new ObserversStateItem(config)), value => value.key);\r\nexport let observersCountInitialState: ObserversCountState = { count: 0 };\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ObserversStateConfig",
                        "optional": true
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ObserversStateConfig",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "header",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "method",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subHeader",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "totalItems",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "totalPages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "values",
                    "defaultValue": "[] as Observer[]",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QueryParamBuilder",
            "id": "class-QueryParamBuilder-631c2fd907cc0ba5cba6de434ee5ec4e",
            "file": "src/app/core/apiService/api.service.ts",
            "type": "class",
            "sourceCode": "import {throwError as observableThrowError, Observable} from 'rxjs';\r\n\r\nimport {catchError} from 'rxjs/operators';\r\nimport {Router} from '@angular/router';\r\nimport {TokenService} from '../token/token.service';\r\nimport {Injectable} from '@angular/core';\r\nimport * as _ from 'lodash';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\n\r\nexport interface HttpOptions {\r\n  body?: any;\r\n  headers?: HttpHeaders;\r\n  observe?: 'body';\r\n  params?: HttpParams;\r\n  responseType?: 'json';\r\n  reportProgress?: boolean;\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport const HttpMethod = {\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  DELETE: 'DELETE',\r\n  PATCH: 'PATCH',\r\n  HEAD: 'HEAD',\r\n  OPTIONS: 'OPTIONS',\r\n};\r\n\r\nexport class QueryParamBuilder {\r\n  private params: string[] = [];\r\n  private constructor(private methodUrl: string) {\r\n  }\r\n\r\n  public static Instance(methodUrl: string): QueryParamBuilder {\r\n    return new QueryParamBuilder(methodUrl);\r\n  }\r\n\r\n  public withParam(paramName: string, value: number | boolean | string | string[]): QueryParamBuilder {\r\n    if (value instanceof Array) {\r\n      value.forEach(x => {\r\n        this.params.push(`${paramName}=${x}`);\r\n      });\r\n\r\n    } else {\r\n      this.params.push(`${paramName}=${value}`);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public build(): string {\r\n    const joinedParams: string = this.params.join('&');\r\n    return `${this.methodUrl}?${joinedParams}`;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n\r\n  constructor(private httpClient: HttpClient, private tokenService: TokenService, private router: Router) {\r\n  }\r\n\r\n  private request<T>(url: string, method: string, options?: HttpOptions): Observable<T> {\r\n    options.headers = options.headers.append('Authorization', `Bearer ${this.tokenService.token}`);\r\n\r\n    return this.httpClient.request<T>(method, url, options).pipe(catchError((err: any) => {\r\n      if (err.status === 401) {\r\n        this.tokenService.token = undefined;\r\n        this.router.navigateByUrl('/login');\r\n      }\r\n      return observableThrowError(err);\r\n    }));\r\n  }\r\n\r\n  private normalizeRequest<T>(url: string, method: string, options?: HttpOptions, body?: any): Observable<T> {\r\n    const requestOptions = options || {};\r\n    requestOptions.headers = requestOptions.headers || new HttpHeaders();\r\n    requestOptions.responseType = requestOptions.responseType || 'json';\r\n    if (body) {\r\n      requestOptions.body = body;\r\n    }\r\n    return this.request(url, method, requestOptions);\r\n  }\r\n\r\n  get<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    if (options && options.body && !options.params) {\r\n      let params = new HttpParams();\r\n      _.each(options.body, (value, key) => (\r\n        params = params.append(key, value)\r\n      ));\r\n      options.params = params;\r\n    }\r\n    return this.normalizeRequest(url, HttpMethod.GET, options);\r\n  }\r\n\r\n  post<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.POST, options, body);\r\n  }\r\n\r\n  untypedPost(url: string, body: any): Observable<string> {\r\n    return this.httpClient.post(url, body, {\r\n      responseType: 'text'\r\n    }).pipe(catchError((err: any) => {\r\n      if (err.status === 401) {\r\n        this.tokenService.token = undefined;\r\n        this.router.navigateByUrl('/login');\r\n      }\r\n      return observableThrowError(err);\r\n    }));\r\n  }\r\n\r\n  put<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.PUT, options, body);\r\n  }\r\n\r\n  delete<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.DELETE, options);\r\n  }\r\n\r\n  patch<T>(url: string, body: any, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.PATCH, options);\r\n  }\r\n\r\n  head<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.HEAD, options);\r\n  }\r\n\r\n  options<T>(url: string, options?: HttpOptions): Observable<T> {\r\n    return this.normalizeRequest(url, HttpMethod.OPTIONS, options);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "methodUrl",
                        "type": "string"
                    }
                ],
                "line": 32,
                "modifierKind": [
                    112
                ],
                "jsdoctags": [
                    {
                        "name": "methodUrl",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "params",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "build",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "Instance",
                    "args": [
                        {
                            "name": "methodUrl",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "QueryParamBuilder",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "methodUrl",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withParam",
                    "args": [
                        {
                            "name": "paramName",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "number | boolean | string | string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "QueryParamBuilder",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "paramName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "number | boolean | string | string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StatisticsActions",
            "id": "class-StatisticsActions-09e59a0e2f4d0247149ee03b9d0c551c",
            "file": "src/app/store/statistics/statistics.actions.ts",
            "type": "class",
            "sourceCode": "import { LabelValueModel } from '../../models/labelValue.model';\r\nimport { Action } from '@ngrx/store';\r\nimport { actionType } from '../util';\r\nexport class  StatisticsActions {\r\n    static  LOAD =  actionType('[Stat] Load');\r\n    static  LOADED =  actionType('[Stat] Loaded');\r\n    static  ERROR =  actionType('[Stat] LoadedError');\r\n}\r\n\r\nexport class LoadStatisticAction implements Action {\r\n    readonly type = StatisticsActions.LOAD;\r\n\r\n    payload: {\r\n        key: string,\r\n        page: number,\r\n        pageSize: number\r\n        refresh: boolean\r\n    };\r\n\r\n    constructor(key: string, page: number, pageSize: number, refresh = false) {\r\n        this.payload = {\r\n            key,\r\n            page,\r\n            pageSize,\r\n            refresh\r\n        };\r\n\r\n    }\r\n}\r\nexport class LoadStatisticsErrorAction implements Action {\r\n    readonly type = StatisticsActions.ERROR;\r\n    payload: {\r\n        key: string\r\n    };\r\n    constructor(key: string){\r\n        this.payload = {\r\n            key\r\n        };\r\n    }\r\n}\r\nexport class LoadStatisticsCompleteAction implements Action {\r\n    readonly type = StatisticsActions.LOADED;\r\n    payload: {\r\n        key: string\r\n        totalItems: number\r\n        totalPages: number\r\n\r\n        items: LabelValueModel[]\r\n    };\r\n\r\n    constructor(key: string, items: LabelValueModel[], totalPages: number, totalItems: number) {\r\n        this.payload = {\r\n            key,\r\n            items,\r\n            totalPages,\r\n            totalItems\r\n        };\r\n    }\r\n}\r\nexport type StatisticsActionTypes = LoadStatisticAction | LoadStatisticsCompleteAction | LoadStatisticsErrorAction;\r\n",
            "properties": [
                {
                    "name": "ERROR",
                    "defaultValue": "actionType('[Stat] LoadedError')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LOAD",
                    "defaultValue": "actionType('[Stat] Load')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LOADED",
                    "defaultValue": "actionType('[Stat] Loaded')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StatisticsState",
            "id": "class-StatisticsState-c6e42b622177cf6b09be46378f068925",
            "file": "src/app/store/statistics/statistics.state.ts",
            "type": "class",
            "sourceCode": "import { statisticsConfig, StatisticsStateConfig } from './statistics.config';\r\n\r\nimport { LabelValueModel } from '../../models/labelValue.model';\r\nimport {keyBy} from 'lodash';\r\n\r\nexport class StatisticsStateItem {\r\n    key: string;\r\n    method: string;\r\n\r\n    header: string;\r\n    subHeader: string;\r\n\r\n    page: number;\r\n    pageSize: number;\r\n    totalPages: number;\r\n    totalItems: number;\r\n\r\n    loading = false;\r\n    error = false;\r\n    values = [] as LabelValueModel[];\r\n\r\n    constructor(config?: StatisticsStateConfig) {\r\n        if (config) {\r\n            this.key = config.key;\r\n            this.method = config.method;\r\n            this.header = config.header;\r\n            this.subHeader = config.subHeader;\r\n        }\r\n    }\r\n}\r\nexport class StatisticsState {\r\n    [key: string]: StatisticsStateItem\r\n}\r\nexport let statisticsInitialState: StatisticsState = keyBy<StatisticsStateItem>(\r\n  statisticsConfig.map<StatisticsStateItem>((config) => new StatisticsStateItem(config)), value => value.key);\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-c6e42b622177cf6b09be46378f068925",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "StatisticsStateItem",
                    "line": 31
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StatisticsStateItem",
            "id": "class-StatisticsStateItem-c6e42b622177cf6b09be46378f068925",
            "file": "src/app/store/statistics/statistics.state.ts",
            "type": "class",
            "sourceCode": "import { statisticsConfig, StatisticsStateConfig } from './statistics.config';\r\n\r\nimport { LabelValueModel } from '../../models/labelValue.model';\r\nimport {keyBy} from 'lodash';\r\n\r\nexport class StatisticsStateItem {\r\n    key: string;\r\n    method: string;\r\n\r\n    header: string;\r\n    subHeader: string;\r\n\r\n    page: number;\r\n    pageSize: number;\r\n    totalPages: number;\r\n    totalItems: number;\r\n\r\n    loading = false;\r\n    error = false;\r\n    values = [] as LabelValueModel[];\r\n\r\n    constructor(config?: StatisticsStateConfig) {\r\n        if (config) {\r\n            this.key = config.key;\r\n            this.method = config.method;\r\n            this.header = config.header;\r\n            this.subHeader = config.subHeader;\r\n        }\r\n    }\r\n}\r\nexport class StatisticsState {\r\n    [key: string]: StatisticsStateItem\r\n}\r\nexport let statisticsInitialState: StatisticsState = keyBy<StatisticsStateItem>(\r\n  statisticsConfig.map<StatisticsStateItem>((config) => new StatisticsStateItem(config)), value => value.key);\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "StatisticsStateConfig",
                        "optional": true
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "StatisticsStateConfig",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "header",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "method",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subHeader",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalItems",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "totalPages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "values",
                    "defaultValue": "[] as LabelValueModel[]",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AnswerComponent",
            "id": "component-AnswerComponent-3414966fd1785c3474de6098283d8e58",
            "file": "src/app/components/answer/answer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./answer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./answer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "answerState",
                    "type": "Observable<AnswerState>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "countyCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "formState",
                    "type": "Observable<FormState>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fromTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isUrgent",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "observerId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pollingStationNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "toTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadAnswers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "isValidValue",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "pageChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redoAnswerDetailsAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "redoAnswerListAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "requestFilteredData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "resetFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {map, take, distinctUntilChanged} from 'rxjs/operators';\r\nimport { LoadAnswerDetailsAction, LoadAnswerPreviewAction } from '../../store/answer/answer.actions';\r\nimport { AnswerState } from '../../store/answer/answer.reducer';\r\nimport { FormState } from '../../store/form/form.reducer';\r\nimport { AppState } from '../../store/store.module';\r\nimport { AnswersService, AnswersPackFilter } from '../../services/answers.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport {select, Store} from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport * as FileSaver from 'file-saver';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n\r\n@Component({\r\n    templateUrl: './answer.component.html',\r\n    styleUrls: ['./answer.component.scss']\r\n})\r\nexport class AnswerComponent implements OnInit {\r\n\r\n    answerState: Observable<AnswerState>;\r\n    formState: Observable<FormState>;\r\n\r\n    countyCode: string;\r\n    pollingStationNumber: string;\r\n    observerId: number;\r\n    isUrgent: boolean;\r\n    fromTime: string;\r\n    toTime: string;\r\n\r\n    constructor(private store: Store<AppState>,\r\n                private answersService: AnswersService,\r\n                private translate: TranslateService) { }\r\n\r\n    ngOnInit() {\r\n        this.formState = this.store.pipe(select(state => state.form), distinctUntilChanged());\r\n        this.answerState = this.store.pipe(select(state => state.answer), distinctUntilChanged());\r\n\r\n        this.answerState.subscribe(value => {\r\n            this.isUrgent = value.urgent || false;\r\n            this.countyCode = value.answerFilters.county;\r\n            this.pollingStationNumber = value.answerFilters.pollingStationNumber;\r\n            this.observerId = value.answerFilters.observerId;\r\n        });\r\n    }\r\n\r\n    requestFilteredData() {\r\n        this.store.dispatch(new LoadAnswerPreviewAction(this.isUrgent, 1, 5, true, {\r\n            observerId: this.observerId,\r\n            pollingStationNumber: this.pollingStationNumber,\r\n            county: this.countyCode\r\n        }));\r\n\r\n    }\r\n\r\n    redoAnswerListAction() {\r\n        // take the current state of the answerState, and do a reloaded\r\n        this.store.pipe(select(state => state.answer), take(1),\r\n            map(s => new LoadAnswerPreviewAction(s.urgent, s.page, s.pageSize, true, s.answerFilters)),\r\n            map(a => this.store.dispatch(a)), ).subscribe();\r\n    }\r\n\r\n    redoAnswerDetailsAction() {\r\n        // take the current state of the answerState, and do a reloaded\r\n        this.store.pipe(select(state => state.answer), take(1),\r\n            map(s => new LoadAnswerDetailsAction(s.observerId, s.sectionId)),\r\n            map(a => this.store.dispatch(a)), )\r\n            .subscribe();\r\n    }\r\n\r\n    pageChanged(event) {\r\n        this.store.pipe(select(s => s.answer), take(1),\r\n            map(s => new LoadAnswerPreviewAction(s.urgent, event.page, event.pageSize, false, s.answerFilters)),\r\n            map(a => {\r\n                this.store.dispatch(a);\r\n            }), )\r\n            .subscribe();\r\n    }\r\n\r\n    resetFilters(): void {\r\n        this.countyCode = null;\r\n        this.pollingStationNumber = null;\r\n        this.observerId = null;\r\n        this.fromTime = null;\r\n        this.toTime = null;\r\n    }\r\n\r\n    private isValidValue(value) {\r\n        return value !== null && value !== '';\r\n    }\r\n\r\n    downloadAnswers() {\r\n        if (!confirm(this.translate.instant('ANSWERS_DOWNLOAD_CONFIRMATION'))) {\r\n            return;\r\n        }\r\n\r\n        const filter: AnswersPackFilter = {};\r\n        if (this.isValidValue(this.countyCode)) {\r\n            filter.county = this.countyCode;\r\n        }\r\n\r\n        if (this.isValidValue(this.pollingStationNumber)) {\r\n            filter.pollingStationNumber = this.pollingStationNumber as any;\r\n        }\r\n\r\n        if (this.isValidValue(this.observerId)) {\r\n            filter.idObserver = this.observerId;\r\n        }\r\n\r\n        if (this.isValidValue(this.fromTime)) {\r\n            filter.from = this.fromTime;\r\n        }\r\n\r\n        if (this.isValidValue(this.toTime)) {\r\n            filter.to = this.toTime;\r\n        }\r\n\r\n        return this.answersService.downloadAnswers(filter).subscribe(res => {\r\n            FileSaver.saveAs(res, 'answsers.xlsx');\r\n        });\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-header{\r\n    margin:20px 0;\r\n}\r\n\r\n.action-buttons {\r\n    margin-top: 24px;\r\n\r\n    .btn {\r\n      padding: 10px;\r\n    }\r\n  }",
                    "styleUrl": "./answer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "answersService",
                        "type": "AnswersService"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "answersService",
                        "type": "AnswersService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\r\n  <form (ngSubmit)=\"requestFilteredData()\" name=\"filtreazaDupa\">\r\n    <div class=\"form-row\">\r\n      <div class=\"col-md-2 mb-3\">\r\n        <label for=\"countyCode\" class=\"control-label\">{{'COUNTY_CODE' | translate}}</label>\r\n        <input [(ngModel)]=\"countyCode\" name=\"countyCode\" class=\"form-control\" id=\"countyCode\">\r\n      </div>\r\n      <div class=\"col-md-2 mb-3\">\r\n        <label for=\"pollingStationNumber\" class=\"control-label\">{{'POLLING_STATION_NUMBER' | translate}}</label>\r\n        <input [(ngModel)]=\"pollingStationNumber\" name=\"pollingStationNumber\" class=\"form-control\"\r\n          id=\"pollingStationNumber\">\r\n      </div>\r\n      <div class=\"col-md-2 mb-3\">\r\n        <label for=\"observerId\" class=\"control-label\">{{'OBSERVER_ID' | translate}}</label>\r\n        <input [(ngModel)]=\"observerId\" name=\"observerId\" class=\"form-control\" id=\"observerId\">\r\n      </div>\r\n      <div class=\"col-md-2 mb-3\">\r\n        <label for=\"fromTime\" class=\"control-label\">{{'FROM' | translate }}</label>\r\n        <input [(ngModel)]=\"fromTime\" name=\"fromTime\" class=\"form-control\" id=\"fromTime\" placeholder=\"yyyy-MM-dd hh:mm\">\r\n      </div>\r\n\r\n      <div class=\"col-md-2 mb-3\">\r\n        <label for=\"toTime\" class=\"control-label\">{{'TO' | translate}}</label>\r\n        <input [(ngModel)]=\"toTime\" name=\"toTime\" class=\"form-control\" id=\"toTime\" placeholder=\"yyyy-MM-dd hh:mm\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-2 mb-3\">\r\n      <div class=\"form-group action-buttons\">\r\n        <button type=\"submit\" class=\"btn btn-success\">Filter</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"resetFilters()\">Reset</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <div class=\"list-header col-md-12\">\r\n    <h3>{{((answerState | async)?.urgent ? 'URGENT_HEADER' : 'NOT_URGENT_HEADER') | translate}}</h3>\r\n    <h5>{{((answerState | async)?.urgent ? 'URGENT_SUBHEADER' : 'NOT_URGENT_SUBHEADER') | translate}}</h5>\r\n    <button (click)=\"downloadAnswers()\" class=\"btn btn-default mb-2\">{{'DOWNLOAD_ANSWERS' | translate }}</button>\r\n  </div>\r\n  <div class=\"col-md-3\">\r\n    <app-answer-list [answerState]=\"answerState | async\" (reload)=\"redoAnswerListAction()\"\r\n      (pageChanged)=\"pageChanged($event)\">\r\n    </app-answer-list>\r\n  </div>\r\n  <div class=\"col-md-8\">\r\n    <router-outlet>\r\n    </router-outlet>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AnswerDetailsComponent",
            "id": "component-AnswerDetailsComponent-880635f45c68f2423cf9361edb5d4162",
            "file": "src/app/components/answer/answer-details/answer-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-answer-details",
            "styleUrls": [
                "./answer-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./answer-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "answerState",
                    "type": "AnswerState",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "formState",
                    "type": "FormState",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "noteState",
                    "type": "NoteState",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "subs",
                    "defaultValue": "[]",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "formAnswers",
                    "args": [],
                    "optional": false,
                    "returnType": "CompletedQuestion[]",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "formNotes",
                    "args": [
                        {
                            "name": "formId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "formId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataForForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "Form",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasError",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "isLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "onTabSelected",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {NoteState} from '../../../store/note/note.reducer';\r\nimport {LoadAnswerDetailsAction} from '../../../store/answer/answer.actions';\r\nimport {Store} from '@ngrx/store';\r\nimport {AppState} from '../../../store/store.module';\r\nimport {Subscription} from 'rxjs';\r\nimport {FormState} from '../../../store/form/form.reducer';\r\nimport {AnswerState} from '../../../store/answer/answer.reducer';\r\nimport {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport * as _ from 'lodash';\r\nimport {CompletedQuestion} from '../../../models/completed.question.model';\r\nimport {TabDirective} from 'ngx-bootstrap/tabs';\r\nimport {FormDetails} from '../../../models/form.info.model';\r\nimport {FullyLoadFormAction} from '../../../store/form/form.actions';\r\nimport {Form} from '../../../models/form.model';\r\n\r\n@Component({\r\n  selector: 'app-answer-details',\r\n  templateUrl: './answer-details.component.html',\r\n  styleUrls: ['./answer-details.component.scss']\r\n})\r\nexport class AnswerDetailsComponent implements OnInit, OnDestroy {\r\n  answerState: AnswerState;\r\n  formState: FormState;\r\n  noteState: NoteState;\r\n\r\n  subs: Subscription[] = [];\r\n\r\n  // exampleExtra: AnswerExtra = {\r\n  //   dataUltimeiModificari: new Date(),\r\n  //   esteZonaUrbana: false,\r\n  //   oraSosirii: new Date(),\r\n  //   oraPlecarii: new Date(),\r\n  //   presedinteBesvesteFemeie: false\r\n  // }\r\n\r\n\r\n  hasError() {\r\n    return !this.answerState ||  this.answerState.selectedError;\r\n    // || !this.noteState || this.noteState.error\r\n    // || this.answerState.answerExtraError\r\n  }\r\n  isLoading() {\r\n    return !this.answerState || !this.noteState || this.answerState.selectedLoading || this.noteState.loading;\r\n    // || this.answerState.answerExtraLoading\r\n  }\r\n\r\n  formNotes(formId: number) {\r\n    if (!this.noteState || this.noteState.loading || this.noteState.error || !this.noteState.notes.length) {\r\n      return [];\r\n    }\r\n    return this.noteState.notes.filter(note => note.formId === formId);\r\n  }\r\n\r\n  formAnswers(): CompletedQuestion[] {\r\n    if (!this.answerState || !this.answerState.selectedAnswer) {\r\n      return [];\r\n    }\r\n    return this.answerState.selectedAnswer.filter(value => value.formCode);\r\n  }\r\n\r\n  constructor(private store: Store<AppState>) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.subs = [\r\n      this.store.select(s => s.answer).subscribe(s => this.answerState = s),\r\n      this.store.select(s => s.form).subscribe(s => {\r\n        this.formState = s;\r\n        if (s.items.length > 0) {\r\n          this.onTabSelected(s.items[0]);\r\n        }\r\n      }),\r\n      this.store.select(s => s.note).subscribe(s => this.noteState = s)\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    _.map(this.subs, sub => sub.unsubscribe());\r\n  }\r\n\r\n  retry() {\r\n    this.store.dispatch(new LoadAnswerDetailsAction(this.answerState.observerId, this.answerState.sectionId));\r\n  }\r\n\r\n  onTabSelected(form: FormDetails) {\r\n    // if the form is already loaded don't launch another action\r\n    if (this.formState.fullyLoaded[form.id]) {\r\n      return ;\r\n    }\r\n\r\n    this.store.dispatch(new FullyLoadFormAction(form.id));\r\n  }\r\n\r\n  getDataForForm(form: FormDetails): Form {\r\n    const fullyLoaded = this.formState.fullyLoaded[form.id];\r\n    return fullyLoaded ? fullyLoaded : Form.fromMetaData(form);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./answer-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"hasError()\">\r\n  <app-error-indicator (retry)=\"retry()\">\r\n  </app-error-indicator>\r\n</div>\r\n<div *ngIf=\"!hasError()\">\r\n  <div *ngIf=\"isLoading()\">\r\n    <app-loading-indicator></app-loading-indicator>\r\n  </div>\r\n  <div *ngIf=\"!isLoading()\" class=\"panel panel-default\">\r\n    <div class=\"panel-body\">\r\n      <div *ngIf=\"formState?.items && answerState?.selectedAnswer?.length\">\r\n        <app-answer-extra-questions *ngIf=\"!answerState.answerExtraError\" [answerExtra]=\"answerState?.answerExtra\">\r\n        </app-answer-extra-questions>\r\n        <tabset>\r\n          <tab *ngFor=\"let form of formState.items\" (selectTab)=\"onTabSelected(form)\">\r\n            <ng-template tabHeading>{{form.description}}</ng-template>\r\n            <app-answer-form-list [notes]=\"formNotes(form.id)\" [form]=\"getDataForForm(form)\"\r\n                                  [completedQuestions]=\"formAnswers()\">\r\n            </app-answer-form-list>\r\n          </tab>\r\n        </tabset>\r\n      </div>\r\n      <div *ngIf=\"!(formState?.items && answerState?.selectedAnswer?.length)\">\r\n        {{'NOTHING_SELECTED' | translate}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AnswerExtraQuestionsComponent",
            "id": "component-AnswerExtraQuestionsComponent-d6f47e11d739f3b679ff7ded6dcf36a6",
            "file": "src/app/components/answer/answer-extra-questions/answer-extra-questions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-answer-extra-questions",
            "styleUrls": [
                "./answer-extra-questions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./answer-extra-questions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "answerExtra",
                    "line": 11,
                    "type": "AnswerExtra"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AnswerExtra } from '../../../models/answer.extra.model';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\n@Component({\r\n    selector: 'app-answer-extra-questions',\r\n    templateUrl: './answer-extra-questions.component.html',\r\n    styleUrls: ['./answer-extra-questions.component.scss']\r\n})\r\nexport class AnswerExtraQuestionsComponent implements OnInit{\r\n\r\n    @Input()\r\n    answerExtra: AnswerExtra;\r\n    ngOnInit(){\r\n\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container{\r\n    font-size: 16px;\r\n    margin: 0 0 20px 0;\r\n    i{\r\n        font-size:20px;\r\n        position: relative;\r\n        margin-left:5px;\r\n        top:2px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./answer-extra-questions.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"comp-container\">\r\n  <div *ngIf=\"answerExtra\"\r\n    class=\"col-md-3-3\">\r\n    <div class=\"\">\r\n      <div *ngIf=\"answerExtra.observerArrivalTime\"\r\n        class=\"col-md-1-2\">\r\n        {{'ARRIVAL_TIME' | translate}}: {{answerExtra.observerArrivalTime | date:'shortTime'}}\r\n      </div>\r\n      <div *ngIf=\"answerExtra.observerLeaveTime\"\r\n        class=\"col-md-1-2\">\r\n        {{'DEPARTURE_TIME' | translate}}: {{answerExtra.observerLeaveTime | date:'shortTime'}}\r\n      </div>\r\n    </div>\r\n    <div class=\"frow\">\r\n      <div class=\"col-md-1-2\">\r\n        {{'IS_URBAN_AREA' | translate}}:\r\n        <i class=\"fa\"\r\n          [class.fa-square]=\"!answerExtra.urbanArea\"\r\n          [class.fa-check-square]=\"answerExtra.urbanArea\"\r\n          aria-hidden=\"true\"></i>\r\n      </div>\r\n      <div class=\"col-md-1-2\">\r\n        {{'IS_PRESIDENT_WOMAN' | translate}}:\r\n        <i class=\"fa\"\r\n          [class.fa-square]=\"!answerExtra.isPollingStationPresidentFemale\"\r\n          [class.fa-check-square]=\"answerExtra.isPollingStationPresidentFemale\"\r\n          aria-hidden=\"true\"></i>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AnswerFormListComponent",
            "id": "component-AnswerFormListComponent-579412bbd7c3c4b0c1f47d50b8efbedd",
            "file": "src/app/components/answer/answer-form-list/answer-form-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-answer-form-list",
            "styleUrls": [
                "./answer-form-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./answer-form-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "completedQuestions",
                    "line": 20,
                    "type": "CompletedQuestion[]"
                },
                {
                    "name": "form",
                    "line": 17,
                    "type": "Form"
                },
                {
                    "name": "notes",
                    "line": 23,
                    "type": "Note[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "answersForQuestion",
                    "args": [
                        {
                            "name": "question",
                            "type": "BaseQuestion"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "question",
                            "type": "BaseQuestion",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "notesForQuestion",
                    "args": [
                        {
                            "name": "question",
                            "type": "BaseQuestion"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "question",
                            "type": "BaseQuestion",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Note} from '../../../models/note.model';\r\nimport {BaseQuestion} from '../../../models/base.question.model';\r\nimport {CompletedQuestion} from '../../../models/completed.question.model';\r\nimport {Component, Input, OnInit} from '@angular/core';\r\nimport * as _ from 'lodash';\r\nimport {FormDetails} from '../../../models/form.info.model';\r\nimport {Form} from '../../../models/form.model';\r\n\r\n@Component({\r\n  selector: 'app-answer-form-list',\r\n  templateUrl: './answer-form-list.component.html',\r\n  styleUrls: ['./answer-form-list.component.scss']\r\n})\r\nexport class AnswerFormListComponent implements OnInit {\r\n\r\n  @Input()\r\n  form: Form;\r\n\r\n  @Input()\r\n  completedQuestions: CompletedQuestion[];\r\n\r\n  @Input()\r\n  notes: Note[];\r\n\r\n  answersForQuestion(question: BaseQuestion) {\r\n    return _.find(this.completedQuestions, value => value.id === question.id);\r\n  }\r\n  notesForQuestion(question: BaseQuestion) {\r\n    if (!this.notes || !this.notes.length) {\r\n      return undefined;\r\n    }\r\n    return this.notes.filter(note => note.questionId === question.id);\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./answer-form-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngFor=\"let section of form.formSections\">\r\n    <h4>{{section.description}}</h4>\r\n    <div class=\"questions frow gutters column-start\" style=\"margin-left:5px\">\r\n        <div *ngFor=\"let question of section.questions;let isLast = last\" style=\"margin-top:15px;width:100%\">\r\n            <app-categorical-question [notes]=\"notesForQuestion(question)\" [question]=\"question\" [completedAnswers]=\"answersForQuestion(question)?.answers\">\r\n            </app-categorical-question>\r\n            <hr *ngIf=\"!isLast\"/>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "AnswerListComponent",
            "id": "component-AnswerListComponent-8a631b23f9496f5296c64bbad7b8fe3d",
            "file": "src/app/components/answer/answers-list/answer-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-answer-list",
            "styleUrls": [
                "./answer-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./answer-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "answerState",
                    "line": 12,
                    "type": "AnswerState"
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChanged",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 15,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "reload",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "answerLinkPrefix",
                    "args": [],
                    "optional": false,
                    "returnType": "\"/urgents/details\" | \"/answers/details\"",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "answerList",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "pageChangedEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AnswerThread } from '../../../models/answer.thread.model';\r\nimport { AnswerState } from '../../../store/answer/answer.reducer';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n@Component({\r\n  selector: 'app-answer-list',\r\n  templateUrl: './answer-list.component.html',\r\n  styleUrls: ['./answer-list.component.scss']\r\n})\r\nexport class AnswerListComponent implements OnInit {\r\n\r\n  @Input('answerState')\r\n  state: AnswerState;\r\n\r\n  @Output()\r\n  pageChanged: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @Output()\r\n  reload: EventEmitter<{}> = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  retry() {\r\n    this.reload.emit();\r\n  }\r\n  answerLinkPrefix(){\r\n    return this.state.urgent ? '/urgents/details' : '/answers/details';\r\n  }\r\n  get answers() {\r\n    const start = this.state.page * this.state.pageSize,\r\n      end = start + this.state.pageSize;\r\n    return this.state.threads.slice(start, end);\r\n  }\r\n\r\n  answerList(){\r\n    const startPage = this.state.page - 1,\r\n      pageSize = this.state.pageSize,\r\n      startIndex = startPage * pageSize,\r\n      endIndex = startIndex + pageSize;\r\n\r\n    return this.state.threads.slice(startIndex, endIndex);\r\n  }\r\n\r\n  pageChangedEvent(event){\r\n    this.pageChanged.emit(event);\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~variables.scss';\r\n.card{\r\n    -webkit-box-shadow: 0px 2px 0px 0px rgba(194,194,194,0.75);\r\n    -moz-box-shadow: 0px 2px 0px 0px rgba(194,194,194,0.75);\r\n    box-shadow: 0px 2px 0px 0px rgba(194,194,194,0.75);\r\n}\r\n.panel {\r\n  .panel-body {\r\n    padding: 0;\r\n  }\r\n  width: 100%;\r\n  a {\r\n    display: block;\r\n    padding: 15px;\r\n    &.active {\r\n      background: $color-primary;\r\n    }\r\n  }\r\n  &:last-of-type {\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./answer-list.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "answers": {
                    "name": "answers",
                    "getSignature": {
                        "name": "answers",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<div *ngIf=\"!state.threadsError\">\r\n    <div *ngIf=\"!state.threadsLoading\">\r\n        <div *ngFor=\"let answer of answerList()\" class=\"panel panel-default\">\r\n          <div class=\"panel-body\">\r\n            <a [routerLink]=\"[answerLinkPrefix(),answer.idObserver, answer.idPollingStation]\"\r\n               routerLinkActive=\"active\">\r\n\r\n                <h4>{{'STATION' | translate}}: {{answer.pollingStationName}}</h4>\r\n                <h6>{{answer.observerName}}</h6>\r\n\r\n            </a>\r\n          </div>\r\n        </div>\r\n\r\n        <app-pagination [page]=\"state.page\" [pageSize]=\"state.pageSize\" [totalItems]=\"state.totalItems\" [nextEnabled]=\"!state.threadsLoading\"\r\n            (pageChanged)=\"pageChangedEvent($event)\"></app-pagination>\r\n    </div>\r\n    <div *ngIf=\"state.threadsLoading\" class=\"col-md-offset-5 col-md-1\">\r\n        <app-loading-indicator></app-loading-indicator>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"state.threadsError\">\r\n    <app-error-indicator (retry)=\"retry()\"></app-error-indicator>\r\n</div>\r\n"
        },
        {
            "name": "AnswerNoteComponent",
            "id": "component-AnswerNoteComponent-24bb356a9a1b1bd1c78f66f596d7d9ed",
            "file": "src/app/components/answer/answer-note/answer-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-answer-note",
            "styleUrls": [
                "./answer-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./answer-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "note",
                    "line": 14,
                    "type": "Note"
                },
                {
                    "name": "question",
                    "line": 17,
                    "type": "BaseQuestion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { BaseQuestion } from '../../../models/base.question.model';\r\nimport { Note } from '../../../models/note.model';\r\n\r\nimport { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-answer-note',\r\n  templateUrl: './answer-note.component.html',\r\n  styleUrls: ['./answer-note.component.scss']\r\n})\r\nexport class AnswerNoteComponent implements OnInit {\r\n\r\n  @Input()\r\n  note: Note;\r\n\r\n  @Input()\r\n  question: BaseQuestion;\r\n\r\n\r\n  get canShow(){\r\n    return this.note && this.question;\r\n  }\r\n\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clear {\r\n    clear:both;\r\n}\r\n.content-container{\r\n    .note-image{\r\n        max-width:300px;\r\n        margin:10px;\r\n        float:right;\r\n    }\r\n    .note-text{\r\n        clear:right;\r\n        float:left\r\n    }\r\n}\r\n",
                    "styleUrl": "./answer-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "canShow": {
                    "name": "canShow",
                    "getSignature": {
                        "name": "canShow",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "templateData": "<div *ngIf=\"canShow\">\r\n    <div class=\"content-container\">\r\n        <div class=\"note-text\">\r\n            <p>\r\n                {{note.text}}\r\n            </p>\r\n        </div>\r\n        <img *ngIf=\"note.attachmentPath\" class=\"note-image\" src=\"{{note.attachmentPath}}\" />\r\n        <!--<img class=\"note-image\" src=\"https://drscdn.500px.org/photo/57559144/m%3D2048/cc4997810dbb80e66665133c33206d11\" />-->\r\n    </div>\r\n    <div class=\"clear\">\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6b68b22d4f3a5a7a66fd28a28765ce92",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "langIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "languages",
                    "defaultValue": "['en', 'ro']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import 'rxjs/Rx';\r\nimport { Component, NgZone } from '@angular/core';\r\nimport {TranslateService} from '@ngx-translate/core';\r\nimport * as _ from 'lodash';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  public languages: string[] = ['en', 'ro'];\r\n  public langIndex = 0;\r\n  constructor(translate: TranslateService, zone: NgZone) {\r\n    const lang = localStorage.getItem('language');\r\n    if (lang) {\r\n      this.langIndex = this.languages.findIndex(x => x === lang);\r\n    } else {\r\n      localStorage.setItem('language', 'en');\r\n    }\r\n    translate.setDefaultLang(lang || 'en');\r\n    translate.use(lang || 'en');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header{\r\n    margin-bottom: 25px;\r\n}\r\n.layout-container {\r\n    margin-top:20px;\r\n  color: #fbd844;\r\n  color: #5e288d;\r\n  color: #fd0001;\r\n  color: #ddd2e7;\r\n  color: #7b8184;\r\n}\r\n\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"frow\">\r\n\t<div class=\"header\">\r\n\t\t<app-header>\r\n\t\t</app-header>\r\n\t</div>\r\n\t<div class=\"content\">\r\n\t\t<router-outlet></router-outlet>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CategoricalQuestionComponent",
            "id": "component-CategoricalQuestionComponent-14d60fa5e5f9973ea0d7411cb75c9030",
            "file": "src/app/components/answer/categorical-question/categorical-question.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-categorical-question",
            "styleUrls": [
                "./categorical-question.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./categorical-question.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "completedAnswers",
                    "line": 20,
                    "type": "[]"
                },
                {
                    "name": "notes",
                    "line": 34,
                    "type": "Note[]"
                },
                {
                    "name": "question",
                    "line": 17,
                    "type": "FormQuestion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "completedAnswers",
                    "defaultValue": "{}",
                    "type": "_.Dictionary<CompletedAnswer>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showNotes",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "answerTextValue",
                    "args": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isChecked",
                    "args": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFlaggedAnswer",
                    "args": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTextAnswer",
                    "args": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "answer",
                            "type": "BaseAnswer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "validateSingleQuestion",
                    "args": [
                        {
                            "name": "answers",
                            "type": "CompletedAnswer[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "answers",
                            "type": "CompletedAnswer[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTextQuestion",
                    "args": [
                        {
                            "name": "answers",
                            "type": "CompletedAnswer[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "answers",
                            "type": "CompletedAnswer[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {environment} from '../../../../environments/environment';\r\nimport {Note} from '../../../models/note.model';\r\nimport {BaseAnswer} from '../../../models/base.answer.model';\r\nimport {CompletedAnswer} from '../../../models/completed.answer.model';\r\nimport {FormQuestion} from '../../../models/form.question.model';\r\n\r\nimport {keyBy, reject, some, values} from 'lodash';\r\nimport {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-categorical-question',\r\n  templateUrl: './categorical-question.component.html',\r\n  styleUrls: ['./categorical-question.component.scss']\r\n})\r\nexport class CategoricalQuestionComponent implements OnInit {\r\n\r\n  @Input() question: FormQuestion;\r\n\r\n  @Input('completedAnswers')\r\n  set inputCompletedAnswers(value: CompletedAnswer[]) {\r\n    if (value && value.length) {\r\n      if (!environment.production) {\r\n        this.validateSingleQuestion(value);\r\n        this.validateTextQuestion(value);\r\n      }\r\n      this.completedAnswers = keyBy(value, v => v.idOption);\r\n    } else {\r\n      this.completedAnswers = undefined;\r\n    }\r\n  }\r\n  completedAnswers: _.Dictionary<CompletedAnswer> = {};\r\n\r\n  @Input()\r\n  notes: Note[];\r\n\r\n  showNotes = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n\r\n\r\n\r\n  validateSingleQuestion(answers: CompletedAnswer[]) {\r\n    try {\r\n      if (this.isSingle && answers && answers.length > 1) {\r\n        console.log(`Multiple answers on question with id ${this.question.id}`);\r\n      }\r\n    } catch (ex) { }\r\n  }\r\n  validateTextQuestion(answers: CompletedAnswer[]) {\r\n    try {\r\n      if (this.isTextQuestion && answers && reject(answers, a => a.isFreeText || !!a.value).length > 1) {\r\n        console.log(`Multiple text answers on question with id ${this.question.id}`);\r\n      }\r\n    } catch (ex) { }\r\n\r\n  }\r\n  get hasNotes() {\r\n    return this.notes && this.notes.length;\r\n  }\r\n  get isFlagged() {\r\n    return some(values(this.completedAnswers), a => a.flagged);\r\n  }\r\n\r\n  get isTextQuestion() {\r\n    return this.question.questionType === 2 || this.question.questionType === 3;\r\n  }\r\n  get isSingle() {\r\n    return this.question.questionType === 0 || this.question.questionType === 4;\r\n  }\r\n\r\n  isChecked(answer: BaseAnswer) {\r\n    return this.completedAnswers && this.completedAnswers[answer.idOption];\r\n  }\r\n  isTextAnswer(answer: BaseAnswer) {\r\n    return this.isTextQuestion && answer.isFreeText;\r\n  }\r\n\r\n  isFlaggedAnswer(answer: BaseAnswer) {\r\n    return some(values(this.completedAnswers), a => a.flagged && a.idOption === answer.idOption);\r\n  }\r\n\r\n  answerTextValue(answer: BaseAnswer) {\r\n    return this.completedAnswers && this.completedAnswers[answer.idOption] && this.completedAnswers[answer.idOption].value;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".question-answer {\r\n  display: inline;\r\n}\r\n.question-checkbox {\r\n  margin: 0 5px 0 10px;\r\n  display: inline;\r\n}\r\n.question-wrapper {\r\n  padding: 10px;\r\n  margin-bottom: 0;\r\n  &.flagged-question {\r\n     border: 1px solid red;\r\n  }\r\n}\r\n.flagged-question{\r\n    .question-title {\r\n            color:red\r\n    }\r\n}\r\n.flagged-answer{\r\n    .question-answer {\r\n            color:red\r\n    }\r\n}\r\n.show-note-button-wrapper {\r\n  text-align: right;\r\n}\r\n",
                    "styleUrl": "./categorical-question.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 36
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "inputCompletedAnswers": {
                    "name": "inputCompletedAnswers",
                    "setSignature": {
                        "name": "inputCompletedAnswers",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "hasNotes": {
                    "name": "hasNotes",
                    "getSignature": {
                        "name": "hasNotes",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "isFlagged": {
                    "name": "isFlagged",
                    "getSignature": {
                        "name": "isFlagged",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "isTextQuestion": {
                    "name": "isTextQuestion",
                    "getSignature": {
                        "name": "isTextQuestion",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "isSingle": {
                    "name": "isSingle",
                    "getSignature": {
                        "name": "isSingle",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            },
            "templateData": "<div *ngIf=\"question\" class=\"form-group question-wrapper\" [ngClass]=\"{'flagged-question':isFlagged}\">\r\n  <div class=\"frow row-start\">\r\n    <p class=\"col-md-1-1\" class=\"question-title\" font-size=\"24px\">\r\n      <strong>\r\n        {{question.code}}:\r\n        {{question.text}} ?\r\n      </strong></p>\r\n  </div>\r\n  <div class=\"question-answers\">\r\n    <div class=\"frow row-start\" *ngFor=\"let answer of question.optionsToQuestions\" style=\"margin-left:10px; margin-top:3px\" [ngClass]=\"{'flagged-answer':isFlaggedAnswer(answer)}\">\r\n      <div class=\"question-checkbox\">\r\n        <i class=\"fa\" style=\"font-size:16px\" [ngClass]=\"{'fa-square': !isChecked(answer), 'fa-check-square': isChecked(answer)}\"\r\n          aria-hidden=\"true\"></i>\r\n      </div>\r\n      <div class=\"question-answer\">\r\n        {{answer.text}}\r\n      </div>\r\n      <div style=\"margin-left:10px\">\r\n        <input style=\"display:inline-block\" type=\"text\" readonly *ngIf=\"isTextAnswer(answer) && isChecked(answer)\" [value]=\"answerTextValue(answer)\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"show-note-button-wrapper\">\r\n    <button *ngIf=\"notes && notes.length\" (click)=\"showNotes = !showNotes\"\r\n            class=\"show-note-button btn\"\r\n            [ngClass]=\"{'btn-success': !isFlagged, 'btn-danger': isFlagged}\"\r\n    >\r\n      {{(showNotes ? 'HIDE': 'SHOW') | translate}} {{(notes.length === 1 ? 'NOTE' : 'NOTES') | translate}}\r\n    </button>\r\n  </div>\r\n\r\n  <hr *ngIf=\"notes && notes.length && showNotes\" />\r\n  <div [collapse]=\"!showNotes\" class=\"frow\" *ngIf=\"notes && notes.length\">\r\n    <div class=\"col-md-1-1\" *ngFor=\"let note of notes; let isLast = last\">\r\n      <app-answer-note [question]=\"question\" [note]=\"note\">\r\n      </app-answer-note>\r\n      <hr *ngIf=\"!isLast\" />\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ErrorIndicatorComponent",
            "id": "component-ErrorIndicatorComponent-590002f868069509b3137695376ab78f",
            "file": "src/app/shared/error-indicator/error-indicator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-indicator",
            "styleUrls": [
                "./error-indicator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-indicator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "retry",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-error-indicator',\r\n  templateUrl: './error-indicator.component.html',\r\n  styleUrls: ['./error-indicator.component.scss']\r\n})\r\nexport class ErrorIndicatorComponent implements OnInit {\r\n\r\n  @Output()\r\n  retry = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "i{\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./error-indicator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<i class=\"fa fa-refresh\" (click)=\"retry.emit()\" style=\"font-size:24px\" aria-hidden=\"true\"></i>"
        },
        {
            "name": "FormCreateComponent",
            "id": "component-FormCreateComponent-3876659219a783f953c9164f476c74c8",
            "file": "src/app/components/forms/form-create/form-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-create",
            "styleUrls": [
                "./form-create.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "FORM_ID_URL_PARAM",
                    "defaultValue": "'formId'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "formDataSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "formDetailsFormGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "addFormSection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121
                },
                {
                    "name": "handleLoadedFormData",
                    "args": [
                        {
                            "name": "formId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "formId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormGroupWithValues",
                    "args": [
                        {
                            "name": "formGroupGenerator",
                            "type": "function",
                            "function": [
                                {
                                    "name": "formBuilder",
                                    "type": "FormBuilder"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroupGenerator",
                            "type": "function",
                            "function": [
                                {
                                    "name": "formBuilder",
                                    "type": "FormBuilder"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initOptionFormGroupWithValues",
                    "args": [
                        {
                            "name": "formOption",
                            "type": "BaseAnswer"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "formOption",
                            "type": "BaseAnswer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initQuestionFormGroupWithValues",
                    "args": [
                        {
                            "name": "formQuestion",
                            "type": "FormQuestion"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "formQuestion",
                            "type": "FormQuestion",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSectionFormGroupWithValues",
                    "args": [
                        {
                            "name": "formSection",
                            "type": "FormSection"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "formSection",
                            "type": "FormSection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFormForEditing",
                    "args": [
                        {
                            "name": "formId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "formId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "onBackPressed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onReorder",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<FormSection[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<FormSection[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSectionDelete",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchReactiveForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "Form"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "Form",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveAndPublishForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130
                },
                {
                    "name": "saveForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {Form} from '../../../models/form.model';\r\nimport {Location} from '@angular/common';\r\nimport {FormSection} from '../../../models/form.section.model';\r\nimport {AppState} from '../../../store/store.module';\r\nimport {Store} from '@ngrx/store';\r\nimport {FormUploadAction, FormUploadPublishAction, FullyLoadFormAction} from '../../../store/form/form.actions';\r\nimport {Subscription} from 'rxjs';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {moveItemInFormArray} from '../../utils';\r\nimport {initFormFormGroup, initOptionFormGroup, initQuestionFormGroup, initSectionFormGroup} from '../form-groups-builder';\r\nimport {FormQuestion} from '../../../models/form.question.model';\r\nimport {BaseAnswer} from '../../../models/base.answer.model';\r\n\r\n@Component({\r\n  selector: 'app-form-create',\r\n  templateUrl: './form-create.component.html',\r\n  styleUrls: ['./form-create.component.scss']\r\n})\r\nexport class FormCreateComponent implements OnInit, OnDestroy {\r\n\r\n  readonly FORM_ID_URL_PARAM = 'formId';\r\n\r\n  title: string;\r\n\r\n  formDetailsFormGroup: FormGroup;\r\n\r\n  formDataSubscription: Subscription;\r\n\r\n  constructor(private location: Location,\r\n              private store: Store<AppState>,\r\n              private activatedRoute: ActivatedRoute,\r\n              private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.formDetailsFormGroup = initFormFormGroup(this.formBuilder);\r\n    this.title = 'Adauga formular nou';\r\n\r\n    this.activatedRoute.paramMap.subscribe(params => {\r\n      const hasFormId = params.has(this.FORM_ID_URL_PARAM);\r\n      if (!hasFormId) {\r\n        return ;\r\n      }\r\n\r\n      const targetFormId = +params.get(this.FORM_ID_URL_PARAM);\r\n      this.loadFormForEditing(targetFormId);\r\n      this.handleLoadedFormData(targetFormId);\r\n    });\r\n  }\r\n\r\n  get sectionsArray() {\r\n    return this.formDetailsFormGroup.get('formSections') as FormArray;\r\n  }\r\n\r\n  get sectionFormGroupsArray(): FormGroup[] {\r\n    return this.sectionsArray.controls as FormGroup[];\r\n  }\r\n\r\n  private initSectionFormGroupWithValues(formSection: FormSection) {\r\n    return this.initFormGroupWithValues(initSectionFormGroup, formSection);\r\n  }\r\n\r\n  private initQuestionFormGroupWithValues(formQuestion: FormQuestion) {\r\n    return this.initFormGroupWithValues(initQuestionFormGroup, formQuestion);\r\n  }\r\n\r\n  private initOptionFormGroupWithValues(formOption: BaseAnswer) {\r\n    return this.initFormGroupWithValues(initOptionFormGroup, formOption);\r\n  }\r\n\r\n  private initFormGroupWithValues(formGroupGenerator: (formBuilder: FormBuilder) => FormGroup, value: any) {\r\n    const formGroup = formGroupGenerator(this.formBuilder);\r\n    formGroup.patchValue(value);\r\n    return formGroup;\r\n  }\r\n\r\n  private loadFormForEditing(formId: number) {\r\n    this.store.dispatch(new FullyLoadFormAction(formId));\r\n  }\r\n\r\n  private handleLoadedFormData(formId: number) {\r\n    this.formDataSubscription = this.store\r\n      .select(state => state.form.fullyLoaded)\r\n      .subscribe(loadedForms => {\r\n        const correspondingForm = loadedForms[formId];\r\n        if (!correspondingForm) {\r\n          return ;\r\n        }\r\n\r\n        this.patchReactiveForm(correspondingForm);\r\n      });\r\n  }\r\n\r\n  private patchReactiveForm(form: Form) {\r\n    this.formDetailsFormGroup.patchValue(form);\r\n    form.formSections.forEach(s => {\r\n      const sectionFormGroup = this.initSectionFormGroupWithValues(s);\r\n      s.questions.forEach(q => {\r\n        const questionFormGroup = this.initQuestionFormGroupWithValues(q);\r\n\r\n        q.optionsToQuestions.forEach(o => {\r\n          const optionFormGroup = this.initOptionFormGroupWithValues(o);\r\n\r\n          const optionsArray = questionFormGroup.controls.optionsToQuestions as FormArray;\r\n          optionsArray.push(optionFormGroup);\r\n        });\r\n\r\n        const questionsArray = sectionFormGroup.controls.questions as FormArray;\r\n        questionsArray.push(questionFormGroup);\r\n      });\r\n      this.sectionsArray.push(sectionFormGroup);\r\n    });\r\n  }\r\n\r\n  public onBackPressed() {\r\n    this.location.back();\r\n  }\r\n\r\n  addFormSection() {\r\n    this.sectionsArray.push(initSectionFormGroup(this.formBuilder));\r\n  }\r\n\r\n  saveForm() {\r\n    const form = this.formDetailsFormGroup.value as Form;\r\n    this.store.dispatch(new FormUploadAction(form));\r\n  }\r\n\r\n  saveAndPublishForm() {\r\n    const form = this.formDetailsFormGroup.value as Form;\r\n    this.store.dispatch(new FormUploadPublishAction(form));\r\n  }\r\n\r\n  onSectionDelete(index: number) {\r\n    this.sectionsArray.removeAt(index);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.formDataSubscription) {\r\n      this.formDataSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  onReorder(event: CdkDragDrop<FormSection[]>) {\r\n    moveItemInFormArray(this.sectionsArray, event.previousIndex, event.currentIndex);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-create {\r\n  .back-button {\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    margin-bottom: 1.2em;\r\n  }\r\n\r\n  .add-section-button {\r\n    color: rebeccapurple;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .form-labeled-field {\r\n    margin-bottom: 10px;\r\n\r\n    &-checkbox {\r\n      @extend .form-labeled-field;\r\n\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: space-between;\r\n\r\n      .checkbox-label {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n      }\r\n\r\n      .checkbox-field {\r\n        flex-basis: 16px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .header-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-bottom: 20px;\r\n\r\n    .header-text {\r\n      margin: auto 0;\r\n      font-size: larger;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./form-create.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "sectionsArray": {
                    "name": "sectionsArray",
                    "getSignature": {
                        "name": "sectionsArray",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                },
                "sectionFormGroupsArray": {
                    "name": "sectionFormGroupsArray",
                    "getSignature": {
                        "name": "sectionFormGroupsArray",
                        "type": "[]",
                        "returnType": "FormGroup[]",
                        "line": 57
                    }
                }
            },
            "templateData": "<div class=\"container-fluid form-create\">\r\n  <div class=\"back-button\" (click)=\"onBackPressed()\">&#8592; {{ 'BACK' | translate}}</div>\r\n\r\n  <div class=\"header-row\">\r\n    <span class=\"header-text col-md-2\">{{'FORM_EDIT' | translate }}</span>\r\n    <div class=\"buttons-pane\">\r\n      <button class=\"btn-secondary btn\" (click)=\"saveForm()\">{{'FORM_SAVE_DRAFT' | translate}}</button>\r\n      <button class=\"btn-primary btn\" (click)=\"saveAndPublishForm()\">{{'FORM_PUBLISH' | translate}}</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"panel panel-default\">\r\n    <div class=\"panel-body\">\r\n      <form [formGroup]=\"formDetailsFormGroup\">\r\n        <div class=\"col-md-6\">\r\n          <div class=\"form-labeled-field\">\r\n            <div>\r\n              <span>{{'FORM_TITLE' | translate}}</span>\r\n            </div>\r\n            <div>\r\n              <input class=\"form-control\" formControlName=\"description\" placeholder=\"{{'FORM_TITLE_PLACEHOLDER' | translate}}\">\r\n            </div>\r\n          </div>\r\n          <div class=\"form-labeled-field\">\r\n            <div>\r\n              <span>{{'FORM_CODE' | translate}}</span>\r\n            </div>\r\n            <div>\r\n              <input class=\"form-control\" formControlName=\"code\" placeholder=\"{{'FORM_CODE_PLACEHOLDER' | translate}}\">\r\n            </div>\r\n          </div>\r\n          <div class=\"form-labeled-field-checkbox\">\r\n            <div class=\"checkbox-label\">\r\n              <span>{{'FORM_ONLY_DIASPORA' | translate}}</span>\r\n            </div>\r\n            <div class=\"checkbox-field\">\r\n              <input type=\"checkbox\" class=\"form-control\" formControlName=\"diaspora\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n  <!--      According to the design, this field should be here, but for now it has no correspondence in the model.-->\r\n\r\n  <!--        <div>-->\r\n  <!--          <span>{{'FORM_DESCRIPTION' | translate}}</span>-->\r\n  <!--        </div>-->\r\n  <!--        <div>-->\r\n  <!--          <textarea rows=\"4\" class=\"form-control\" [(ngModel)]=\"form.description\" placeholder=\"{{'FORM_DESCRIPTION_PLACEHOLDER' | translate}}\"></textarea>-->\r\n  <!--        </div>-->\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"section-list\" cdkDropList (cdkDropListDropped)=\"onReorder($event)\">\r\n    <div *ngFor=\"let section of sectionFormGroupsArray; let i = index\" cdkDrag class=\"section\">\r\n      <app-section [sectionFormGroup]=\"section\"\r\n                   (sectionDeleteEventEmitter)=\"onSectionDelete(i)\">\r\n      </app-section>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"add-section-button\" (click)=\"addFormSection()\">+ {{'SECTION_ADD' | translate}}</div>\r\n</div>\r\n"
        },
        {
            "name": "FormsComponent",
            "id": "component-FormsComponent-2ae743f0a896d5f58e6fd092c3105e17",
            "file": "src/app/components/forms/forms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forms",
            "styleUrls": [
                "./forms.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forms.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formsList",
                    "type": "FormDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "formsSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "totalCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFormsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadForms",
                    "args": [
                        {
                            "name": "pageNo",
                            "type": "number"
                        },
                        {
                            "name": "pageSize",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageNo",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "onReorder",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<FormDetails[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<FormDetails[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {FormDetails} from '../../models/form.info.model';\r\nimport {AppState} from '../../store/store.module';\r\nimport {select, Store} from '@ngrx/store';\r\nimport {map, take} from 'rxjs/operators';\r\nimport {Subscription} from 'rxjs';\r\nimport {FormState} from '../../store/form/form.reducer';\r\nimport {FormDeleteAction, FormLoadAction} from '../../store/form/form.actions';\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\nimport {cloneDeep} from 'lodash';\r\n\r\n@Component({\r\n  selector: 'app-forms',\r\n  templateUrl: './forms.component.html',\r\n  styleUrls: ['./forms.component.scss']\r\n})\r\nexport class FormsComponent implements OnInit, OnDestroy {\r\n  formsList: FormDetails[];\r\n  pageSize = 10;\r\n  totalCount = 0;\r\n  page = 1;\r\n\r\n  formsSubscription: Subscription;\r\n\r\n  constructor(private store: Store<AppState>) { }\r\n\r\n  ngOnInit() {\r\n    this.loadForms(1, this.pageSize);\r\n    this.handleFormsData();\r\n  }\r\n\r\n  private loadForms(pageNo: number, pageSize: number) {\r\n    this.store\r\n      .pipe(\r\n        select(s => s.form),\r\n        take(1),\r\n        map((storeItem: FormState) => new FormLoadAction())\r\n      )\r\n      .subscribe(action => this.store.dispatch(action));\r\n  }\r\n\r\n  private handleFormsData() {\r\n    this.formsSubscription = this.store\r\n      .select(state => state.form)\r\n      .subscribe(formState => {\r\n        this.formsList = cloneDeep(formState.items);\r\n        this.totalCount = this.formsList.length;\r\n      });\r\n  }\r\n\r\n  public deleteForm(form: FormDetails) {\r\n    this.store.dispatch(new FormDeleteAction(form.id));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.formsSubscription.unsubscribe();\r\n  }\r\n\r\n  onReorder(event: CdkDragDrop<FormDetails[]>) {\r\n    moveItemInArray(this.formsList, event.previousIndex, event.currentIndex);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".forms-component {\r\n  .footer-pagination {\r\n    margin: 8px auto;\r\n  }\r\n\r\n  .dropdown-item {\r\n    margin: 4px;\r\n  }\r\n\r\n  .header-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-bottom: 20px;\r\n\r\n    .header-text {\r\n      margin: auto 0;\r\n      font-size: larger;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./forms.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container-fluid forms-component\">\r\n\r\n  <div class=\"header-row\">\r\n    <span class=\"header-text col-md-2\">{{'FORMS' | translate }}</span>\r\n    <div class=\"buttons-pane\">\r\n      <button class=\"btn-primary btn\" [routerLink]=\"['/formulare/nou']\">+ {{'NEW_FORM' | translate}}</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"table-responsive\">\r\n    <table class=\"table align-items-center table-flush\">\r\n      <thead class=\"thead-light\">\r\n      <tr>\r\n        <th scope=\"col\" style=\"color: #3468EF;\">{{'INDEX' | translate}}</th>\r\n        <th scope=\"col\" style=\"color: #3468EF;\">{{'FORM_CODE' | translate}}</th>\r\n        <th scope=\"col\" style=\"color: #3468EF;\">{{'FORM_TITLE' | translate}}</th>\r\n        <th scope=\"col\" style=\"color: #3468EF;\">{{'DIASPORA' | translate}}</th>\r\n        <th scope=\"col\" style=\"color: #3468EF;\">{{'DRAFT' | translate}}</th>\r\n        <th scope=\"col\" style=\"color: #3468EF;\">{{'ACTION' | translate}}</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody cdkDropList (cdkDropListDropped)=\"onReorder($event)\">\r\n        <tr *ngFor=\"let form of formsList\" cdkDrag>\r\n          <td style=\"width: 5%;\">\r\n            {{ (page - 1) * pageSize + formsList.indexOf(form) + 1 }}\r\n          </td>\r\n          <td>\r\n            {{ form.code }}\r\n          </td>\r\n          <td class=\"col-md-6\">\r\n            {{ form.description }}\r\n          </td>\r\n          <td>\r\n            <img src=\"/assets/forms/diaspora-check.png\" *ngIf=\"form.diaspora\">\r\n          </td>\r\n          <td>\r\n            <img src=\"/assets/forms/diaspora-check.png\" *ngIf=\"form.draft\">\r\n          </td>\r\n          <td>\r\n            <div class=\"dropdown\">\r\n              <button class=\"btn btn-secondary\" type=\"button\" [routerLink]=\"[form.id]\">{{'EDIT' | translate}}</button>\r\n              <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                <img src=\"/assets/forms/down.png\">\r\n              </button>\r\n              <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                <a class=\"dropdown-item\" (click)=\"deleteForm(form)\">{{'DELETE' | translate}}</a>\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2421c9ae655a08e7a99c192b700eec57-1",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { environment } from '../../../environments/environment';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  get observerGuideUrl(){\r\n    return environment.observerGuideUrl;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~variables.scss';\r\n.navbar.navbar-default {\r\n  background: $color-primary;\r\n\r\n  &.navbar-custom {\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0;\r\n    border-top: 0;\r\n  }\r\n\r\n  .navbar-brand {\r\n    padding: 2px 40px 2px 25px;\r\n  }\r\n  .brand-logo {\r\n    height: 100%;\r\n  }\r\n\r\n  .navbar-nav {\r\n    li > a {\r\n      color: black;\r\n      text-transform: uppercase;\r\n      font-weight: bold;\r\n      min-width: 80px;\r\n      text-align: center;\r\n    }\r\n    li > a.active {\r\n      //background: #5e288d;\r\n      background: $color-secondary;\r\n      color: $color-white;\r\n    }\r\n    li:hover > a {\r\n      background: $color-secondary;\r\n      color: $color-white;\r\n    }\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "observerGuideUrl": {
                    "name": "observerGuideUrl",
                    "getSignature": {
                        "name": "observerGuideUrl",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<nav class=\"navbar navbar-default navbar-custom\">\r\n  <div class=\"container-fluid\">\r\n    <!-- Brand and toggle get grouped for better mobile display -->\r\n    <div class=\"navbar-header\">\r\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\"\r\n        data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\r\n        <span class=\"sr-only\">Toggle navigation</span>\r\n        <span class=\"icon-bar\"></span>\r\n        <span class=\"icon-bar\"></span>\r\n        <span class=\"icon-bar\"></span>\r\n      </button>\r\n      <a class=\"navbar-brand\" [routerLink]=\"['/']\">\r\n        <img src=\"../../../assets/vote_monitor.png\" class=\"brand-logo\" alt=\"\">\r\n      </a>\r\n    </div>\r\n\r\n    <!-- Collect the nav links, forms, and other content for toggling -->\r\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n      <ul class=\"nav navbar-nav\">\r\n        <li>\r\n          <a [routerLink]=\"['/urgents']\" routerLinkActive=\"active\">\r\n            {{'EMERGENCIES' | translate}}\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a [routerLink]=\"['/answers']\" routerLinkActive=\"active\">\r\n            {{'ANSWERS' | translate}}\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a [routerLink]=\"['/statistics']\" routerLinkActive=\"active\">\r\n            {{'STATISTICS' | translate}}\r\n          </a>\r\n        </li>\r\n         <li>\r\n          <a [routerLink]=\"['/observatori']\" routerLinkActive=\"active\">\r\n            {{'OBSERVERS' | translate}}\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a [href]=\"observerGuideUrl\" target=\"_blank\">\r\n            {{'OBSERVER_GUIDE' | translate}}\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a [routerLink]=\"['/formulare']\" routerLinkActive=\"active\">\r\n            {{'FORMS' | translate}}\r\n          </a>\r\n        </li>\r\n        <li>\r\n            <a [routerLink]=\"['/notifications']\" routerLinkActive=\"active\">\r\n              {{'NOTIFICATIONS' | translate}}\r\n            </a>\r\n          </li>\r\n      </ul>\r\n      <!--<ul class=\"nav navbar-nav navbar-right\">-->\r\n      <!--<li><a href=\"#\">Link</a></li>-->\r\n      <!--</ul>-->\r\n    </div><!-- /.navbar-collapse -->\r\n  </div><!-- /.container-fluid -->\r\n</nav>\r\n"
        },
        {
            "name": "IconToggleInputComponent",
            "id": "component-IconToggleInputComponent-a6e400cfa825a3a80ee0464b979ed43e",
            "file": "src/app/shared/icon-toggle-input/icon-toggle-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IconToggleInputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-icon-toggle-input",
            "styleUrls": [
                "./icon-toggle-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-toggle-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabledIcon",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "enabledIcon",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "value",
                    "defaultValue": "false",
                    "line": 18
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, forwardRef, Input} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-icon-toggle-input',\r\n  templateUrl: './icon-toggle-input.component.html',\r\n  styleUrls: ['./icon-toggle-input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => IconToggleInputComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class IconToggleInputComponent implements ControlValueAccessor {\r\n\r\n  @Input() value = false;\r\n\r\n  @Input() enabledIcon: string;\r\n  @Input() disabledIcon: string;\r\n\r\n  onChange = (value: boolean) => {};\r\n  onTouched = () => {};\r\n\r\n  constructor() { }\r\n\r\n  toggleValue() {\r\n    this.value = !this.value;\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  registerOnChange(fn: (value: boolean) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  writeValue(value: boolean): void {\r\n    this.value = value;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon-toggle-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div (click)=\"toggleValue()\">\r\n  <img [src]=\"disabledIcon\" *ngIf=\"!value\">\r\n  <img [src]=\"enabledIcon\" *ngIf=\"value\">\r\n</div>\r\n"
        },
        {
            "name": "LoadingIndicatorComponent",
            "id": "component-LoadingIndicatorComponent-9755c776bd7e288cc727f5b73588b61f",
            "file": "src/app/shared/loading-indicator/loading-indicator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-indicator",
            "styleUrls": [
                "./loading-indicator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-indicator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-indicator',\r\n  templateUrl: './loading-indicator.component.html',\r\n  styleUrls: ['./loading-indicator.component.scss']\r\n})\r\nexport class LoadingIndicatorComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-container {\r\n  background: rgba(196, 196, 196, 0.7);\r\n\r\n  i {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./loading-indicator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"loading-container\">\r\n  <i class=\"fa fa-circle-o-notch fa-spin\" style=\"font-size:24px\"></i>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-4e86d9bed03c8cdfdaa12a4b02b303b1",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "invalid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "tryLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Subscription } from 'rxjs';\r\nimport { TokenService } from '../../core/token/token.service';\r\nimport { Router } from '@angular/router';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Component({\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    private baseUrl: string;\r\n    constructor(private http: ApiService, private router: Router, private tokenService: TokenService) {\r\n        this.baseUrl = environment.apiUrl;\r\n    }\r\n\r\n    user: string;\r\n    password: string;\r\n\r\n    invalid: boolean;\r\n\r\n    loginSubscription: Subscription;\r\n\r\n    tryLogin() {\r\n        if (this.loginSubscription) {\r\n            this.loginSubscription.unsubscribe();\r\n        }\r\n        const authUrl: string = Location.joinWithSlash(this.baseUrl, '/api/v1/access/authorize');\r\n        this.loginSubscription = this.http.post<{access_token: string, expires_in: number}>(authUrl, {\r\n            user: this.user,\r\n            password: this.password\r\n        })\r\n            .subscribe(res => {\r\n                this.tokenService.token = res.access_token;\r\n                this.router.navigate(['/urgents']);\r\n            }, () => {\r\n                this.invalid = true;\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <h3>Login</h3>\r\n    <form (ngSubmit)=\"tryLogin()\" name=\"loginForm\">\r\n        <div class=\"form-group\">\r\n            <label for=\"user\">{{'PHONE_NUMBER' | translate}}</label>\r\n            <input [(ngModel)]=\"user\" type=\"text\" name=\"user\" class=\"form-control\" id=\"user\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input [(ngModel)]=\"password\" type=\"password\" name=\"user\" class=\"form-control\" id=\"password\">\r\n        </div>\r\n        <p *ngIf=\"invalid\" style=\"color:red\">\r\n            Credentials are invalid\r\n        </p>\r\n        <button type=\"submit\" class=\"btn btn-default\">Login</button>\r\n    </form>\r\n</div>\r\n"
        },
        {
            "name": "NotificationsComponent",
            "id": "component-NotificationsComponent-9cddf53fac6c75df233e1e8fd8e978f9",
            "file": "src/app/components/notifications/notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notifications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counties",
                    "defaultValue": "[]",
                    "type": "CountyPollingStationInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "countyDropdownSettings",
                    "defaultValue": "{}",
                    "type": "IDropdownSettings",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dropdownSettings",
                    "defaultValue": "{}",
                    "type": "IDropdownSettings",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "filteredObservers",
                    "defaultValue": "[]",
                    "type": "Observer[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "itemsShowLimit",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "notificationTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pollingStationFrom",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pollingStations",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pollingStationTo",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedCounties",
                    "defaultValue": "[]",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedObserversIds",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 162
                }
            ],
            "methodsClass": [
                {
                    "name": "createGlobalNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "GlobalNotificationModel",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "NotificationModel",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182
                },
                {
                    "name": "fillPollingStations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "notification",
                            "type": "NotificationModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "NotificationModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidGlobally",
                    "args": [
                        {
                            "name": "notification",
                            "type": "GlobalNotificationModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "GlobalNotificationModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidGloballyNoArg",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "isValidNoArg",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "onCountySelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onObserverSelect",
                    "args": [
                        {
                            "name": "selectedObserver",
                            "type": "Partial<Observer>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "selectedObserver",
                            "type": "Partial<Observer>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189
                },
                {
                    "name": "resetSelections",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148
                },
                {
                    "name": "searchForObservers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174
                },
                {
                    "name": "submitNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "submitNotificationGlobally",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { NotificationsService, CountyPollingStationInfo } from '../../services/notifications.service';\r\nimport { IDropdownSettings } from 'ng-multiselect-dropdown';\r\nimport {GlobalNotificationModel, NotificationModel} from '../../models/notification.model';\r\nimport { Observer } from '../../models/observer.model';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-notifications',\r\n  templateUrl: './notifications.component.html',\r\n  styleUrls: ['./notifications.component.scss']\r\n})\r\nexport class NotificationsComponent implements OnInit {\r\n  notificationTitle: string;\r\n  message: string;\r\n  counties: CountyPollingStationInfo[] = [];\r\n  pollingStations = [];\r\n  pollingStationFrom = [];\r\n  pollingStationTo = [];\r\n  selectedCounties: { code: string, name: string }[] = [];\r\n  dropdownSettings: IDropdownSettings = {};\r\n  countyDropdownSettings: IDropdownSettings = {};\r\n  itemsShowLimit = 10;\r\n  filteredObservers: Observer[] = [];\r\n\r\n  constructor(private notificationsService: NotificationsService,\r\n    private translate: TranslateService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.notificationsService.getCounties().subscribe(res => this.counties = res);\r\n\r\n    this.countyDropdownSettings = {\r\n      singleSelection: true,\r\n      idField: 'code',\r\n      textField: 'name',\r\n      itemsShowLimit: this.itemsShowLimit,\r\n      allowSearchFilter: true,\r\n      closeDropDownOnSelection: true\r\n    };\r\n    this.dropdownSettings = {\r\n      singleSelection: true,\r\n      itemsShowLimit: this.itemsShowLimit,\r\n      allowSearchFilter: true,\r\n      closeDropDownOnSelection: true\r\n    };\r\n  }\r\n\r\n  onCountySelect(item: any) {\r\n    this.resetSelections();\r\n    this.fillPollingStations();\r\n  }\r\n\r\n  submitNotification() {\r\n    // TODO: change channel and from\r\n    const notification: NotificationModel = this.createNotification();\r\n\r\n    if (this.isValid(notification)) {\r\n      const message = this.translate.instant(\"NOTIFICATION_SEND_CONFIRMATION\");\r\n      if (!confirm(message.replace('%d',this.selectedObserversIds.length))) {\r\n        return;\r\n      }\r\n      this.notificationsService.pushNotification(notification).subscribe(x => console.log(x));\r\n    } else {\r\n      alert('Not all fields have been completed');\r\n    }\r\n  }\r\n\r\n  submitNotificationGlobally() {\r\n    const notification: GlobalNotificationModel = this.createGlobalNotification();\r\n\r\n    if (this.isValidGlobally(notification)) {\r\n      this.notificationsService.pushNotificationGlobally(notification).subscribe(x => console.log(x));\r\n    } else {\r\n      alert('Not all fields have been completed');\r\n    }\r\n  }\r\n\r\n  isValidNoArg(): boolean {\r\n    return this.isValid(this.createNotification());\r\n  }\r\n\r\n  isValid(notification: NotificationModel): boolean {\r\n    if (!this.isValidGlobally(notification)) {\r\n      return false;\r\n    }\r\n\r\n    if (!notification.recipients || !(notification.recipients.length > 0)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  isValidGloballyNoArg(): boolean {\r\n    return this.isValidGlobally(this.createGlobalNotification());\r\n  }\r\n\r\n  isValidGlobally(notification: GlobalNotificationModel): boolean {\r\n    if (!notification.message || notification.message === '') {\r\n      return false;\r\n    }\r\n    if (!notification.title || notification.title === '') {\r\n      return false;\r\n    }\r\n    if (!notification.channel || notification.channel === '') {\r\n      return false;\r\n    }\r\n    if (!notification.from || notification.from === '') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private createNotification(): NotificationModel {\r\n    return {\r\n      channel: 'Firebase',\r\n      from: 'Monitorizare Vot',\r\n      message: this.message,\r\n      title: this.notificationTitle,\r\n      recipients: this.selectedObserversIds\r\n    };\r\n  }\r\n\r\n  private createGlobalNotification(): GlobalNotificationModel {\r\n    return {\r\n      channel: 'Firebase',\r\n      from: 'Monitorizare Vot',\r\n      message: this.message,\r\n      title: this.notificationTitle\r\n    };\r\n  }\r\n\r\n  private fillPollingStations(): void {\r\n    this.pollingStations = [];\r\n    if (this.selectedCounties && this.selectedCounties.length > 0) {\r\n      const selectedCounty: any = this.selectedCounties[0];\r\n      const countyDetails: CountyPollingStationInfo = this.counties.find(x => x.code === selectedCounty.code);\r\n      if (countyDetails) {\r\n        for (let i = 1; i <= countyDetails.limit; i++) {\r\n          this.pollingStations.push(i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  resetSelections() {\r\n    this.pollingStationTo = [];\r\n    this.pollingStationFrom = [];\r\n  }\r\n\r\n  searchForObservers() {\r\n    const to = this.pollingStationTo[0];\r\n    const from = this.pollingStationFrom[0];\r\n\r\n    this.notificationsService.getActiveObserversInCounties(this.selectedCounties.map(x => x.code), from, to).subscribe(res => {\r\n      this.filteredObservers = res;\r\n    });\r\n  }\r\n\r\n  selectedObserversIds: string[] = [];\r\n\r\n  onObserverSelect(selectedObserver: Partial<Observer>) {\r\n    if (selectedObserver.isSelected) {\r\n      this.selectedObserversIds.push(selectedObserver.id);\r\n    }\r\n    else {\r\n      const index = this.selectedObserversIds.findIndex((observerId) => observerId === selectedObserver.id);\r\n      this.selectedObserversIds.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  selectAll() {\r\n    this.selectedObserversIds = [];\r\n    this.filteredObservers.forEach(x => {\r\n      x.isSelected = true;\r\n      this.selectedObserversIds.push(x.id);\r\n    });\r\n  }\r\n\r\n  deselectAll() {\r\n    this.selectedObserversIds = [];\r\n    this.filteredObservers.forEach(x => {\r\n      x.isSelected = false;\r\n    });\r\n\r\n  }\r\n  resetFilter() {\r\n    this.pollingStationFrom = [];\r\n    this.pollingStationTo = [];\r\n    this.selectedCounties = [];\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "textarea {\r\n  height: 200px;\r\n}\r\n\r\n.margin-top {\r\n  margin-top: 10px;\r\n}\r\n\r\n.observer-list {\r\n  display: -ms-flexbox;\r\n  display: -webkit-flex;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-justify-content: flex-start;\r\n  -ms-flex-pack: start;\r\n  justify-content: flex-start;\r\n  -webkit-align-content: stretch;\r\n  -ms-flex-line-pack: stretch;\r\n  align-content: stretch;\r\n  -webkit-align-items: flex-start;\r\n  -ms-flex-align: start;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n\r\n  .observer-data {\r\n    position: relative;\r\n    padding: 0 10px;\r\n  }\r\n}\r\n\r\n.to-right {\r\n  float: right;\r\n}\r\n",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "notificationsService",
                        "type": "NotificationsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6 form-group\">\r\n      <label for=\"notificationTitle\">{{'NOTIFICATION_TITLE' | translate}}</label>\r\n      <input class=\"form-control\" id=\"notificationTitle\" [(ngModel)]=\"notificationTitle\"\r\n        placeholder=\"{{'NOTIFICATION_TITLE' | translate}}\">\r\n      <label for=\"messageTextarea\">{{'MESSAGE' | translate}}</label>\r\n      <textarea [(ngModel)]=\"message\" class=\"form-control\" id=\"messageTextarea\"\r\n        placeholder=\"{{'MESSAGE' | translate}}\"></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-md-6 form-group\">\r\n      <div>\r\n        <label for=\"countiesMultiSelect\">{{'COUNTIES' | translate}}</label>\r\n        <ng-multiselect-dropdown id=\"countiesMultiSelect\" (onSelect)=\"onCountySelect($event)\"\r\n          (onDeSelect)=\"resetSelections()\" [(ngModel)]=\"selectedCounties\" [data]=\"counties\"\r\n          placeholder=\"{{'COUNTIES' | translate}}\" [settings]=\"countyDropdownSettings\">\r\n        </ng-multiselect-dropdown>\r\n      </div>\r\n\r\n      <div class=\"margin-top\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <label for=\"pollingStationMultiSelect\">{{'POLLING_STATIONS_FROM' | translate}}</label>\r\n            <ng-multiselect-dropdown id=\"pollingStationMultiSelect\" [(ngModel)]=\"pollingStationFrom\"\r\n              [data]=\"pollingStations\" placeholder=\"{{'POLLING_STATIONS_FROM' | translate}}\"\r\n              [settings]=\"dropdownSettings\">\r\n            </ng-multiselect-dropdown>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <label for=\"pollingStationMultiSelect\">{{'POLLING_STATIONS_TO' | translate}}</label>\r\n            <ng-multiselect-dropdown id=\"pollingStationMultiSelect\" [(ngModel)]=\"pollingStationTo\"\r\n              [data]=\"pollingStations\" placeholder=\"{{'POLLING_STATIONS_TO' | translate}}\"\r\n              [settings]=\"dropdownSettings\">\r\n            </ng-multiselect-dropdown>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"margin-top\">\r\n        <button (click)=\"searchForObservers()\" class=\"btn btn-success\">{{'SEARCH' | translate}}</button>\r\n        <button (click)=\"resetFilter()\" class=\"btn btn-success to-right\">{{'RESET' | translate}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6 form-group\">\r\n      <button (click)=\"submitNotification()\"\r\n              [ngClass]=\"{'btn-success': isValidNoArg(), 'btn-default': !isValidNoArg()}\"\r\n              class=\"btn\">{{'SEND_NOTIFICATIONS_TO' | translate}}\r\n        {{selectedObserversIds?.length}}\r\n        {{'NOTIFICATION_OBSERVERS' | translate}}</button>\r\n\r\n      <button (click)=\"submitNotificationGlobally()\"\r\n              [ngClass]=\"{'btn-success': isValidGloballyNoArg(), 'btn-default': !isValidGloballyNoArg()}\"\r\n              class=\"btn to-right\">{{'SEND_NOTIFICATIONS_TO_ALL' | translate }}</button>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\" *ngIf=\"filteredObservers.length >0\">\r\n    <div class=\"col-md-6 form-group\">\r\n      <span>{{'SELECTED_OBSERVERS_COUNT' | translate}}</span> &middot; {{ filteredObservers?.length }}\r\n      &middot;\r\n      <button (click)=\"selectAll()\" *ngIf=\"filteredObservers.length !== selectedObserversIds.length\"\r\n        class=\"btn btn-default\">{{'SELECT_ALL' | translate}}</button>\r\n      <button (click)=\"deselectAll()\" *ngIf=\"filteredObservers.length === selectedObserversIds.length\"\r\n        class=\"btn btn-default\">{{'DESELECT_ALL' | translate}}</button>\r\n    </div>\r\n  </div>\r\n  <div class=\"observer-list\">\r\n    <div class=\"observer-data\" *ngFor=\"let item of filteredObservers\">\r\n      <app-observers-card [selectionEnabled]=\"true\" [observer]=\"item\" (onSelect)=\"onObserverSelect($event)\"></app-observers-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "OberverRowComponent",
            "id": "component-OberverRowComponent-89cb6538d57ab7898a60ab86a9088866",
            "file": "src/app/components/observers/oberver-row/oberver-row.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[app-oberver-row]",
            "styleUrls": [
                "./oberver-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./oberver-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BaseObserverCrudComponent } from '../base-observer-crud.component';\r\n\r\n@Component({\r\n  selector: '[app-oberver-row]',\r\n  templateUrl: './oberver-row.component.html',\r\n  styleUrls: ['./oberver-row.component.scss']\r\n})\r\nexport class OberverRowComponent extends BaseObserverCrudComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~variables.scss';\r\n\r\n.cell-text {\r\n  margin-bottom: 10px;\r\n  margin-top: 10px;\r\n  display: flex;\r\n\r\n  div {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  &.phone-number{\r\n      color: $color-secondary;\r\n  }\r\n}",
                    "styleUrl": "./oberver-row.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseObserverCrudComponent",
            "templateData": "<td *ngIf=\"selectionEnabled\" (click)=\"toggleSelectedState()\" [ngClass]=\"{ 'cursor-pointer': selectionEnabled}\">\r\n  <div class=\"checkbox\">\r\n    <i class=\"fa\" style=\"font-size:16px\"\r\n      [ngClass]=\"{'fa-square': !observer.isSelected, 'fa-check-square': observer.isSelected}\" aria-hidden=\"true\"></i>\r\n  </div>\r\n</td>\r\n<td (click)=\"toggleSelectedState()\" [ngClass]=\"{ 'cursor-pointer': selectionEnabled}\">\r\n  <div class=\"cell-text\">{{ observer.name }}</div>\r\n</td>\r\n<td (click)=\"toggleSelectedState()\" [ngClass]=\"{ 'cursor-pointer': selectionEnabled}\">\r\n  <div class=\"cell-text phone-number\">\r\n    <span class=\"glyphicon glyphicon-earphone\" aria-hidden=\"true\"></span>\r\n    <div>{{observer.phone}}</div>\r\n  </div>\r\n</td>\r\n<td (click)=\"toggleSelectedState()\" [ngClass]=\"{ 'cursor-pointer': selectionEnabled}\">\r\n  <div class=\"cell-text\">\r\n    {{ observer.lastSeen | date:'shortTime'  }}\r\n  </div>\r\n</td>\r\n<td class=\"text-right\" *ngIf=\"enableEdit\">\r\n  <div class=\"float-right\">\r\n    <button type=\"button\" class=\"btn btn-success\" [routerLink]=\"['profil/edit/', observer.phone]\" data-toggle=\"tooltip\"\r\n      title=\"Edit\"><i class=\"glyphicon glyphicon-edit\"></i></button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"openResetPasswordModal()\" data-toggle=\"tooltip\"\r\n      title=\"Reset password\"><i class=\"glyphicon glyphicon-refresh\"></i></button>\r\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteObserver()\" data-toggle=\"tooltip\" title=\"Delete\"><i\r\n        class=\"glyphicon glyphicon-trash\"></i></button>\r\n  </div>\r\n</td>"
        },
        {
            "name": "ObserverCardComponent",
            "id": "component-ObserverCardComponent-16c6680ca01de302536e883187374e73",
            "file": "src/app/components/observers/observer-card/observer-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-observers-card",
            "styleUrls": [
                "./observer-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./observer-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BaseObserverCrudComponent } from '../base-observer-crud.component';\r\n\r\n@Component({\r\n  selector: 'app-observers-card',\r\n  templateUrl: './observer-card.component.html',\r\n  styleUrls: ['./observer-card.component.scss']\r\n})\r\nexport class ObserverCardComponent extends BaseObserverCrudComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n@import '~variables.scss';\r\n\r\n\r\n.observer-tile {\r\n  width: 200px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin-bottom: 20px;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n\r\n\r\n  .content {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n    border: 2px solid transparent;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n\r\n  &.selected {\r\n    .content {\r\n      border: 2px solid $color-secondary;\r\n    }\r\n\r\n    .check-icon-container {\r\n      opacity: 1;\r\n      background-color: $color-secondary;\r\n    }\r\n\r\n    .check-icon {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    .content {\r\n      border: 2px solid $color-gray;\r\n    }\r\n\r\n    .check-icon-container {\r\n      opacity: 1;\r\n    }\r\n\r\n    .check-icon {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  .check-icon-container {\r\n    width: 45px;\r\n    height: 45px;\r\n    background-color: $color-gray;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    transform: translateX(50%) translateY(-50%) rotate(45deg);\r\n    transition: all 0.2s ease-in-out;\r\n    opacity: 0;\r\n  }\r\n\r\n  .check-icon {\r\n    opacity: 0;\r\n    display: hidden;\r\n    mask-size: cover;\r\n    position: absolute;\r\n    color: white;\r\n    bottom: -15px;\r\n    right: 15px;\r\n    transition: all 0.2s ease-in-out;\r\n    width: 25px;\r\n    height: 25px;\r\n    transform: translateX(50%) translateY(-50%) rotate(-45deg);\r\n  }\r\n}\r\n\r\n.card-header {\r\n  padding: 5px 20px;\r\n\r\n  .card-header-contents {\r\n    font-size: 18px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 150px;\r\n\r\n    .observe-name {\r\n      word-break: break-word;\r\n    }\r\n  }\r\n}\r\n\r\n.card-content {\r\n  padding: 10px 20px;\r\n  margin: auto 0;\r\n  color: $color-secondary;\r\n  font-size: 14px;\r\n\r\n  .card-row {\r\n    display: flex;\r\n\r\n    div {\r\n      margin-left: 10px;\r\n    }\r\n  }\r\n}\r\n\r\n.card-footer {\r\n  padding: 10px 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  .card-footer-header {\r\n    font-size: 12px;\r\n    color: $color-gray;\r\n  }\r\n\r\n  .card-footer-details {\r\n    font-size: 14px;\r\n    color: #000000;\r\n  }\r\n\r\n  .btn-group {\r\n    font-size: 12px;\r\n  }\r\n\r\n  .btn-default {\r\n    font-weight: 300;\r\n  }\r\n}\r\n",
                    "styleUrl": "./observer-card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseObserverCrudComponent",
            "templateData": "<div class=\"observer-tile\" [ngClass]=\"{'selected': observer.isSelected,'cursor-pointer': selectionEnabled}\" (click)=\"toggleSelectedState()\">\r\n  <div class=\"content\">\r\n    <div class=\"check-icon-container\" *ngIf=\"selectionEnabled\">\r\n      <i class=\"fa fa-check check-icon\"></i>\r\n    </div>\r\n\r\n    <div class=\"card-header\">\r\n      <div class=\"card-header-contents\">\r\n        <span class=\"observe-name\">{{observer.name}}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"card-content\">\r\n      <div class=\"card-row\">\r\n        <span class=\"glyphicon glyphicon-earphone\" aria-hidden=\"true\"></span>\r\n        <div class=\"phone-number\">{{observer.phone}}</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n      <div>\r\n        <div class=\"card-footer-header\">\r\n          Last login\r\n        </div>\r\n        <div class=\"card-footer-details\">\r\n          {{observer.lastSeen | date:'shortTime'}}\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"enableEdit\">\r\n        <div class=\"btn-group dropup pull-right\">\r\n          <button type=\"button\" class=\"btn btn-default\" [routerLink]=\"['profil/edit/', observer.phone]\">Edit</button>\r\n          <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n            aria-expanded=\"false\">\r\n            <span class=\"caret\"></span>\r\n            <span class=\"sr-only\">Toggle Dropdown</span>\r\n          </button>\r\n          <ul class=\"dropdown-menu dropdown-menu-right\">\r\n            <li class=\"cursor-pointer\"><a (click)=\"deleteObserver()\">Delete</a></li>\r\n            <li class=\"cursor-pointer\"><a (click)=\"openResetPasswordModal()\">{{'RESET_PASSWORD'| translate}}</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ObserverProfileComponent",
            "id": "component-ObserverProfileComponent-f151c7e1b0d1bdf489967a73c42b86aa",
            "file": "src/app/components/observers/observer-profile/observer-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-observer-profile",
            "styleUrls": [
                "./observer-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./observer-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fileData",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "observer",
                    "type": "Observer",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "observerProfileForm",
                    "type": "ObserverProfileForm",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "observerProfileUploadForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pageState",
                    "type": "PageState",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewObserver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deleteObserver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "getObserver",
                    "args": [
                        {
                            "name": "params",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFormState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initRouteListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "saveChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "saveObserver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\r\nimport {ObserverProfileForm} from './observer-profile.form';\r\nimport {ObserversService} from '../../../services/observers.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {PageState} from '../../../models/page-state.model';\r\nimport {Observer} from '../../../models/observer.model';\r\nimport {ToastrService} from 'ngx-toastr';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {ObserverProfileUploadForm} from './observers-profile-upload.form';\r\nimport { ApiListResponse } from '../../../models/api-list-response.model';\r\n\r\n@Component({\r\n  selector: 'app-observer-profile',\r\n  templateUrl: './observer-profile.component.html',\r\n  styleUrls: ['./observer-profile.component.scss']\r\n})\r\nexport class ObserverProfileComponent implements OnInit {\r\n  error: string;\r\n  fileData: File;\r\n\r\n  observerProfileForm: ObserverProfileForm;\r\n  observerProfileUploadForm: FormGroup;\r\n  observer: Observer;\r\n  pageState: PageState;\r\n\r\n  constructor(\r\n    private observerService: ObserversService,\r\n    private route: ActivatedRoute,\r\n    private toastr: ToastrService,\r\n    private fb: FormBuilder,\r\n    private router: Router) {\r\n    this.observerProfileForm = new ObserverProfileForm();\r\n\r\n    this.observerProfileUploadForm = this.fb.group({\r\n      csv: null,\r\n      ongId: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initRouteListener();\r\n  }\r\n\r\n  saveObserver() {\r\n    if (this.pageState === PageState.NEW) {\r\n      this.addNewObserver();\r\n    } else {\r\n      this.saveChanges();\r\n    }\r\n  }\r\n\r\n  deleteObserver() {\r\n    if (confirm('Are you sure you want to remove this observer?')) {\r\n      this.observerService.deleteObserver(this.observer.id)\r\n        .subscribe((data) => {\r\n          this.toastr.warning('Success', 'Observer has been removed');\r\n          this.router.navigateByUrl('/observatori');\r\n        });\r\n    }\r\n  }\r\n\r\n\r\n  onFileChange(event) {\r\n    if (event.target.files.length > 0) {\r\n      const file = event.target.files[0];\r\n      this.observerProfileUploadForm.get('csv').setValue(file);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    const formData = new FormData();\r\n    formData.append('file', this.observerProfileUploadForm.get('csv').value);\r\n    formData.append('ongId', this.observerProfileUploadForm.get('ongId').value);\r\n\r\n    this.observerService.uploadCsv(formData).subscribe(\r\n      (res) => {\r\n        this.toastr.success(`${res} observers have been added successfully`, 'Success');\r\n      },\r\n      (err) => {\r\n        this.toastr.error('Encountered error while uploading csv', 'Error');\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  private initRouteListener() {\r\n    this.route.params.subscribe((params) => {\r\n      this.pageState = params['state'];\r\n      this.handleFormState();\r\n      this.getObserver(params);\r\n    });\r\n  }\r\n\r\n  private saveChanges() {\r\n    this.observerService.saveChanges(this.observerProfileForm.value, this.observer)\r\n      .subscribe((data) => {\r\n        this.toastr.success('Success', 'Changes have been saved');\r\n      });\r\n  }\r\n\r\n  private addNewObserver() {\r\n    const observerToAdd: Observer = new Observer({});\r\n    observerToAdd.phone = this.observerProfileForm.value.phone;\r\n    observerToAdd.pin = this.observerProfileForm.value.password;\r\n    observerToAdd.name = this.observerProfileForm.value.name;\r\n    observerToAdd.sendSMS = this.observerProfileForm.value.sendSMS;\r\n\r\n    this.observerService.addNewObserver(observerToAdd)\r\n      .subscribe((value) => {\r\n        this.toastr.success('Success', 'Observer has been added');\r\n        this.router.navigateByUrl('/observatori');\r\n      });\r\n  }\r\n\r\n  private handleFormState() {\r\n    if (this.pageState === PageState.VIEW) {\r\n      this.observerProfileForm.disable();\r\n    } else {\r\n      this.observerProfileForm.enable();\r\n    }\r\n  }\r\n\r\n  private getObserver(params) {\r\n    if (this.pageState !== PageState.NEW) {\r\n      this.observerService.getObserver(params['id'])\r\n        .subscribe((observers: ApiListResponse<Observer>) => {\r\n          if (observers) {\r\n            this.observer = observers.data[0];\r\n            this.observerProfileForm.patchValue(this.observer);\r\n          }\r\n        });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".btn {\r\n  border-radius: 2px;\r\n  font-weight: bold;\r\n\r\n  &.btn-danger {\r\n    background: #FFF;\r\n    color: #fd0001;\r\n    border: none;\r\n    box-shadow: none;\r\n  }\r\n}\r\n\r\n.profile-panel {\r\n\r\n  .profile-header {\r\n    border-bottom: 1px solid #F4F4F4;\r\n    padding-bottom: 8px;\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  .last-login {\r\n    font-size: 14px;\r\n    line-height: 21px;\r\n    color: #7C8284;\r\n  }\r\n\r\n  border: 1px solid #EEE;\r\n  border-radius: 2px;\r\n  background: #FFF;\r\n  padding: 8px 16px;\r\n  margin: 20px 0 10px 0;\r\n\r\n  .bottom-buttons-wrapper {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 80px;\r\n\r\n    .btn-danger {\r\n      padding-left: 0;\r\n      outline: none;\r\n    }\r\n\r\n    .right-buttons-wrapper {\r\n      display: flex;\r\n      justify-content: space-between;\r\n\r\n      .btn-success {\r\n        margin-left: 8px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.form-group {\r\n  label {\r\n    font-weight: normal;\r\n    font-size: 14px;\r\n    line-height: 19px;\r\n    color: #7C8284;\r\n  }\r\n\r\n  .form-control {\r\n    box-shadow: none;\r\n    background: #F4f4f4;\r\n    border-radius: 2px;\r\n    border: none;\r\n  }\r\n}\r\n\r\n.move-right {\r\n  display: flex;\r\n  justify-content: flex-end !important;\r\n}\r\n\r\n.invalid-field {\r\n  background: #FDEAEA;\r\n  border: 1px solid #FF0000;\r\n}\r\n\r\n.invalid-field-message {\r\n  color: #FF0000;\r\n}\r\n\r\n.top-wrapper {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n",
                    "styleUrl": "./observer-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "observerService",
                        "type": "ObserversService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "observerService",
                        "type": "ObserversService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\r\n  <div class=\"page-title\">\r\n    <span *ngIf=\"pageState === 'new'\">Add observer</span>\r\n    <span *ngIf=\"pageState === 'edit'\">Edit observer</span>\r\n\r\n    <div class=\"actions\">\r\n      <button class=\"btn btn-success back-button\" [routerLink]=\"['/observatori']\">Back</button>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n      <div class=\"profile-panel\">\r\n        <div *ngIf=\"pageState !== 'new'\" class=\"profile-header\">\r\n          <h4 class=\"observer-name\">{{ observer?.name }} </h4>\r\n          <p class=\"last-login\">Last login: {{ observer?.lastSeen ? (observer.lastSeen | date:'short'): 'never' }}</p>\r\n          <p class=\"last-login\">Device registration date: {{ observer?.deviceRegisterDate? (observer.deviceRegisterDate| date:'short' ): 'never' }}</p>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-12\">\r\n            <form novalidate [formGroup]=\"observerProfileForm\">\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Name</label>\r\n                    <input\r\n                      formControlName=\"name\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                    >\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-lg-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Phone number *</label>\r\n                    <input\r\n                      formControlName=\"phone\"\r\n                      type=\"tel\"\r\n                      class=\"form-control\"\r\n                    >\r\n                  </div>\r\n                  <div class=\"form-group\" *ngIf=\"pageState === 'new'\">\r\n                    <label>Password *</label>\r\n                    <input\r\n                      formControlName=\"password\"\r\n                      type=\"password\"\r\n                      class=\"form-control\"\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div\r\n                *ngIf=\"pageState !== 'view'\"\r\n                class=\"bottom-buttons-wrapper\"\r\n                [class.move-right]=\"pageState === 'new'\"\r\n              >\r\n                <button *ngIf=\"pageState === 'edit'\" type=\"button\" class=\"btn btn-danger\" (click)=\"deleteObserver()\">\r\n                  Delete Account\r\n                </button>\r\n                <div class=\"right-buttons-wrapper\">\r\n                  <button type=\"button\" class=\"btn btn-secondary\" [routerLink]=\"['/observatori']\">Cancel</button>\r\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"observerProfileForm.invalid\"\r\n                          (click)=\"saveObserver()\">\r\n                    <span *ngIf=\"pageState === 'new'\">Add observer</span>\r\n                    <span *ngIf=\"pageState === 'edit'\">Save changes</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-6 pull-right\" *ngIf=\"pageState === 'new'\">\r\n      <div class=\"profile-panel\">\r\n        <h4 class=\"observer-name\">Import observers </h4>\r\n        <form novalidate [formGroup]=\"observerProfileUploadForm\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"form-group\">\r\n            <label>ID Ngo</label>\r\n            <input formControlName=\"ongId\" type=\"text\" class=\"form-control\">\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"fileSelection\">Select file</label>\r\n            <input type=\"file\" class=\"form-control\" id=\"fileSelection\" (change)=\"onFileChange($event)\">\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-success\">Import</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"
        },
        {
            "name": "ObserversComponent",
            "id": "component-ObserversComponent-2b7d7daf552319b24d7eda5fb30c4a9a",
            "file": "src/app/components/observers/observers.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-observers",
            "styleUrls": [
                "./observers.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./observers.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "anyObservers",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "editObserverModal",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editObserverModalTemplate'"
                        }
                    ]
                },
                {
                    "name": "listType",
                    "defaultValue": "ListType.CARD",
                    "type": "ListType",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "listTypes",
                    "defaultValue": "ListType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "modalOptions",
                    "defaultValue": "{\r\n    backdrop: 'static',\r\n    keyboard: false\r\n  }",
                    "type": "ModalOptions",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "modalRef",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "newPassword",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "observersCountSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "observersFilterForm",
                    "type": "ObserversFilterForm",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "observersList",
                    "type": "Array<Observer>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "observersState",
                    "type": "ObserversStateItem",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "observersSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "observerToEdit",
                    "type": "Observer",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "pageSize",
                    "defaultValue": "9",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "selectedObserversIds",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "totalCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "changeListType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleObserversCountData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleObserversData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isPasswordValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 150
                },
                {
                    "name": "loadObservers",
                    "args": [
                        {
                            "name": "pageNo",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageNo",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadObserversCount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "onObserverDelete",
                    "args": [
                        {
                            "name": "observer",
                            "type": "Observer"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "observer",
                            "type": "Observer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onObserverResetPassword",
                    "args": [
                        {
                            "name": "observer",
                            "type": "Observer"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "observer",
                            "type": "Observer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onObserverSelect",
                    "args": [
                        {
                            "name": "selectedObserver",
                            "type": "Partial<Observer>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "selectedObserver",
                            "type": "Partial<Observer>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pageChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {from as observableFrom,  Subscription } from 'rxjs';\r\n\r\nimport {concatMap, take,  map } from 'rxjs/operators';\r\nimport { ObserversStateItem } from '../../store/observers/observers.state';\r\nimport { AppState } from '../../store/store.module';\r\nimport {select, Store} from '@ngrx/store';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport { Component, OnDestroy, OnInit, ViewChild, TemplateRef } from '@angular/core';\r\nimport { LoadObserversAction, LoadObserversCountAction } from '../../store/observers/observers.actions';\r\nimport { values } from 'lodash';\r\nimport { Observer } from '../../models/observer.model';\r\nimport { ListType } from '../../models/list.type.model';\r\nimport { ObserversFilterForm } from './observers-filter.form';\r\nimport { ObserversService } from '../../services/observers.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport {BsModalRef, BsModalService, ModalOptions} from 'ngx-bootstrap/modal';\r\n\r\n@Component({\r\n  selector: 'app-observers',\r\n  templateUrl: './observers.component.html',\r\n  styleUrls: ['./observers.component.scss']\r\n})\r\nexport class ObserversComponent implements OnInit, OnDestroy {\r\n  @ViewChild('editObserverModalTemplate') editObserverModal: TemplateRef<any>;\r\n\r\n  observersState: ObserversStateItem;\r\n  observersSubscription: Subscription;\r\n  observersCountSubscription: Subscription;\r\n  observersList: Array<Observer>;\r\n  listType: ListType = ListType.CARD;\r\n  observersFilterForm: ObserversFilterForm;\r\n  selectedObserversIds: Array<string> = [];\r\n  listTypes = ListType;\r\n  anyObservers = false;\r\n  pageSize = 9;\r\n  totalCount = 0;\r\n\r\n  newPassword = '';\r\n  modalRef: BsModalRef;\r\n  modalOptions: ModalOptions = {\r\n    backdrop: 'static',\r\n    keyboard: false\r\n  };\r\n  observerToEdit: Observer;\r\n\r\n  constructor(private http: ApiService,\r\n              private store: Store<AppState>,\r\n              private observersService: ObserversService,\r\n              private toastrService: ToastrService,\r\n              private modalService: BsModalService) {\r\n    this.observersFilterForm = new ObserversFilterForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadObservers(1);\r\n    this.handleObserversData();\r\n    this.loadObserversCount();\r\n    this.handleObserversCountData();\r\n\r\n  }\r\n\r\n  changeListType(type: string) {\r\n    this.listType = type as ListType;\r\n  }\r\n\r\n\r\n  pageChanged(event) {\r\n    this.loadObservers(event.page);\r\n  }\r\n\r\n  applyFilters() {\r\n    this.loadObservers(1);\r\n  }\r\n\r\n  resetFilters() {\r\n    this.observersFilterForm.reset({ name: '', phone: '' });\r\n    this.loadObservers(1);\r\n  }\r\n\r\n  private loadObservers(pageNo) {\r\n    this.store\r\n      .pipe(\r\n        select(s => s.observers),\r\n        take(1),\r\n        map(data => values(data)),\r\n        concatMap(s => observableFrom(s)),\r\n        map((storeItem: ObserversStateItem) => new LoadObserversAction(\r\n          storeItem.key, pageNo, 100, true, this.observersFilterForm.get('name').value,\r\n          this.observersFilterForm.get('phone').value)), )\r\n      .subscribe(action => this.store.dispatch(action));\r\n  }\r\n\r\n  private loadObserversCount() {\r\n    this.store\r\n      .pipe(\r\n        select(s => s.observersCount),\r\n        take(1),\r\n        map(_ => new LoadObserversCountAction()), )\r\n      .subscribe(action => this.store.dispatch(action));\r\n  }\r\n\r\n  private handleObserversData() {\r\n    this.observersSubscription = this.store\r\n      .select(state => state.observers)\r\n      .pipe(map(state => values(state)), map(state => state[0]))\r\n      .subscribe(state => {\r\n        this.observersState = state;\r\n        this.observersList = state.values;\r\n        this.anyObservers = state.values.length > 0;\r\n      });\r\n  }\r\n  private handleObserversCountData() {\r\n    this.observersCountSubscription = this.store\r\n      .select(state => state.observersCount)\r\n      .pipe(map(state => state.count))\r\n      .subscribe(state => {\r\n        this.totalCount = state;\r\n      });\r\n  }\r\n\r\n  onObserverSelect(selectedObserver: Partial<Observer>) {\r\n    if (selectedObserver.isSelected) {\r\n      this.selectedObserversIds.push(selectedObserver.id);\r\n    } else {\r\n      const index = this.selectedObserversIds.findIndex((observerId) => observerId === selectedObserver.id);\r\n      this.selectedObserversIds.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  onObserverDelete(observer: Observer) {\r\n    this.observersService.deleteObserver(observer.id).subscribe(_ => {\r\n      this.loadObservers(1);\r\n      this.loadObserversCount();\r\n      this.toastrService.warning('Success!', 'User has been removed');\r\n    });\r\n  }\r\n\r\n  onObserverResetPassword(observer: Observer) {\r\n    this.observerToEdit = observer;\r\n    this.newPassword = '';\r\n    this.modalRef = this.modalService.show(this.editObserverModal, this.modalOptions);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.observersSubscription.unsubscribe();\r\n    this.observersCountSubscription.unsubscribe();\r\n  }\r\n\r\n  isPasswordValid(): boolean {\r\n    return this.newPassword && (this.newPassword.length === 4 || this.newPassword.length === 6);\r\n  }\r\n\r\n  resetPassword() {\r\n    this.observersService.resetPasswordObserver(this.observerToEdit.phone, this.newPassword).subscribe(_ => {\r\n      this.toastrService.success('Success!', 'Password has been reset for the observer.');\r\n      this.modalRef.hide();\r\n    }, _ => {\r\n      this.toastrService.error('Could not reset password', 'Error!');\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hidden {\r\n  display: none\r\n}\r\n\r\n\r\n.filters-panel {\r\n  margin: 20px 0 10px 0;\r\n\r\n  .action-buttons {\r\n    margin-top: 24px;\r\n\r\n    .btn {\r\n      padding: 10px;\r\n    }\r\n  }\r\n}\r\n\r\n.observer-list {\r\n  display: -ms-flexbox;\r\n  display: -webkit-flex;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-justify-content: flex-start;\r\n  -ms-flex-pack: start;\r\n  justify-content: flex-start;\r\n  -webkit-align-content: stretch;\r\n  -ms-flex-line-pack: stretch;\r\n  align-content: stretch;\r\n  -webkit-align-items: flex-start;\r\n  -ms-flex-align: start;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n\r\n  .observer-data {\r\n    position: relative;\r\n    padding: 0 10px;\r\n  }\r\n}",
                    "styleUrl": "./observers.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "observersService",
                        "type": "ObserversService"
                    },
                    {
                        "name": "toastrService",
                        "type": "ToastrService"
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "observersService",
                        "type": "ObserversService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastrService",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container-fluid\">\r\n  <div class=\"page-title\">\r\n    <span>Observers</span> &middot; {{ totalCount }} total &middot; Sorted by <a>Last login - Ascending</a>\r\n    <div class=\"actions\">\r\n      <button class=\"btn\" [ngClass]=\"(listType === 'CARD')?'btn-success':'btn-secondary'\"\r\n        (click)=\"changeListType('CARD')\"><i class=\"glyphicon glyphicon-th-large\"></i></button>\r\n      <button class=\"btn\" [ngClass]=\"(listType === 'LIST')?'btn-success':'btn-secondary'\"\r\n        (click)=\"changeListType('LIST')\"><i class=\"glyphicon glyphicon-th-list\"></i></button>\r\n\r\n      <button class=\"btn btn-success\" [routerLink]=\"['profil/new']\">\r\n        <i class=\"glyphicon glyphicon-plus-sign\"></i> add observer/s\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"panel panel-default filters-panel\">\r\n    <div class=\"panel-body\">\r\n      <form novalidate [formGroup]=\"observersFilterForm\">\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-2\">\r\n            <div class=\"form-group\">\r\n              <label for=\"form-name\">Name</label>\r\n              <input type='text' name=\"name\" id=\"form-name\" class=\"form-control\" formControlName=\"name\">\r\n            </div>\r\n          </div>\r\n          <div class=\"col-sm-2\">\r\n            <div class=\"form-group\">\r\n              <label for=\"form-county\">Phone</label>\r\n              <input type='text' name=\"phone\" id=\"form-county\" class=\"form-control\" formControlName=\"phone\">\r\n            </div>\r\n          </div>\r\n          <div class=\"col-sm-2\">\r\n            <div class=\"form-group action-buttons\">\r\n              <button class=\"btn btn-success\" [disabled]=\"observersFilterForm.isEmpty()\"\r\n                (click)=\"applyFilters()\">filter</button>\r\n              <button class=\"btn btn-secondary\" [disabled]=\"observersFilterForm.isEmpty()\"\r\n                (click)=\"resetFilters()\">reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"observer-list\" *ngIf=\"listType === listTypes.CARD\">\r\n    <div class=\"observer-data\" *ngFor=\"let item of observersList\">\r\n      <app-observers-card [observer]=\"item\" [enableEdit]=\"true\" (onSelect)=\"onObserverSelect($event)\"\r\n        (onDelete)=\"onObserverDelete($event)\" (onResetPassword)=\"onObserverResetPassword($event)\"></app-observers-card>\r\n    </div>\r\n  </div>\r\n  <div class=\"observer-grid\" *ngIf=\"listType === listTypes.LIST\">\r\n    <table class=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Phone</th>\r\n          <th>Last login</th>\r\n          <th class=\"text-right\">Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let observer of observersList\" app-oberver-row [observer]=\"observer\" [enableEdit]=\"true\" (onSelect)=\"onObserverSelect($event)\"\r\n        (onDelete)=\"onObserverDelete($event)\" (onResetPassword)=\"onObserverResetPassword($event)\">\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <ng-template #editObserverModalTemplate>\r\n    <div class=\"modal-header\" data-backdrop=\"static\">\r\n      <h4 class=\"modal-title pull-left\">{{'ENTER_NEW_PASSWORD' | translate}} {{observerToEdit.name}}</h4>\r\n      <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <input type=\"text\" name=\"password\" placeholder=\"pin\" [(ngModel)]=\"newPassword\" #pin=\"ngModel\" maxlength=\"6\"\r\n        minlength=\"4\">\r\n      <p>&nbsp;</p>\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"resetPassword()\"\r\n        [disabled]=\"!isPasswordValid()\">{{'RESET_PASSWORD'| translate}}</button>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n\r\n<app-pagination [page]=\"observersState.page\" [pageSize]=\"observersState.pageSize\"\r\n  [totalItems]=\"observersState.totalItems\" [nextEnabled]=\"!observersState.loading\" (pageChanged)=\"pageChanged($event)\">\r\n</app-pagination>\r\n\r\n<app-loading-indicator *ngIf=\"observersState.loading\"></app-loading-indicator>\r\n<div *ngIf=\"observersState.error\">\r\n  <app-error-indicator></app-error-indicator>\r\n</div>\r\n"
        },
        {
            "name": "OptionComponent",
            "id": "component-OptionComponent-1837f8ebbbbaf9c4cea6956be41ab3a5",
            "file": "src/app/components/forms/option/option.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-option",
            "styleUrls": [
                "./option.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "optionFormGroup",
                    "line": 12,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "optionDeleteEventEmitter",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {BaseAnswer} from '../../../models/base.answer.model';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-option',\r\n  templateUrl: './option.component.html',\r\n  styleUrls: ['./option.component.scss']\r\n})\r\n\r\nexport class OptionComponent {\r\n  @Input() optionFormGroup: FormGroup;\r\n\r\n  @Output() optionDeleteEventEmitter = new EventEmitter<any>();\r\n\r\n  constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".option-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 4px auto;\r\n\r\n  .icon-holder {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n\r\n    cursor: pointer;\r\n\r\n    margin: auto 4px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./option.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "templateData": "<form [formGroup]=\"optionFormGroup\">\r\n\r\n  <div class=\"col-md-8 option-container\">\r\n      <input type=\"text\" class=\"form-control\" placeholder=\"\" formControlName=\"text\">\r\n\r\n      <div class=\"icon-holder\">\r\n        <app-icon-toggle-input enabledIcon=\"/assets/forms/icon-text-enabled.png\"\r\n                               disabledIcon=\"/assets/forms/icon-text-disabled.png\"\r\n                               formControlName=\"isFreeText\">\r\n        </app-icon-toggle-input>\r\n      </div>\r\n\r\n      <div class=\"icon-holder\" (click)=\"optionDeleteEventEmitter.emit()\">\r\n        <img src=\"/assets/forms/icon-delete.png\">\r\n      </div>\r\n  </div>\r\n</form>\r\n\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-9182b54b67e7ff648dfbde08d44216ee",
            "file": "src/app/shared/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nextEnabled",
                    "defaultValue": "true",
                    "line": 19
                },
                {
                    "name": "page",
                    "line": 11,
                    "type": "number"
                },
                {
                    "name": "pageSize",
                    "line": 13,
                    "type": "number"
                },
                {
                    "name": "totalItems",
                    "line": 16,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "endingIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "startingindex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "canNextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "canPrevPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "prevPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pagination',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.scss']\r\n})\r\nexport class PaginationComponent implements OnInit, OnChanges {\r\n\r\n  @Input()\r\n  page: number;\r\n  @Input()\r\n  pageSize: number;\r\n\r\n  @Input()\r\n  totalItems: number;\r\n\r\n  @Input()\r\n  nextEnabled = true;\r\n\r\n  @Output()\r\n  pageChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  startingindex: number;\r\n  endingIndex: number;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['page'] || changes['pageSize'] || changes['totalItems']) {\r\n      this.startingindex = (this.page - 1) * this.pageSize + 1;\r\n      this.endingIndex = this.startingindex + this.pageSize - 1;\r\n\r\n      if (this.endingIndex > this.totalItems){\r\n        this.endingIndex = this.totalItems;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  canNextPage() {\r\n    if (this.nextEnabled === false) {\r\n      return false;\r\n    }\r\n    if (this.totalItems !== undefined && this.pageSize * this.page >= this.totalItems) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  canPrevPage(){\r\n    if (this.page === 1){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  nextPage() {\r\n    if (this.canNextPage()) {\r\n      this.pageChanged.emit({\r\n        page: this.page + 1,\r\n        pageSize: this.pageSize\r\n      });\r\n    }\r\n  }\r\n  prevPage() {\r\n    if (this.canPrevPage()){\r\n      this.pageChanged.emit({\r\n        page: this.page - 1,\r\n        pageSize: this.pageSize\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".disabled{\r\n    color:rgba(220,220,220,0.75)\r\n}\r\n.row {\r\n  padding: 25px 0;\r\n  font-size: 14px;\r\n}\r\n.pointer {\r\n  cursor: pointer;\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n  }\r\n}\r\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-xs-4 text-center pointer\" (click)=\"prevPage()\" [class.disabled]=\"!canPrevPage()\">\r\n    <i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\r\n    <span>\r\n        Newer\r\n      </span>\r\n  </div>\r\n  <div class=\"col-xs-4 text-center\">\r\n    <span>{{startingindex}}-{{endingIndex}}</span> <span *ngIf=\"totalItems !== undefined\">din {{totalItems}}</span>\r\n  </div>\r\n  <div class=\"col-xs-4 text-center pointer\" [class.disabled]=\"!canNextPage()\" (click)=\"nextPage()\">\r\n    <i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i>\r\n    <span>\r\n        Older\r\n      </span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "QuestionComponent",
            "id": "component-QuestionComponent-7fd96f4f55969f24095a6d4c1bd30507",
            "file": "src/app/components/forms/question/question.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-question",
            "styleUrls": [
                "./question.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./question.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "questionFormGroup",
                    "line": 18,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "questionDeleteEventEmitter",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hideOptions",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "questionTypes",
                    "type": "QuestionType[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "addOption",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onOptionDelete",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReorder",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<BaseAnswer[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<BaseAnswer[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {QUESTION_TYPES, QuestionType} from '../../../models/form.question.model';\r\nimport {BaseAnswer} from '../../../models/base.answer.model';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {initOptionFormGroup} from '../form-groups-builder';\r\nimport {moveItemInFormArray} from '../../utils';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.scss']\r\n})\r\n\r\nexport class QuestionComponent implements OnInit {\r\n  hideOptions = false;\r\n\r\n  @Input() questionFormGroup: FormGroup;\r\n  @Output() questionDeleteEventEmitter = new EventEmitter<any>();\r\n\r\n  questionTypes: QuestionType[];\r\n\r\n  constructor(private formBuilder: FormBuilder) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.questionTypes = QUESTION_TYPES;\r\n  }\r\n\r\n  get optionsArray(): FormArray {\r\n    return this.questionFormGroup.controls.optionsToQuestions as FormArray;\r\n  }\r\n\r\n  get optionFormGroupsArray(): FormGroup[] {\r\n    return this.optionsArray.controls as FormGroup[];\r\n  }\r\n\r\n  addOption() {\r\n    this.optionsArray.push(initOptionFormGroup(this.formBuilder));\r\n  }\r\n\r\n  toggleOptions() {\r\n    this.hideOptions = !this.hideOptions;\r\n  }\r\n\r\n  onOptionDelete(index: number) {\r\n    this.optionsArray.removeAt(index);\r\n  }\r\n\r\n  onReorder(event: CdkDragDrop<BaseAnswer[]>) {\r\n    moveItemInFormArray(this.optionsArray, event.previousIndex, event.currentIndex);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".question-component {\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  .add-option-button {\r\n    color: rebeccapurple;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .options-panel {\r\n    background-color: #EDEDED;\r\n    padding: 8px;\r\n\r\n    .options-list {\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .option-line {\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        .option {\r\n          flex-grow: 1;\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  .expandable-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    flex-grow: 1;\r\n\r\n    padding: 4px;\r\n  }\r\n\r\n  .main-fields-container {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    flex-direction: row;\r\n\r\n    border: 1px solid #EDEDED;\r\n  }\r\n\r\n  .icon-holder {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n\r\n    cursor: pointer;\r\n  }\r\n\r\n  .field {\r\n    margin: 16px auto;\r\n  }\r\n}\r\n",
                    "styleUrl": "./question.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "optionsArray": {
                    "name": "optionsArray",
                    "getSignature": {
                        "name": "optionsArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 30
                    }
                },
                "optionFormGroupsArray": {
                    "name": "optionFormGroupsArray",
                    "getSignature": {
                        "name": "optionFormGroupsArray",
                        "type": "[]",
                        "returnType": "FormGroup[]",
                        "line": 34
                    }
                }
            },
            "templateData": "\r\n<div class=\"col-md-12 question-component\">\r\n  <div class=\"field icon-holder\" (click)=\"toggleOptions()\">\r\n    <span *ngIf=\"hideOptions\">\r\n      &#9654;\r\n    </span>\r\n    <span *ngIf=\"!hideOptions\">\r\n      &#9660;\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"expandable-container\">\r\n    <form [formGroup]=\"questionFormGroup\">\r\n      <div class=\"main-fields-container\">\r\n        <div class=\"field col-md-2\">\r\n          <input class=\"form-control\" formControlName=\"code\" placeholder=\"{{'QUESTION_CODE' | translate}}\">\r\n        </div>\r\n        <div class=\"field col-md-6\">\r\n          <input class=\"form-control\" formControlName=\"text\" placeholder=\"{{'QUESTION_TEXT' | translate}}\">\r\n        </div>\r\n        <div class=\"field col-md-2\">\r\n          <select class=\"form-control\" formControlName=\"questionType\">\r\n            <option *ngFor=\"let questionType of questionTypes\" [ngValue]=\"questionType.id\">{{questionType.name}}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"field icon-holder\" (click)=\"questionDeleteEventEmitter.emit()\">\r\n          <img src=\"/assets/forms/icon-delete.png\">\r\n        </div>\r\n      </div>\r\n    </form>\r\n\r\n    <div [hidden]=\"hideOptions\" class=\"options-panel\">\r\n\r\n      <div cdkDropList\r\n           class=\"options-list\"\r\n           (cdkDropListDropped)=\"onReorder($event)\">\r\n        <div *ngFor=\"let option of optionFormGroupsArray; let i = index\" cdkDrag class=\"option-line\">\r\n          <app-option [optionFormGroup]=\"option\"\r\n                      (optionDeleteEventEmitter)=\"onOptionDelete(i)\"\r\n                      class=\"option\">\r\n          </app-option>\r\n\r\n          <div class=\"icon-holder icon-reorder\" cdkDragHandle>\r\n            <img src=\"/assets/forms/icon-reorder.png\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-12 add-option-button\" (click)=\"addOption()\">+ {{'OPTION_ADD' | translate}}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SectionComponent",
            "id": "component-SectionComponent-7beb259d4893ee90156d5066a2c183a6",
            "file": "src/app/components/forms/section/section.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-section",
            "styleUrls": [
                "./section.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sectionFormGroup",
                    "line": 14,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "sectionDeleteEventEmitter",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onQuestionDelete",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReorder",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<FormQuestion[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<FormQuestion[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, } from '@angular/core';\r\nimport {FormQuestion} from '../../../models/form.question.model';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {moveItemInFormArray} from '../../utils';\r\nimport {initQuestionFormGroup} from '../form-groups-builder';\r\n\r\n@Component({\r\n  selector: 'app-section',\r\n  templateUrl: './section.component.html',\r\n  styleUrls: ['./section.component.scss']\r\n})\r\nexport class SectionComponent {\r\n  @Input() sectionFormGroup: FormGroup;\r\n\r\n  @Output() sectionDeleteEventEmitter = new EventEmitter<any>();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n  }\r\n\r\n  addQuestion() {\r\n    this.questionsArray.push(initQuestionFormGroup(this.formBuilder));\r\n  }\r\n\r\n  get questionsArray(): FormArray {\r\n    return this.sectionFormGroup.get('questions') as FormArray;\r\n  }\r\n\r\n  get questionFormGroupsArray(): FormGroup[] {\r\n    return this.questionsArray.controls as FormGroup[];\r\n  }\r\n\r\n  onQuestionDelete(index: number) {\r\n    this.questionsArray.removeAt(index);\r\n  }\r\n\r\n  onReorder(event: CdkDragDrop<FormQuestion[]>) {\r\n    moveItemInFormArray(this.questionsArray, event.previousIndex, event.currentIndex);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-create {\r\n\r\n  .section-details {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .add-question-button {\r\n    color: rebeccapurple;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .form-labeled-field {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .header-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-bottom: 20px;\r\n\r\n    .header-text {\r\n      margin: auto 0;\r\n      font-size: larger;\r\n      font-weight: bold;\r\n    }\r\n\r\n    .btn-delete {\r\n      border: 1px solid;\r\n      color: red;\r\n    }\r\n  }\r\n\r\n  .question-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .question-line {\r\n      display: flex;\r\n      flex-direction: row;\r\n\r\n      .question {\r\n        flex-grow: 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  .icon-holder {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n\r\n    cursor: pointer;\r\n\r\n    margin: auto 4px;\r\n  }\r\n\r\n  .icon-reorder {\r\n    cursor: move;\r\n  }\r\n}\r\n",
                    "styleUrl": "./section.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "questionsArray": {
                    "name": "questionsArray",
                    "getSignature": {
                        "name": "questionsArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 25
                    }
                },
                "questionFormGroupsArray": {
                    "name": "questionFormGroupsArray",
                    "getSignature": {
                        "name": "questionFormGroupsArray",
                        "type": "[]",
                        "returnType": "FormGroup[]",
                        "line": 29
                    }
                }
            },
            "templateData": "\r\n<div class=\"section-create\">\r\n\r\n  <div class=\"header-row\">\r\n    <span class=\"header-text\">{{ sectionFormGroup.controls.description.value }}</span>\r\n\r\n    <div class=\"buttons-pane\">\r\n      <button class=\"btn btn-secondary btn-delete\" (click)=\"sectionDeleteEventEmitter.emit()\">{{'SECTION_DELETE' | translate}}</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"panel panel-default\">\r\n    <div class=\"panel-body section-details\">\r\n      <form [formGroup]=\"sectionFormGroup\">\r\n        <div class=\"col-md-6\">\r\n          <div class=\"form-labeled-field\">\r\n            <div>\r\n              <span>{{'SECTION_TITLE' | translate}}</span>\r\n            </div>\r\n            <div>\r\n              <input class=\"form-control\" formControlName=\"description\" placeholder=\"{{'SECTION_TITLE_PLACEHOLDER' | translate}}\">\r\n            </div>\r\n          </div>\r\n          <div class=\"form-labeled-field\">\r\n            <div>\r\n              <span>{{'SECTION_CODE' | translate}}</span>\r\n            </div>\r\n            <div>\r\n              <input class=\"form-control\" formControlName=\"code\" placeholder=\"{{'SECTION_CODE_PLACEHOLDER' | translate}}\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <!--      According to the design, this field should be here, but for now it has no correspondence in the model.-->\r\n\r\n          <!--        <div>-->\r\n          <!--          <span>{{'SECTION_DESCRIPTION' | translate}}</span>-->\r\n          <!--        </div>-->\r\n          <!--        <div>-->\r\n          <!--          <textarea rows=\"4\" class=\"form-control\" [(ngModel)]=\"section.description\" placeholder=\"{{'SECTION_DESCRIPTION_PLACEHOLDER' | translate}}\"></textarea>-->\r\n          <!--        </div>-->\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"question-list\" cdkDropList (cdkDropListDropped)=\"onReorder($event)\">\r\n        <div *ngFor=\"let question of questionFormGroupsArray; let i = index\" cdkDrag class=\"question-line\">\r\n          <app-question [questionFormGroup]=\"question\"\r\n                        (questionDeleteEventEmitter)=\"onQuestionDelete(i)\" class=\"question\">\r\n          </app-question>\r\n\r\n          <div class=\"field icon-holder\" cdkDragHandle>\r\n            <img src=\"/assets/forms/icon-reorder.png\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-12 add-question-button\" (click)=\"addQuestion()\">+ {{'QUESTION_ADD' | translate}}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StatisticsCardComponent",
            "id": "component-StatisticsCardComponent-2ef0b59ca363d8b2789970a47bb2683a",
            "file": "src/app/components/statistics/statistics-card/statistics-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics-card",
            "styleUrls": [
                "./statistics-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statistics-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 14,
                    "type": "StatisticsStateItem"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { StatisticsStateItem } from '../../../store/statistics/statistics.state';\r\nimport { Observable } from 'rxjs';\r\nimport { LabelValueModel } from '../../../models/labelValue.model';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-statistics-card',\r\n  templateUrl: './statistics-card.component.html',\r\n  styleUrls: ['./statistics-card.component.scss']\r\n})\r\nexport class StatisticsCardComponent implements OnInit {\r\n\r\n  @Input()\r\n  item: StatisticsStateItem;\r\n\r\n\r\n  get itemValues(){\r\n    if (!this.item.values){\r\n      return [];\r\n    }\r\n    return this.item.values.slice(0, 5);\r\n  }\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~variables.scss';\r\n.card-header {\r\n  background: $color-light-gray;\r\n  padding: 10px 25px;\r\n  height: 100px;\r\n  display: flex;\r\n}\r\n.card-header-contents {\r\n  margin: auto 0;\r\n}\r\n.card-row {\r\n  &:nth-child(2n) {\r\n    background: $color-light-gray;\r\n  }\r\n}\r\n.card-footer {\r\n  padding: 10px 25px;\r\n  a {\r\n    text-decoration: underline;\r\n    color: blue;\r\n  }\r\n}\r\n",
                    "styleUrl": "./statistics-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "itemValues": {
                    "name": "itemValues",
                    "getSignature": {
                        "name": "itemValues",
                        "type": "",
                        "returnType": "",
                        "line": 17
                    }
                }
            },
            "templateData": "<div class=\"panel panel-default\">\r\n  <div class=\"card-header\">\r\n    <div class=\"card-header-contents\">\r\n      <h3 *ngIf=\"item.header\" style=\"margin:0\">\r\n        {{item.header}}\r\n      </h3>\r\n      <h4 *ngIf=\"item.subHeader\" style=\"margin:0\">\r\n        {{item.subHeader}}\r\n      </h4>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"!item.error\">\r\n    <div *ngIf=\"item.loading\">\r\n      {{'LOADING' | translate}}\r\n    </div>\r\n    <div *ngIf=\"!item.loading\">\r\n      <div *ngFor=\"let labelValue of itemValues;let i = index\" class=\"card-row\">\r\n        <app-statistics-value class=\"col-md-1-1\" [index]=\"i+1\" [label]=\"labelValue.label\" [value]=\"labelValue.value\">\r\n        </app-statistics-value>\r\n      </div>\r\n\r\n      <div class=\"row card-footer\">\r\n        <div class=\"col-xs-12 text-right\">\r\n          <a class=\"\" [routerLink]=\"['/statistics',item.key]\">\r\n            {{'SEE_COMPLETE_LIST' | translate}}\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StatisticsComponent",
            "id": "component-StatisticsComponent-e10183637043fb7c72d6da911fb86334",
            "file": "src/app/components/statistics/statistics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics",
            "styleUrls": [
                "./statistics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statistics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "anyStatistics",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "statisticsState",
                    "type": "StatisticsStateItem[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "canShowItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "StatisticsStateItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "StatisticsStateItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {map} from 'rxjs/operators';\r\nimport { StatisticsStateItem } from '../../store/statistics/statistics.state';\r\nimport { LoadStatisticAction } from '../../store/statistics/statistics.actions';\r\nimport { AppState } from '../../store/store.module';\r\nimport {select, Store} from '@ngrx/store';\r\nimport { LabelValueModel } from '../../models/labelValue.model';\r\nimport { ApiService } from '../../core/apiService/api.service';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {values} from 'lodash';\r\n\r\n@Component({\r\n  selector: 'app-statistics',\r\n  templateUrl: './statistics.component.html',\r\n  styleUrls: ['./statistics.component.scss']\r\n})\r\nexport class StatisticsComponent implements OnInit, OnDestroy {\r\n\r\n  statisticsState: StatisticsStateItem[];\r\n  sub: Subscription;\r\n\r\n  anyStatistics = false;\r\n\r\n  constructor(private http: ApiService, private store: Store<AppState>) { }\r\n\r\n\r\n  canShowItem(item: StatisticsStateItem) {\r\n    return item && !item.error && !item.loading && item.values && item.values.length;\r\n  }\r\n\r\n  ngOnInit() {\r\n      this.sub = this.store\r\n        .pipe(\r\n          select(state => state.statistics),\r\n          map(state => values(state)),\r\n          map(s => s.filter(v => !v.error && !v.loading)), )\r\n        .subscribe(s => {\r\n          this.statisticsState = s;\r\n          this.anyStatistics = !!s.length;\r\n        });\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hidden{\r\n    display:none\r\n}",
                    "styleUrl": "./statistics.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "ApiService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"anyStatistics\" class=\"row\">\r\n    <div class=\"col-md-6 col-lg-4\" style=\"margin-top:20px\" [class.hidden]=\"!canShowItem(item)\" *ngFor=\"let item of statisticsState\">\r\n        <app-statistics-card *ngIf=\"canShowItem(item)\" [item]=\"item\">\r\n        </app-statistics-card>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"!anyStatistics\">\r\n    <app-loading-indicator></app-loading-indicator>\r\n</div>\r\n"
        },
        {
            "name": "StatisticsDetailsComponent",
            "id": "component-StatisticsDetailsComponent-2b3aed100bf07f49351152a6d8ec53b8",
            "file": "src/app/components/statistics/statistics-details/statistics-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics-details",
            "styleUrls": [
                "./statistics-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statistics-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "state",
                    "type": "StatisticsStateItem",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subs",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "currentValues",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "pageChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "rowIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        },
                        {
                            "name": "listIndex",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "listIndex",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "splitList",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {mergeMap, map} from 'rxjs/operators';\r\nimport { LabelValueModel } from '../../../models/labelValue.model';\r\nimport { LoadStatisticAction } from '../../../store/statistics/statistics.actions';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../store/store.module';\r\nimport { StatisticsStateItem } from '../../../store/statistics/statistics.state';\r\nimport { ApiService } from '../../../core/apiService/api.service';\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-statistics-details',\r\n  templateUrl: './statistics-details.component.html',\r\n  styleUrls: ['./statistics-details.component.scss']\r\n})\r\nexport class StatisticsDetailsComponent implements OnInit, OnDestroy {\r\n\r\n  state: StatisticsStateItem;\r\n\r\n  subs: Subscription[];\r\n\r\n  currentValues() {\r\n    const startPage = this.state.page - 1,\r\n      pageSize = this.state.pageSize,\r\n      startIndex = startPage * pageSize,\r\n      endIndex = startIndex + pageSize;\r\n\r\n    return this.state.values.slice(startIndex, endIndex);\r\n  }\r\n  rowIndex(index, listIndex) {\r\n    const offset = (this.state.page - 1) * this.state.pageSize;\r\n    if (listIndex === 0) {\r\n      return offset + index + 1;\r\n    }\r\n\r\n    return offset + (this.currentValues().length / 2) * listIndex + index + 1;\r\n  }\r\n\r\n  splitList() {\r\n    const list = this.currentValues();\r\n    return [\r\n      list.slice(0, list.length / 2),\r\n      list.slice(list.length / 2, list.length)\r\n    ];\r\n  }\r\n\r\n  retry() {\r\n    this.store.dispatch(new LoadStatisticAction(this.state.key, this.state.page, this.state.pageSize, true));\r\n  }\r\n\r\n  pageChanged(event) {\r\n    this.store.dispatch(new LoadStatisticAction(this.state.key, event.page, event.pageSize));\r\n  }\r\n\r\n  constructor(private store: Store<AppState>, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.subs = [this.route.params.pipe(\r\n      map(p => p['key']),\r\n      mergeMap(key => this.store.select(s => s.statistics).pipe(map(s => s[key]))), )\r\n      .subscribe(s => this.state = s)];\r\n\r\n  }\r\n  ngOnDestroy() {\r\n    this.subs.map(sub => sub.unsubscribe());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~variables.scss';\r\n.card-header {\r\n  background: $color-light-gray;\r\n  padding: 10px 25px;\r\n  height: 100px;\r\n  display: flex;\r\n}\r\n.card-header-contents {\r\n  margin: auto 0;\r\n}\r\n.card-row {\r\n  &:nth-child(2n) {\r\n    background: $color-light-gray;\r\n  }\r\n}\r\n.card-footer {\r\n  padding: 10px 25px;\r\n  a {\r\n    text-decoration: underline;\r\n    color: blue;\r\n  }\r\n}\r\n",
                    "styleUrl": "./statistics-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"panel panel-default col-xs-12 col-lg-6 col-md-8 col-md-offset-2 col-lg-offset-3\" style=\"padding: 0;\">\r\n  <div class=\"card-header\">\r\n    <div class=\"card-header-contents\">\r\n      <h3 *ngIf=\"state.header\" style=\"margin:0\">\r\n        {{state.header}}\r\n      </h3>\r\n      <h4 *ngIf=\"state.subHeader\" style=\"margin:0\">\r\n        {{state.subHeader}}\r\n      </h4>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div *ngIf=\"state.error\">\r\n      <app-error-indicator (retry)=\"retry\">\r\n      </app-error-indicator>\r\n    </div>\r\n    <div>\r\n      <app-pagination *ngIf=\"!state.error && !state.loading\" class=\"col-md-1-2\" [page]=\"state.page\"\r\n                      [pageSize]=\"state.pageSize\"\r\n                      [totalItems]=\"state.totalItems\" [nextEnabled]=\"!state.loading\" (pageChanged)=\"pageChanged($event)\">\r\n      </app-pagination>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"!state.error\">\r\n    <div *ngIf=\"state.loading\">\r\n      {{'LOADING' | translate}}\r\n    </div>\r\n    <div *ngIf=\"!state.loading\">\r\n      <div *ngFor=\"let list of splitList();let listIndex=index\" class=\"\">\r\n        <div *ngFor=\"let model of list;let i=index\" class=\"card-row\">\r\n          <app-statistics-value class=\"col-md-1-1\" [index]=\"rowIndex(i, listIndex)\" [label]=\"model.label\"\r\n                                [value]=\"model.value\">\r\n          </app-statistics-value>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"state.loading\" class=\"center-block\">\r\n        <app-loading-indicator></app-loading-indicator>\r\n      </div>\r\n      <div>\r\n        <app-pagination *ngIf=\"!state.error && !state.loading\" class=\"col-md-1-2\" [page]=\"state.page\"\r\n                        [pageSize]=\"state.pageSize\"\r\n                        [totalItems]=\"state.totalItems\" [nextEnabled]=\"!state.loading\" (pageChanged)=\"pageChanged($event)\">\r\n        </app-pagination>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StatisticsValueComponent",
            "id": "component-StatisticsValueComponent-7a2f846c60ba056ee7811cbfd868cc95",
            "file": "src/app/components/statistics/statistics-value/statistics-value.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics-value",
            "styleUrls": [
                "./statistics-value.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statistics-value.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "index",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-statistics-value',\r\n    styleUrls: ['./statistics-value.component.scss'],\r\n    templateUrl: './statistics-value.component.html'\r\n})\r\nexport class StatisticsValueComponent implements OnInit {\r\n\r\n    @Input()\r\n    label: string;\r\n\r\n    @Input()\r\n    value: string;\r\n\r\n    @Input()\r\n    index: number;\r\n\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\r\n  padding: 10px 25px;\r\n}\r\n",
                    "styleUrl": "./statistics-value.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n    <div class=\"col-xs-8\">\r\n        <span style=\"margin-right:10px\">\r\n            <strong>{{index | number:'2.0-0'}}</strong>\r\n        </span>\r\n        <span>\r\n            <strong>\r\n            {{label}}\r\n          </strong>\r\n        </span>\r\n    </div>\r\n    <div class=\"col-xs-4 text-center\">\r\n        {{value}}\r\n    </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AnswersService"
                        },
                        {
                            "name": "FormsService"
                        },
                        {
                            "name": "NotificationsService"
                        },
                        {
                            "name": "ObserversService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AppStoreModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppStoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AnswerComponent"
                        },
                        {
                            "name": "AnswerDetailsComponent"
                        },
                        {
                            "name": "AnswerExtraQuestionsComponent"
                        },
                        {
                            "name": "AnswerFormListComponent"
                        },
                        {
                            "name": "AnswerListComponent"
                        },
                        {
                            "name": "AnswerNoteComponent"
                        },
                        {
                            "name": "CategoricalQuestionComponent"
                        },
                        {
                            "name": "FormCreateComponent"
                        },
                        {
                            "name": "FormsComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "OberverRowComponent"
                        },
                        {
                            "name": "ObserverCardComponent"
                        },
                        {
                            "name": "ObserverProfileComponent"
                        },
                        {
                            "name": "ObserversComponent"
                        },
                        {
                            "name": "OptionComponent"
                        },
                        {
                            "name": "QuestionComponent"
                        },
                        {
                            "name": "SectionComponent"
                        },
                        {
                            "name": "StatisticsCardComponent"
                        },
                        {
                            "name": "StatisticsComponent"
                        },
                        {
                            "name": "StatisticsDetailsComponent"
                        },
                        {
                            "name": "StatisticsValueComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AnswerComponent"
                        },
                        {
                            "name": "AnswerDetailsComponent"
                        },
                        {
                            "name": "AnswerExtraQuestionsComponent"
                        },
                        {
                            "name": "AnswerFormListComponent"
                        },
                        {
                            "name": "AnswerListComponent"
                        },
                        {
                            "name": "AnswerNoteComponent"
                        },
                        {
                            "name": "CategoricalQuestionComponent"
                        },
                        {
                            "name": "FormCreateComponent"
                        },
                        {
                            "name": "FormsComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "OberverRowComponent"
                        },
                        {
                            "name": "ObserverCardComponent"
                        },
                        {
                            "name": "ObserverProfileComponent"
                        },
                        {
                            "name": "ObserversComponent"
                        },
                        {
                            "name": "OptionComponent"
                        },
                        {
                            "name": "QuestionComponent"
                        },
                        {
                            "name": "SectionComponent"
                        },
                        {
                            "name": "StatisticsCardComponent"
                        },
                        {
                            "name": "StatisticsComponent"
                        },
                        {
                            "name": "StatisticsDetailsComponent"
                        },
                        {
                            "name": "StatisticsValueComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiService"
                        },
                        {
                            "name": "TokenService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorIndicatorComponent"
                        },
                        {
                            "name": "IconToggleInputComponent"
                        },
                        {
                            "name": "LoadingIndicatorComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ErrorIndicatorComponent"
                        },
                        {
                            "name": "IconToggleInputComponent"
                        },
                        {
                            "name": "LoadingIndicatorComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__karma__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/components.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n    AnswerComponent,\r\n    AnswerListComponent,\r\n    AnswerDetailsComponent,\r\n    AnswerFormListComponent,\r\n    AnswerNoteComponent,\r\n    CategoricalQuestionComponent,\r\n    AnswerExtraQuestionsComponent,\r\n    ObserversComponent,\r\n    ObserverCardComponent,\r\n    OberverRowComponent,\r\n    ObserverProfileComponent,\r\n    FormsComponent,\r\n    FormCreateComponent,\r\n    SectionComponent,\r\n    QuestionComponent,\r\n    OptionComponent,\r\n    HeaderComponent,\r\n    StatisticsComponent,\r\n    StatisticsCardComponent,\r\n    StatisticsDetailsComponent,\r\n    StatisticsValueComponent,\r\n    NotificationsComponent,\r\n    LoginComponent,\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.local.ts",
                "type": "EnvironmentConfig",
                "defaultValue": "{\r\n  production: false,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://localhost:5001'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.qa.ts",
                "type": "EnvironmentConfig",
                "defaultValue": "{\r\n  production: true,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://api.votemonitor.org/'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "EnvironmentConfig",
                "defaultValue": "{\r\n  production: true,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://api.votemonitor.org/'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.token.ts",
                "type": "EnvironmentConfig",
                "defaultValue": "{\r\n  production: false,\r\n  observerGuideUrl: 'http://monitorizare-vot-ghid.azurewebsites.net/',\r\n  apiUrl: 'https://#{apiEndpoint}#'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "EnvironmentConfig",
                "defaultValue": "{\r\n  production: false,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://api.votemonitor.org/'\r\n}"
            },
            {
                "name": "formsInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/form/form.reducer.ts",
                "type": "FormState",
                "defaultValue": "{\r\n    items: [],\r\n    fullyLoaded: {}\r\n}"
            },
            {
                "name": "HttpMethod",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/apiService/api.service.ts",
                "type": "object",
                "defaultValue": "{\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  DELETE: 'DELETE',\r\n  PATCH: 'PATCH',\r\n  HEAD: 'HEAD',\r\n  OPTIONS: 'OPTIONS',\r\n}"
            },
            {
                "name": "initialAnswerState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/answer/answer.reducer.ts",
                "type": "AnswerState",
                "defaultValue": "new AnswerState()"
            },
            {
                "name": "moduleImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/store.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n    StoreModule.forRoot({ form: formReducer, answer: answerReducer,\r\n                                  statistics: statisticsReducer, observers: observersReducer,\r\n                                  note: noteReducer , observersCount: observersCountReducer}),\r\n    EffectsModule.forRoot([\r\n      FormEffects,\r\n      AnswerEffects,\r\n      StatisticsEffects,\r\n      ObserversEffects,\r\n      ObserversCountEffects,\r\n      NoteEffects\r\n    ]),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25, // Retains last 25 states\r\n      logOnly: environment.production, // Restrict extension to log-only mode\r\n    }),\r\n]"
            },
            {
                "name": "noteInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/note/note.reducer.ts",
                "type": "",
                "defaultValue": "new NoteState()"
            },
            {
                "name": "observersConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/observers/observers.config.ts",
                "type": "[]",
                "defaultValue": "[{\r\n    key: 'observers-list',\r\n    method: '',\r\n    header: 'Observatori',\r\n    subHeader: '',\r\n}]"
            },
            {
                "name": "observersCountInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/observers/observers.state.ts",
                "type": "ObserversCountState",
                "defaultValue": "{ count: 0 }"
            },
            {
                "name": "observersInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/observers/observers.state.ts",
                "type": "ObserversState",
                "defaultValue": "_.keyBy<ObserversStateItem>(observersConfig.map<ObserversStateItem>((config) => new ObserversStateItem(config)), value => value.key)"
            },
            {
                "name": "QUESTION_TYPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/form.question.model.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    id: 0,\r\n    name: 'MULTIPLE_CHOICE'\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'SINGLE_CHOICE'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'SINGLE_CHOICE_TEXT'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'MULTIPLE_CHOICE_TEXT'\r\n  }\r\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "statisticsConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/statistics/statistics.config.ts",
                "type": "[]",
                "defaultValue": "[{\r\n    key: 'numar-observatori',\r\n    method: 'observerNumber',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cei mai multi observatori',\r\n}, {\r\n    //   key: 'sesizari',\r\n    //   method: \"sesizari\",\r\n    //   header: \"Topul sectiilor\",\r\n    //   subHeader: \"cu cele mai multe sesizari\"\r\n    // }, {\r\n    key: 'sesizari-judete',\r\n    method: 'countiesIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai sesizari'\r\n}, {\r\n    key: 'sesizari-sectii',\r\n    method: 'pollingStationIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari'\r\n}, {\r\n    key: 'sesizari-deschidere-judete',\r\n    method: 'countiesOpeningIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai multe sesizari la deschidere'\r\n}, {\r\n    key: 'sesizari-deschidere-sectii',\r\n    method: 'pollingStationOpeningIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari la deschidere'\r\n}, {\r\n    key: 'sesizari-numarare-judete',\r\n    method: 'countiesByCountingIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai multe sesizari la numararea voturilor'\r\n}, {\r\n    key: 'sesizari-numarare-sectii',\r\n    method: 'pollingStationsByCountingIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari la numararea voturilor'\r\n}]"
            },
            {
                "name": "statisticsInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/statistics/statistics.state.ts",
                "type": "StatisticsState",
                "defaultValue": "keyBy<StatisticsStateItem>(\r\n  statisticsConfig.map<StatisticsStateItem>((config) => new StatisticsStateItem(config)), value => value.key)"
            },
            {
                "name": "typeCache",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/util.ts",
                "type": "literal type",
                "defaultValue": "{}"
            }
        ],
        "functions": [
            {
                "name": "actionType",
                "file": "src/app/store/util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "label"
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "label",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "answerReducer",
                "file": "src/app/store/answer/answer.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formReducer",
                "file": "src/app/store/form/form.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "$action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "$action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "httpClient"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initFormFormGroup",
                "file": "src/app/components/forms/form-groups-builder.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initOptionFormGroup",
                "file": "src/app/components/forms/form-groups-builder.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initQuestionFormGroup",
                "file": "src/app/components/forms/form-groups-builder.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initSectionFormGroup",
                "file": "src/app/components/forms/form-groups-builder.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "moveItemInFormArray",
                "file": "src/app/components/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "source"
                    },
                    {
                        "name": "from"
                    },
                    {
                        "name": "to"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "source",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "from",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "to",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "noteReducer",
                "file": "src/app/store/note/note.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observersCountReducer",
                "file": "src/app/store/observers/observers.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observersItemReducer",
                "file": "src/app/store/observers/observers.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observersReducer",
                "file": "src/app/store/observers/observers.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "shouldLoadPage",
                "file": "src/app/shared/pagination.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "page"
                    },
                    {
                        "name": "pageSize"
                    },
                    {
                        "name": "arrayLen",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "page",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageSize",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "arrayLen",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "statisticsItemReducer",
                "file": "src/app/store/statistics/statistics.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "statisticsReducer",
                "file": "src/app/store/statistics/statistics.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AnswerActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadAnswerPreviewAction | LoadAnswerPreviewErorrAction | LoadAnswerPreviewDoneAction | LoadAnswerDetailsAction | LoadAnswerDetailsErrorAction | LoadAnswerDetailsDoneAction | LoadAnswerExtraAction | LoadAnswerExtraDoneAction | LoadAnswerExtraErrorAction",
                "file": "src/app/store/answer/answer.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "FormActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FormLoadAction | FormLoadCompletedAction | FormClearAll | FullyLoadFormAction | FullyLoadFormCompleteAction | FormUploadAction",
                "file": "src/app/store/form/form.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "NoteActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadNotesAction | LoadNotesDoneAction",
                "file": "src/app/store/note/note.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ObserverProfileField",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/components/observers/observer-profile/observer-profile.form.ts",
                "description": "",
                "kind": 174
            },
            {
                "name": "ObserversActionTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction",
                "file": "src/app/store/observers/observers.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "StatisticsActionTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadStatisticAction | LoadStatisticsCompleteAction | LoadStatisticsErrorAction",
                "file": "src/app/store/statistics/statistics.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ListType",
                "childs": [
                    {
                        "name": "CARD",
                        "value": "CARD"
                    },
                    {
                        "name": "LIST",
                        "value": "LIST"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/models/list.type.model.ts"
            },
            {
                "name": "PageState",
                "childs": [
                    {
                        "name": "NEW",
                        "value": "new"
                    },
                    {
                        "name": "VIEW",
                        "value": "view"
                    },
                    {
                        "name": "EDIT",
                        "value": "edit"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/models/page-state.model.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "__karma__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                },
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/app/components/components.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/components.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    AnswerComponent,\r\n    AnswerListComponent,\r\n    AnswerDetailsComponent,\r\n    AnswerFormListComponent,\r\n    AnswerNoteComponent,\r\n    CategoricalQuestionComponent,\r\n    AnswerExtraQuestionsComponent,\r\n    ObserversComponent,\r\n    ObserverCardComponent,\r\n    OberverRowComponent,\r\n    ObserverProfileComponent,\r\n    FormsComponent,\r\n    FormCreateComponent,\r\n    SectionComponent,\r\n    QuestionComponent,\r\n    OptionComponent,\r\n    HeaderComponent,\r\n    StatisticsComponent,\r\n    StatisticsCardComponent,\r\n    StatisticsDetailsComponent,\r\n    StatisticsValueComponent,\r\n    NotificationsComponent,\r\n    LoginComponent,\r\n]"
                }
            ],
            "src/environments/environment.local.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.local.ts",
                    "type": "EnvironmentConfig",
                    "defaultValue": "{\r\n  production: false,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://localhost:5001'\r\n}"
                }
            ],
            "src/environments/environment.qa.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.qa.ts",
                    "type": "EnvironmentConfig",
                    "defaultValue": "{\r\n  production: true,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://api.votemonitor.org/'\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "EnvironmentConfig",
                    "defaultValue": "{\r\n  production: true,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://api.votemonitor.org/'\r\n}"
                }
            ],
            "src/environments/environment.token.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.token.ts",
                    "type": "EnvironmentConfig",
                    "defaultValue": "{\r\n  production: false,\r\n  observerGuideUrl: 'http://monitorizare-vot-ghid.azurewebsites.net/',\r\n  apiUrl: 'https://#{apiEndpoint}#'\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "EnvironmentConfig",
                    "defaultValue": "{\r\n  production: false,\r\n  observerGuideUrl: 'https://votcorect.ro/wp-content/uploads/2020/09/Manualul-observatorului-locale-2020-public.pdf',\r\n  apiUrl: 'https://api.votemonitor.org/'\r\n}"
                }
            ],
            "src/app/store/form/form.reducer.ts": [
                {
                    "name": "formsInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/form/form.reducer.ts",
                    "type": "FormState",
                    "defaultValue": "{\r\n    items: [],\r\n    fullyLoaded: {}\r\n}"
                }
            ],
            "src/app/core/apiService/api.service.ts": [
                {
                    "name": "HttpMethod",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/apiService/api.service.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  DELETE: 'DELETE',\r\n  PATCH: 'PATCH',\r\n  HEAD: 'HEAD',\r\n  OPTIONS: 'OPTIONS',\r\n}"
                }
            ],
            "src/app/store/answer/answer.reducer.ts": [
                {
                    "name": "initialAnswerState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/answer/answer.reducer.ts",
                    "type": "AnswerState",
                    "defaultValue": "new AnswerState()"
                }
            ],
            "src/app/store/store.module.ts": [
                {
                    "name": "moduleImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/store.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    StoreModule.forRoot({ form: formReducer, answer: answerReducer,\r\n                                  statistics: statisticsReducer, observers: observersReducer,\r\n                                  note: noteReducer , observersCount: observersCountReducer}),\r\n    EffectsModule.forRoot([\r\n      FormEffects,\r\n      AnswerEffects,\r\n      StatisticsEffects,\r\n      ObserversEffects,\r\n      ObserversCountEffects,\r\n      NoteEffects\r\n    ]),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25, // Retains last 25 states\r\n      logOnly: environment.production, // Restrict extension to log-only mode\r\n    }),\r\n]"
                }
            ],
            "src/app/store/note/note.reducer.ts": [
                {
                    "name": "noteInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/note/note.reducer.ts",
                    "type": "",
                    "defaultValue": "new NoteState()"
                }
            ],
            "src/app/store/observers/observers.config.ts": [
                {
                    "name": "observersConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/observers/observers.config.ts",
                    "type": "[]",
                    "defaultValue": "[{\r\n    key: 'observers-list',\r\n    method: '',\r\n    header: 'Observatori',\r\n    subHeader: '',\r\n}]"
                }
            ],
            "src/app/store/observers/observers.state.ts": [
                {
                    "name": "observersCountInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/observers/observers.state.ts",
                    "type": "ObserversCountState",
                    "defaultValue": "{ count: 0 }"
                },
                {
                    "name": "observersInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/observers/observers.state.ts",
                    "type": "ObserversState",
                    "defaultValue": "_.keyBy<ObserversStateItem>(observersConfig.map<ObserversStateItem>((config) => new ObserversStateItem(config)), value => value.key)"
                }
            ],
            "src/app/models/form.question.model.ts": [
                {
                    "name": "QUESTION_TYPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/form.question.model.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    id: 0,\r\n    name: 'MULTIPLE_CHOICE'\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'SINGLE_CHOICE'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'SINGLE_CHOICE_TEXT'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'MULTIPLE_CHOICE_TEXT'\r\n  }\r\n]"
                }
            ],
            "src/app/store/statistics/statistics.config.ts": [
                {
                    "name": "statisticsConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/statistics/statistics.config.ts",
                    "type": "[]",
                    "defaultValue": "[{\r\n    key: 'numar-observatori',\r\n    method: 'observerNumber',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cei mai multi observatori',\r\n}, {\r\n    //   key: 'sesizari',\r\n    //   method: \"sesizari\",\r\n    //   header: \"Topul sectiilor\",\r\n    //   subHeader: \"cu cele mai multe sesizari\"\r\n    // }, {\r\n    key: 'sesizari-judete',\r\n    method: 'countiesIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai sesizari'\r\n}, {\r\n    key: 'sesizari-sectii',\r\n    method: 'pollingStationIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari'\r\n}, {\r\n    key: 'sesizari-deschidere-judete',\r\n    method: 'countiesOpeningIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai multe sesizari la deschidere'\r\n}, {\r\n    key: 'sesizari-deschidere-sectii',\r\n    method: 'pollingStationOpeningIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari la deschidere'\r\n}, {\r\n    key: 'sesizari-numarare-judete',\r\n    method: 'countiesByCountingIrregularities',\r\n    header: 'Topul judetelor',\r\n    subHeader: 'cu cele mai multe sesizari la numararea voturilor'\r\n}, {\r\n    key: 'sesizari-numarare-sectii',\r\n    method: 'pollingStationsByCountingIrregularities',\r\n    header: 'Topul sectiilor',\r\n    subHeader: 'cu cele mai multe sesizari la numararea voturilor'\r\n}]"
                }
            ],
            "src/app/store/statistics/statistics.state.ts": [
                {
                    "name": "statisticsInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/statistics/statistics.state.ts",
                    "type": "StatisticsState",
                    "defaultValue": "keyBy<StatisticsStateItem>(\r\n  statisticsConfig.map<StatisticsStateItem>((config) => new StatisticsStateItem(config)), value => value.key)"
                }
            ],
            "src/app/store/util.ts": [
                {
                    "name": "typeCache",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/util.ts",
                    "type": "literal type",
                    "defaultValue": "{}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/util.ts": [
                {
                    "name": "actionType",
                    "file": "src/app/store/util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "label"
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "label",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/answer/answer.reducer.ts": [
                {
                    "name": "answerReducer",
                    "file": "src/app/store/answer/answer.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/form/form.reducer.ts": [
                {
                    "name": "formReducer",
                    "file": "src/app/store/form/form.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "$action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "httpClient"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpClient",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/components/forms/form-groups-builder.ts": [
                {
                    "name": "initFormFormGroup",
                    "file": "src/app/components/forms/form-groups-builder.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formBuilder"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "formBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initOptionFormGroup",
                    "file": "src/app/components/forms/form-groups-builder.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formBuilder"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "formBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initQuestionFormGroup",
                    "file": "src/app/components/forms/form-groups-builder.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formBuilder"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "formBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSectionFormGroup",
                    "file": "src/app/components/forms/form-groups-builder.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formBuilder"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "formBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/components/utils.ts": [
                {
                    "name": "moveItemInFormArray",
                    "file": "src/app/components/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "source"
                        },
                        {
                            "name": "from"
                        },
                        {
                            "name": "to"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "from",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/note/note.reducer.ts": [
                {
                    "name": "noteReducer",
                    "file": "src/app/store/note/note.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/observers/observers.reducer.ts": [
                {
                    "name": "observersCountReducer",
                    "file": "src/app/store/observers/observers.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observersItemReducer",
                    "file": "src/app/store/observers/observers.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observersReducer",
                    "file": "src/app/store/observers/observers.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/pagination.service.ts": [
                {
                    "name": "shouldLoadPage",
                    "file": "src/app/shared/pagination.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "page"
                        },
                        {
                            "name": "pageSize"
                        },
                        {
                            "name": "arrayLen",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arrayLen",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/statistics/statistics.reducer.ts": [
                {
                    "name": "statisticsItemReducer",
                    "file": "src/app/store/statistics/statistics.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statisticsReducer",
                    "file": "src/app/store/statistics/statistics.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/models/list.type.model.ts": [
                {
                    "name": "ListType",
                    "childs": [
                        {
                            "name": "CARD",
                            "value": "CARD"
                        },
                        {
                            "name": "LIST",
                            "value": "LIST"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/models/list.type.model.ts"
                }
            ],
            "src/app/models/page-state.model.ts": [
                {
                    "name": "PageState",
                    "childs": [
                        {
                            "name": "NEW",
                            "value": "new"
                        },
                        {
                            "name": "VIEW",
                            "value": "view"
                        },
                        {
                            "name": "EDIT",
                            "value": "edit"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/models/page-state.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/answer/answer.actions.ts": [
                {
                    "name": "AnswerActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadAnswerPreviewAction | LoadAnswerPreviewErorrAction | LoadAnswerPreviewDoneAction | LoadAnswerDetailsAction | LoadAnswerDetailsErrorAction | LoadAnswerDetailsDoneAction | LoadAnswerExtraAction | LoadAnswerExtraDoneAction | LoadAnswerExtraErrorAction",
                    "file": "src/app/store/answer/answer.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/form/form.actions.ts": [
                {
                    "name": "FormActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FormLoadAction | FormLoadCompletedAction | FormClearAll | FullyLoadFormAction | FullyLoadFormCompleteAction | FormUploadAction",
                    "file": "src/app/store/form/form.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/note/note.actions.ts": [
                {
                    "name": "NoteActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadNotesAction | LoadNotesDoneAction",
                    "file": "src/app/store/note/note.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/components/observers/observer-profile/observer-profile.form.ts": [
                {
                    "name": "ObserverProfileField",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/components/observers/observer-profile/observer-profile.form.ts",
                    "description": "",
                    "kind": 174
                }
            ],
            "src/app/store/observers/observers.actions.ts": [
                {
                    "name": "ObserversActionTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadObserversAction | LoadObserversCompleteAction | LoadObserversErrorAction | LoadObserversCountAction | LoadObserversCountCompleteAction",
                    "file": "src/app/store/observers/observers.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/statistics/statistics.actions.ts": [
                {
                    "name": "StatisticsActionTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadStatisticAction | LoadStatisticsCompleteAction | LoadStatisticsErrorAction",
                    "file": "src/app/store/statistics/statistics.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "appRoutes",
                "filename": "src/app/routing/app.routes.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "canActivate": [
                            "AuthGuard",
                            "HomeGuard"
                        ],
                        "redirectTo": "/urgents"
                    },
                    {
                        "path": "answers",
                        "component": "AnswerComponent",
                        "canActivate": [
                            "AuthGuard",
                            "AnswerListGuard"
                        ],
                        "children": [
                            {
                                "path": "details/:idObserver/:idPollingStation",
                                "component": "AnswerDetailsComponent",
                                "canActivate": [
                                    "AuthGuard",
                                    "AnswerDetailsGuard"
                                ]
                            },
                            {
                                "path": "",
                                "canActivate": [
                                    "AuthGuard"
                                ],
                                "component": "AnswerDetailsComponent"
                            }
                        ]
                    },
                    {
                        "path": "urgents",
                        "component": "AnswerComponent",
                        "canActivate": [
                            "AuthGuard",
                            "AnswerListGuard"
                        ],
                        "data": {
                            "urgent": true
                        },
                        "children": [
                            {
                                "path": "details/:idObserver/:idPollingStation",
                                "component": "AnswerDetailsComponent",
                                "canActivate": [
                                    "AuthGuard",
                                    "AnswerDetailsGuard"
                                ]
                            },
                            {
                                "path": "",
                                "component": "AnswerDetailsComponent"
                            }
                        ]
                    },
                    {
                        "path": "statistics",
                        "component": "StatisticsComponent",
                        "canActivate": [
                            "AuthGuard",
                            "LoadStatisticsGuard"
                        ]
                    },
                    {
                        "path": "observatori",
                        "component": "ObserversComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "observatori/profil/:state",
                        "component": "ObserverProfileComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "observatori/profil/:state/:id",
                        "component": "ObserverProfileComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "statistics/:key",
                        "component": "StatisticsDetailsComponent",
                        "canActivate": [
                            "AuthGuard",
                            "LoadStatisticsGuard"
                        ]
                    },
                    {
                        "path": "formulare",
                        "component": "FormsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "formulare/nou",
                        "component": "FormCreateComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "formulare/:formId",
                        "component": "FormCreateComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "login",
                        "canActivate": [
                            "AnonGuard"
                        ],
                        "component": "LoginComponent"
                    },
                    {
                        "path": "notifications",
                        "component": "NotificationsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/answer/answer-details/answer-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnswerDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/answer/answer-extra-questions/answer-extra-questions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnswerExtraQuestionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/answer/answer-form-list/answer-form-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnswerFormListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/answer/answer-note/answer-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnswerNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/answer/answer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnswerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/answer/answers-list/answer-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnswerListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/answer/categorical-question/categorical-question.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoricalQuestionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/components.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/form-create/form-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/form-groups-builder.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "initFormFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/form-groups-builder.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "initOptionFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/form-groups-builder.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "initQuestionFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/form-groups-builder.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "initSectionFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/forms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/option/option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/question/question.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuestionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/section/section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/components/observers/oberver-row/oberver-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OberverRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/observers/observer-card/observer-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObserverCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/observers/observer-profile/observer-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObserverProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/observers/observer-profile/observer-profile.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObserverProfileForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/observers/observer-profile/observers-profile-upload.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObserverProfileUploadForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/observers/observers-filter.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObserversFilterForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/observers/observers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObserversComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/components/statistics/statistics-card/statistics-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/statistics/statistics-details/statistics-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/statistics/statistics-value/statistics-value.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsValueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/statistics/statistics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "moveItemInFormArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/anon.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AnonGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/apiService/api.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QueryParamBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/apiService/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/apiService/api.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/apiService/api.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HttpMethod",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authGuard/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/token/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/answer.extra.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AnswerExtra",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/answer.extra.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AnswerExtraConstructorData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/answer.filters.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AnswerFilters",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/answer.thread.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AnswerThread",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api-list-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiListResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/base.answer.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAnswer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/base.question.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/completed.answer.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CompletedAnswer",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/completed.question.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CompletedQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/form.info.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormDetails",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/form.info.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormInfo",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/form.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/form.question.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/models/form.question.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuestionType",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/form.question.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUESTION_TYPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/form.section.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormSection",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/labelValue.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LabelValueModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/note.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Note",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/notification.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GlobalNotificationModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/notification.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/observer.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Observer",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/routing/guards/home.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "HomeGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/routing/guards/load-answer-list.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AnswerListGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/routing/guards/load-anwer-details.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AnswerDetailsGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/routing/guards/load-statistics.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoadStatisticsGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/answers.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AnswersService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/answers.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AnswersPackFilter",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/forms.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notifications.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CountyPollingStationInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/observers.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ObserversService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/error-indicator/error-indicator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorIndicatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/icon-toggle-input/icon-toggle-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconToggleInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/loading-indicator/loading-indicator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingIndicatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pagination.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginationData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pagination.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "shouldLoadPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AnswerActionTypes",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerDetailsAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerDetailsDoneAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerDetailsErrorAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerExtraAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerExtraDoneAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerExtraErrorAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerPreviewAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerPreviewDoneAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAnswerPreviewErorrAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AnswerEffects",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.reducer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AnswerState",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "answerReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/answer/answer.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAnswerState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormActionTypes",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormClearAll",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormDeleteAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormErrorAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormLoadAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormLoadCompletedAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormUploadAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormUploadCompleteAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormUploadPublishAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FullyLoadFormAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FullyLoadFormCompleteAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.reducer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "formReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/form/form.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formsInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/note/note.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadNotesAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/note/note.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadNotesDoneAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/note/note.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NoteActionTypes",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/note/note.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NoteEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/note/note.reducer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NoteState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/note/note.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "noteReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/note/note.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noteInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteObserverAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadObserversAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadObserversCompleteAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadObserversCountAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadObserversCountCompleteAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadObserversErrorAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObserversActions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ObserversStateConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "observersConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ObserversCountEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ObserversEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observersCountReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observersItemReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observersReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObserversCountState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObserversState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObserversStateItem",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "observersCountInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/observers/observers.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "observersInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadStatisticAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadStatisticsCompleteAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadStatisticsErrorAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StatisticsActions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatisticsStateConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statisticsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatisticsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "statisticsItemReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "statisticsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StatisticsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StatisticsStateItem",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/store/statistics/statistics.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statisticsInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store.module.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "actionType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "typeCache",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.local.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.qa.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__karma__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}